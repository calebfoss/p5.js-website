---
title: learn
slug: learn/
---

<style>
  .methodsList {
    font-family: monospace;
    /*white-space: pre;*/
  }

  .additionalInformation {
    width: 100%;
    background-color: #dedeff;
    font-size: 15px;
    padding: 10px;
    margin: 30px 0;
  }

  .toc {
    width: 100%;
    background-color: #eee;
    font-size: 15px;
    padding: 10px;
    margin: 30px 0;
  }

  .toc h3 {
    margin-top: 15px;
  }
</style>

<div id="learn-page">

  {{> sidebar}}

  <div class="column-span">

    <main>
      <script src="//toolness.github.io/p5.js-widget/p5-widget.js"></script>

      {{!-- large title sketch --}}
      {{!-- <iframe src="{{assets}}/learn/basic3D/titleExample.html" width="720" height="350">
      </iframe> --}}

      <h1>WebGL: Appearance and Style</h1>

      <p>
        Creating in 3D is about more than just geometry. Cameras, lights, and materials are an
        important part of creating a visually interesting 3D scene. p5.js has a number of tools
        that make it possible to transform the appearance of our geometry.
      </p>

      <div class="toc">
        <h3>Table of Contents</h3>
        <ol>
          <li><a href="#camera">Camera and View</a></li>
          <li><a href="#lighting">Lighting</a></li>
          <li><a href="#materials">Materials and Textures</a></li>
          <li><a href="#conclusion">Conclusion</a></li>
          <li><a href="#glossary">Glossary</a></li>          
        </ol>
      </div>

      <h2 id="camera">Camera and View</h2>

      <p>The camera is an essential piece of a 3D scene; it gives us the sense of space and dimension that we are
        often looking for in 3D. In p5.js, the WebGL mode provides us with a perspective camera by default, but we can
        change this using <a class="code" href="{{root}}/reference/#/p5/perspective">perspective()</a> or <a
          class="code" href="{{root}}/reference/#/p5/ortho">ortho()</a>.</p>

      <img style="padding:60px;" src='{{assets}}/learn/basic3D/images/cameraTypeIllustration.png'
        alt="an illustration showing the difference between perspective and orthographic camera types">

      <p>A <em>perspective camera</em> skews objects so they appear to get smaller as they get further away, vanishing
        at a single point in the distance. This is in contrast to an <em>orthographic camera</em>, where the 
        geometry stays the same size as it gets further away and has no vanishing point. </p>

      {{!-- sketch illustrating 3D camera --}}
      <iframe src="{{assets}}/learn/basic3D/cameraExample.html" width="720" height="350">
      </iframe>

      <p>One setting that we can change with a perspective camera is the <em>field-of-view</em>, or FOV. This is the 
      term that is used to describe how much our camera can see, measured as an angle. In simple examples it might appear
      to have a zoom-like effect, but it will change way that shapes will change size in the distance.</p>

      <p>Another important term when working with cameras in 3D is the camera <em>frustum</em>. The frustum of the camera the
      shape of the camera's view, a pyramid-like shape within which geometry can be displayed. The frustum includes a <em>near and far plane</em>.
      The near plane defines the minimum distance that geometry must be from the camera to be rendered. The far plane defines the maximum
      distance that the geometry can be from the camera. Each of these can be changed to affect how close and how far the camera can see. This process
      of selectively including geometry is sometimes referred to as 'clipping'.</p>

      <div style="display:flex; align-items:center; justify-content: center;">
      <img style="width:50%;" src='{{assets}}/learn/basic3D/images/frustum_example.png'
        alt="an illustration showing the the camera frustum, near plane, and far plane">
      </div>

      <p>Cameras can be moved by passing arguments to <a class="code">camera()</a>, but constantly moving and adjusting the camera in code can be tedious, especially when you are experimenting with
        ideas. p5.js has a special camera method, <a class="code"
          href="{{root}}/reference/#/p5/orbitControl">orbitControl()</a>, that can be used to zoom, pan,
        and position the camera using the mouse.</p>

      <p>
        A scene can have multiple cameras, but only one camera can be active at a time. Sketches in p5.js will default
        to having a single perspective camera, but that can be changed by calling either <a
          class="code">perspective()</a>
        (with new parameters) or <a class="code">ortho()</a>. <a class="code">camera()</a> can be used to change the
        position of the active camera and the position that the camera is looking at.
      </p>

      {{!-- camera example --}}
      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
function setup() {
  createCanvas(windowWidth, windowHeight, WEBGL);
  debugMode()
  // uncomment to change the perspective camera to orthographic
  // ortho();

  // setting initial camera position
  camera(200,-40, 200);
}

function draw() {
  background(220);
  
  let sphere_x = 0
  let sphere_y = 90
  let sphere_z = 0
  
  let box_x = 0
  let box_y = -90
  let box_z = 0
  
  // uncomment to point camera at sphere
  // camera(
  //   400,-40, 400, // camera position
  //   sphere_x, sphere_y, sphere_z // position to look at
  // )
  
  // uncomment to point camera at box
  // camera(
  //   400,-40, 400, // camera position
  //   box_x, box_y, box_z // position to look at
  // )
  
  push()
  translate(sphere_x, sphere_y, sphere_z)
  sphere(40,8)
  pop()
  
  push()
  translate(box_x, box_y, box_z)
  box()
  pop()
}
      </script>



      <h2 id="lighting">Lighting</h2>

      <p>Lighting is another essential part of a 3D scene. To be able to convey shape and depth in 3D is necessary to
        have a light source. p5.js has a few different types of light that can be used in a sketch.</p>

      <ul>
        <li><h3><a class="code" href="{{root}}/reference/#/p5/ambientLight">ambientLight()</a></h3>
          <ul style="margin-left:15px;">
            <li>Ambient light makes everything display a little brighter, with no consideration for light position or
              direction.</li>
          </ul>
        </li>
        <li><h3><a class="code" href="{{root}}/reference/#/p5/directionalLight">directionalLight()</a></h3>
          <ul style="margin-left:15px;">
            <li>A directional light shines from one direction, which can be especially useful for communicating depth in
              a scene, or when a scene needs a 'sun' light. This method accepts a color and direction.</li>
          </ul>
        </li>
        <li><h3><a class="code" href="{{root}}/reference/#/p5/pointLight">pointLight()</a></h3>
          <ul style="margin-left:15px;">
            <li>A point light emits from a single point in all directions, similar to something like a lightbulb. This
              method accepts a color and a position for the light.</li>
          </ul>
        </li>
        <li><h3><a class="code" href="{{root}}/reference/#/p5/spotLight">spotLight()</a></h3>
          <ul style="margin-left:15px;">
            <li>A spot light emits from a single point in a single direction. This light is cast in a conical shape and
              it's radius and concentration can be adjusted.</li>
          </ul>
        </li>
        <li><h3><a class="code" href="{{root}}/reference/#/p5/noLights">noLights()</a></h3>
          <ul style="margin-left:15px;">
            <li>noLights() makes it so that all subsequent geometry is rendered without any lighting. This can be useful
              when you want flat, unshaded geometry.</li>
          </ul>
        </li>
      </ul>

      <p>
        These lights should be used within <a class="code">draw()</a>. Up to 5 lights can be used in a scene
        simultaneously,
        allowing you to compose a scene with varied and complex lighting sources. In the following sketch there are a number of different lights commented out. Try uncommenting them to see how the lights can be combined.
      </p>

      {{!-- lighting example --}}
      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
function setup() {
  createCanvas(windowWidth, windowHeight, WEBGL);
  camera(100,-80, 100);
}

function draw() {
  background(220);
  
  orbitControl()
  
  // use comments to enable / disable lights
  
  ambientLight(20);
  
  pointLight(
    255, 0, 0, // color
    40, -40,0  // position
  );
  
  directionalLight(
    0,255,0, // color
    1, 1, 0  // direction
 );
  
   let locX = mouseX - width / 2;
   let locY = mouseY - height / 2;
   spotLight(
     0, 0, 255,       // color
     locX, locY, 100, // position
    0, 0, -1,        // direction
    40               // radius of the spotlight cone
  );
  
  // noLights();
  
  box();
}
      </script>

      <br />

      {{!-- sketch illustrating lighting of geometry
      <iframe src="{{assets}}/learn/basic3D/lightingExample.html" width="720" height="350">
      </iframe> --}}

      <h2 id="materials">Materials and Textures</h2>
      <p>3D is not all about geometry, objects can appear differently based on their material. Materials dictate how
        light interacts with the geometry and how color (or texture) gets applied to the object. Materials can be
        varied,
        making objects shiny, rough, or even textured with images. </p>

      <p>In p5 we have </p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/normalMaterial">normalMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/ambientMaterial">ambientMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/emissiveMaterial">emissiveMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/specularMaterial">specularMaterial()</a></li>
      </ul>

      <p>Try commenting and uncommenting the different lights in this example:</p>

      {{!-- material example --}}
      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
function setup() {
  createCanvas(innerWidth, innerHeight, WEBGL);
}

function draw() {
  background(220);
  camera(200, -200, 200);
  
  noStroke();

  ambientLight(128)
  let locX = mouseX - width / 2;
  let locY = mouseY - height / 2;
  pointLight(255, 255, 255, locX, locY, 100);

  // normal material shows the geometry normals
  normalMaterial();

  // ambient materials reflect under any light
  ambientMaterial(255, 0, 0);

  // emissive materials show the same color regardless of light
  emissiveMaterial(0, 255, 0);

  // specular materials reflect the color of the light source 
  // and can vary in 'shininess'
  shininess(10)
  specularMaterial(0, 0, 255);

  // box(50);
  sphere();
}
      </script>

      <p>More custom materials can be achieved through using <a class="code">texture()</a>. In short, these are images
        that can be mapped onto the surface of a geometry. These textures can be imported from an image and can even be
        generated within code using shaders. To map a texture to your geometry, use <a class="code">loadImage()</a> 
        within <a class="code">preload()</a>, then call <a class="code">texture()</a> before drawing your shape.
      </p>

      {{!-- texture example --}}
      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
let myTexture;

function preload() {
  myTexture = loadImage("{{assets}}/learn/basic3D/images/simpleTexture.png")
  // map textures between 0 and 1 to match geometry uvs
  textureMode(NORMAL)
}

function setup() {
  createCanvas(innerWidth, innerHeight, WEBGL);
}

function draw() {
  background(220);
  
  // apply the texture to the box
  texture(myTexture)
  
  push()
  rotateX(millis()/1000)
  rotateY(millis()/700)
  box()
  pop()
}
      </script>


      <div class="additionalInformation">
        <p> 
          While they are useful for changing the appearance of your geometry, shaders are a bit beyond the scope of this 
          tutorial, so make sure to check out the <a href="{{root}}/learn/introduction-to-shaders.html">Introduction to Shaders</a> 
          page when you are ready. 
        </p>
      </div>


      {{!-- sketch illustrating materials --}}
      {{!-- <iframe src="{{assets}}/learn/basic3D/materialsExample.html" width="720" height="350">
      </iframe> --}}

      <h2 id="glossary">Glossary</h2>

      <h3>Camera</h3>
      <p>The viewpoint of a 3D scene</p>

      <h3>Perspective</h3>
      <p>A projection that gives the appearance of depth, achieved by making objects in the distance appear smaller.</p>

      <h3>Orthographic</h3>
      <p>A projection that is <em>orthogonal</em> and unaffected by depth. It gives the appearance of being
        two-dimensional. </p>

      <h3>Field-of-View</h3>
      <p></p>

      <h3>Frustum</h3>
      <p></p>

      <h3>Near and Far Plane</h3>
      <p></p>

      <h3>Clipping</h3>
      <p></p>

    </main>

    {{> footer}}

  </div> <!-- end column-span -->

  {{> asterisk}}

</div><!-- end id="get-started-page"  -->