---
title: learn
slug: learn/
---

<style>
  .methodsList {
    font-family: monospace;
    /*white-space: pre;*/
  }
</style>

<div id="learn-page">

  {{> sidebar}}

  <div class="column-span">

    <main>
      <script src="//toolness.github.io/p5.js-widget/p5-widget.js"></script>

      {{!-- large title sketch --}}
      <iframe src="{{assets}}/learn/basic3d/titleExample.html" width="720" height="350">
      </iframe>

      <h1>Getting Started with 3D in p5.js</h1>

      <p>If you have been learning p5.js for a while you might have seen some examples on this site using 3D graphics.
        There are some new concepts you will need to learn before creating in 3D, but p5.js can make it a lot easier to
        get started. This document will introduce you to some of the ideas that will make 3D in p5.js easier to
        understand and learn.</p>

      <h2>What is WebGL</h2>

      <p>WebGL is an API that gives us the tools we need to create 3D graphics within a web browser. To put it simply,
        it allows us to do all kinds of 3D math that would be difficult and slow to do ourselves. </p>

      <p>Working in 3D introduces a lot of complexity, especially when you begin adding motion, texture, lighting, and
        more. 3D requires a lot of additional calculations and our computers have special hardware that is particularly
        well suited to performing those calculations, the graphics processing unit (GPU). The reason that the GPU is so
        well suited to 3D graphics is that it can process many things at once, which is important when you are drawing
        many shapes. </p>

      <p>Working with WebGL can be difficult, so p5.js helps us by handling a lot of things in the background. Before we
        can do anything else, we need to set up our canvas to use the p5.js WebGL mode.
      </p>

      <pre><code class="language-javascript">
      function setup() {
        createCanvas(windowWidth, windowHeight, WEBGL);
      }

      function draw(){
        background(255);
        box();
      }
      </code></pre>

      <h2>3D Coordinate Space</h2>

      <p>One of the most fundamental differences between working in 2d and working in 3d is the most obvious: we are
        working with one more dimension. In addition to the horizontal and vertical position (x and y axes) of an
        element in our drawing, 3D adds depth, (the z-axis). </p>

      <p>When you are drawing in 2d, the point (0,0) is located at the top left corner of the screen. In WebGL mode, the
        origin of the sketch (0,0,0) is located in the middle of the screen. By default, the X axis goes left-to-right,
        Y goes up-to-down, and Z goes from further-to-closer.</p>

      <img style="padding:60px;" src='{{assets}}/learn/basic3d/images/2d3d_coordinates.png'
        alt="an illustration showing a 2d coordinate system on the left, showing an origin of (0,0) and a 3d coordinate system on the right, showing an origin of (0,0,0)">

      <h2>Transformations</h2>

      <p>p5.js has a few methods, <a class="code" href="{{root}}/reference/#/p5/translate">translate()</a>, <a
          class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a>, and <a class="code"
          href="{{root}}/reference/#/p5/scale">scale()</a>, that we can use to position and orient objects
        within space. Each of these methods affect what is known as the <em>model matrix</em>. Collectively these are
        known as the <em>transformation</em> of an object. These methods are
        available for
        both 2D and 3D drawing.</p>

      <h3>translate()</h3>

      {{!-- sketch illustrating translation of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/translateExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/translate">translate(x,y,[z])</a> moves our origin point in a
        given direction. Anything drawn after we call translate will be
        positioned relative to that point.</p>

      <pre><code class="language-javascript">
      ...
      // draw a box 100 units to the right
      translate(100,0,0);
      box();
      ..
      </code></pre>

      <h3>rotate()</h3>

      {{!-- sketch illustrating rotation of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/rotateExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/rotate">rotate(angle, [axis])</a> reorients whatever ever is
        drawn after it.</p>

      <p>There are a few methods that we can use to rotate an object in 3d. Most of the time it's easiest to call
        methods like like <a class="code" href="{{root}}/reference/#/p5/rotateX">rotateX(angle)</a>, <a class="code"
          href="{{root}}/reference/#/p5/rotateY">rotateY(angle)</a>, and <a class="code"
          href="{{root}}/reference/#/p5/rotateZ">rotateZ(angle)</a>, which allow you to rotate around a specific axis.
      </p>

      <pre><code class="language-javascript">
      ...
      // rotate each axis by 45 degrees
      rotateX(PI/4);
      rotateY(PI/4);
      rotateZ(PI/4);
      box();
      ..
      </code></pre>

      <p>By default p5.js will want you to supply an angle in radians. Radians use numbers from 0 - 2PI to specify an
        angle. If you want to use degrees, you can either convert degrees to radians using radians(), or you can use
        angleMode(DEGREES).</p>

      <pre><code class="language-javascript">
      ...
      // rotate each axis by 45 degrees
      rotateX(radians(45));
      box();
      //or
      angleMode(DEGREES);
      rotateY(45);
      box();
      ..
      </code></pre>

      <p>You can also use <a class="code" href="{{root}}/reference/#/p5/rotate">rotate(angle, [axis])</a>, which allows
        you to specify which axis you'd like to rotate around using a vector as the second argument.</p>

      <pre><code class="language-javascript">
      ...
      // rotate 90 degrees around the Y axis
      let axis = createVector(0,1,0);
      rotate(PI/2, axis);
      box();
      ..
      </code></pre>

      {{!-- TODO explain Euler angles or maybe note that quaternions exist but not yet in p5.js? --}}

      <h3>scale()</h3>

      {{!-- sketch illustrating scaling of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/scaleExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/scale">scale(x,y,z)</a> multiplies the size of whatever is
        drawn after it. </p>

      <h2>Order</h2>

      <p>Something that can feel unpredictable at first is the order of transformations. Each transformation can affect
        the next one. For example if you call rotate(), followed by translate(), the direction of that translation will
        be affected by the rotation. You can think of it as your entire coordinate system rotating and moving, not just
        the object itself.</p>

      <p>The order that you use will depend on what you’re trying to do, but a good place to start is to follow the
        order of <strong>translate</strong>, <strong>rotate</strong>, and then <strong>scale</strong>. If you perform
        these out of order you might find that your
        transformations don’t act the way that you expect them to.
      </p>

      <p>In the below example, try changing the order of translate and rotate and see how it affects where the object is
        drawn.</p>

      {{!--
      <pre><code class="language-javascript">
      ...
      // 
      translate(100,0,0);
      rotateZ(PI/4);
      scale(2);

      box();
      ...

      ...
      // 
      rotateZ(PI/4);
      translate(100,0,0);
      
      scale(2);

      box();
      ...
      </code></pre> --}}

      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
function setup() {
  createCanvas(150, 216, WEBGL);
  debugMode();
}

function draw(){
  background(255);
  camera(100,-100,100)
  
  translate(25,0,25); 
  rotateY(PI/3);
          
  scale(2);

  box(10);
}
      </script>

      <p>Another tool we have in p5.js is <a class="code" href="{{root}}/reference/#/p5/push">push()</a> and <a
          class="code" href="{{root}}/reference/#/p5/pop">pop()</a>. push() and pop() makes it easier to move objects
        individually. If you don’t use push() and
        pop(), you have to keep track of whatever transformations have already taken place, which can get complicated
        and difficult to follow. push() saves and sets aside our
        current transformations (and certain styling, like stroke() or fill()), which allows you to perform other
        transformations. pop() restores those transformations.
      </p>

      <pre><code class="language-javascript">
      // draw a box 100 units to the right
      translate(100,0,0);
      box();

      // now, to draw another box 100 units to the left
      // since transformations accumulate, we have to
      // subtract 200 to do this
      translate(-200,0,0);
      box();
      </code></pre>

      <p>Now, the same thing with push() and pop(). Now we can just translate the object where we want it, without
        having to remember where our coordinate system lies.</p>

      <pre><code class="language-javascript">
      push(); // detach our coordinate system
      // draw a box 100 units to the right
      translate(100,0,0);
      box();
      pop(); // return to our original coordinate system

      push(); // detach our coordinate system
      // draw a box 100 units to the left
      translate(-100,0,0);
      box();
      pop(); // return to our original coordinate system
      </code></pre>

      <p>While this is a more advanced topic, each of these transformations affect what is called the model matrix. The
        transformation matrix is combined with the view matrix and the projection matrix, both of which help simulate
        the view of a camera, and this combination results in our 3D scene! </p>

      https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection

      <p>In the below example, try removing push() and pop() to see how the transformations affect the second object
        that is drawn. </p>

      {{!-- TODO push and pop example --}}
      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
      function setup() {
        createCanvas(windowWidth, windowHeight, WEBGL);
      }

      function draw(){
        background(255);
        // 
        push(); // detach our coordinate system
        // draw a box 100 units to the right
        translate(100,0,0);
        box();
        pop(); // return to our original coordinate system

        translate(-100,0,0);
        box();    
      }
      </script>

      <h2>3d Primitives</h2>

      <p>So far we have only been using box() but p5.js has seven different predefined geometries that you can use in
        your sketch.</p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/box">box(width, height, depth, detailX, detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/plane">plane(width, height, detailX, detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/sphere">sphere(radius, detailX, detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/ellipsoid">ellipsoid(radiusx, radiusy, radiusz, detailX, detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/cone">cone(radius, height, detailX, detailY, cap)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/cylinder">cylinder(radius, height, detailX, detailY, bottomCap, topCap)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/torus">torus(radius, tubeRadius, detailX, detailY)</a>
        </li>
      </ul>

      <p>You can also load a custom 3d geometry using <a class="code"
          href="{{root}}/reference/#/p5/loadModel">loadModel()</a>.</p>

      {{!-- TODO how should I include a minimal example of how to import geometry from files? --}}

      <h2>Camera and View</h2>

      <p>The camera is an important piece to the 3d scene. In p5.js, the WebGL mode provides us with a perspective
        camera by
        default, but we can change this using perspective() or ortho().</p>

      <p> A perspective camera skews objects so they appear to get smaller as they get further away, vanishing at a
        single point in the distance.This is in contrast to an orthographic camera, where the geometry stays the same
        size as it gets further away and has no vanishing point. </p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/ortho">ortho(left, right, bottom, top, near, far)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/perspective">perspective(fovy, aspect, near, far)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/camera">camera(x, y, z, centerX, centerY, centerZ, upX, upY, upZ)</a></li>
      </ul>

      {{!-- sketch illustrating 3d camera --}}
      <iframe src="{{assets}}/learn/basic3d/cameraExample.html" width="720" height="350">
      </iframe>

      <h2>Lights</h2>

      <p>Lighting is another essential part of a 3d scene. To be able to convey shape and depth in 3d is necessary to
        have a light source. </p>

      <p>In p5 we have: </p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/ambientLight">ambientLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/directionalLight">directionalLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/pointLight">pointLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/spotLight">spotLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/noLights">noLights()</a></li>
      </ul>

      <p>Ambient light makes everything display a little brighter, with no consideration for light position or
        direction. A directional light on the other hand can be moved and rotated to shine directly on a geometry. The
        spot light is similar, but casts light evenly within a cone shape. Finally, noLights can be used when you want
        everything to be a solid color or texture, unaffected by lights. </p>

      {{!-- sketch illustrating lighting of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/lightingExample.html" width="720" height="350">
      </iframe>

      <h2>Materials and Textures</h2>
      <p>3d is not all about geometry, objects can appear differently based on their material. Materials dictate how
        light interacts with the geometry and how color (or texture) gets applied to the object. Materials can be really
        flexible and each can have unique properties. </p>

      <p>In p5 we have </p>

      <ul>

        <li><a class="code" href="{{root}}/reference/#/p5/normalMaterial">normalMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/ambientMaterial">ambientMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/emissiveMaterial">emissiveMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/specularMaterial">specularMaterial()</a></li>

      </ul>

      <p>You can even draw to another image and apply it as a texture to the object. </p>

      <p>and more custom materials can be achieved through texture() and shaders, which will be discussed more at length
        later. </p>

      {{!-- sketch illustrating materials --}}
      <iframe src="{{assets}}/learn/basic3d/materialsExample.html" width="720" height="350">
      </iframe>

      <h2>Glossary</h2>

      <h3>World Space</h3>
      <p>A coordinate space that is relative to the world origin (0,0,0)</p>

      <h3>Screen Space</h3>
      <p>A coordinate space that is relative to the top left of the screen (0,0)</p>

      <h3>Model</h3>
      <p>A custom 3D geometry that can be saved and loaded from a file</p>

      <h3>Matrix</h3>
      <p>A special array that can hold information about the transformation of a geometry.</p>

      <h3>Camera</h3>
      <p>The viewpoint of a 3D scene</p>

      <h3>Transform</h3>
      <p>The combined scale, rotation, and translation of a geometry.</p>

      <h3>Vertex</h3>
      <p>A point in space</p>

      <h3>Face</h3>
      <p>A collection of three points that create a solid surface</p>

    </main>

    {{> footer}}

  </div> <!-- end column-span -->

  {{> asterisk}}

</div><!-- end id="get-started-page"  -->