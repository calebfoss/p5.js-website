---
title: learn
slug: learn/
---

<style>
  .methodsList {
    font-family: monospace;
    /*white-space: pre;*/
  }

  .additionalInformation {
    width: 100%;
    background-color: #dedeff;
    font-size: 15px;
    padding: 10px;
    margin: 30px 0;
  }

  .toc {
    width: 100%;
    background-color: #eee;
    font-size: 15px;
    padding: 10px;
    margin: 30px 0;
  }

  .toc h3 {
    margin-top: 15px;
  }
</style>

<div id="learn-page">

  {{> sidebar}}

  <div class="column-span">

    <main>
      <script src="//toolness.github.io/p5.js-widget/p5-widget.js"></script>

      {{!-- large title sketch --}}
      <iframe src="{{assets}}/learn/basic3D/titleExample.html" width="720" height="350">
      </iframe>

      <h1>Getting Started with 3D in p5.js</h1>

      <p>p5.js is a powerful tool for creating 2D graphics but it's also capable of 3D graphics.
        Before we can get started in 3D there are some new concepts to learn and this document will introduce some ideas
        that will be important to any 3D sketch.</p>

      <div class="toc">
        <h3>Table of Contents</h3>
        <ol>
          <li><a href="#what_is_webgl">What is WebGL</a></li>
          <li><a href="#coordinate_space">3D Coordinate Space</a></li>
          <li><a href="#transformations">Transformations</a></li>
          <li><a href="#order">Order</a></li>
          <li><a href="#basic_shapes">Basic Shapes in 3D</a></li>
          <li><a href="#camera">Camera and View</a></li>
          <li><a href="#lighting">Lighting</a></li>
          <li><a href="#materials">Materials and Textures</a></li>
          <li><a href="#glossary">Glossary</a></li>
        </ol>
      </div>

      <h2 id="what_is_webgl">What is WebGL</h2>

      <p>WebGL is an API that gives us the tools we need to create 3D graphics within a web browser. To put it simply,
        it allows us to do all kinds of math that help arrange and display objects in 3D. p5.js makes it easier to work
        with WebGL
        through its special WebGL mode.</p>

      <p>Working in 3D introduces a lot of complexity, especially when a sketch involves motion, texture, lighting, and
        more.

        Luckily for us computers have special hardware that is particularly
        well suited to performing those calculations, the graphics processing unit (GPU). The GPU is capable of
        processing many
        things simultaneously, which is especially important when we're dealing with pixels and many shapes in space.
      </p>

      <p>
        Let's get started by setting up the p5.js canvas to use WebGL mode.
      </p>

      <pre><code class="language-javascript">
      function setup() {
        createCanvas(windowWidth, windowHeight, WEBGL);
      }

      function draw(){
        background(255);
        box();
      }
      </code></pre>

      <h2 id="coordinate_space">3D Coordinate Space: Positioning in 3D</h2>

      <div class="additionalInformation">
        If coordinates systems aren't making sense it might be helpful to revisit the tutorial titled
        <a href="{{root}}/learn/coordinate-system-and-shapes.html">Coordinate System and Shapes</a>
      </div>

      <p>One of the most fundamental differences between working in 2D and working in 3D is the most obvious: there is
        one more dimension to work with. In addition to the horizontal and vertical position (x and y axes) of an
        element in our drawing, 3D adds depth, (the z-axis). </p>

      <p>When drawing in 2D, the point (0,0) is located at the top left corner of the screen. In WebGL mode, the
        origin of the sketch (0,0,0) is located in the middle of the screen. By default, the x-axis goes left-to-right,
        y-axis goes up-to-down, and the z-axis goes from further-to-closer.</p>

      <img style="padding:60px;" src='{{assets}}/learn/basic3D/images/2d3d_coordinates.png'
        alt="an illustration showing a 2D coordinate system on the left, showing an origin of (0,0) and a 3D coordinate system on the right, showing an origin of (0,0,0)">

      <h2 id="transformations">Transformations: Position and Size of 3D Shapes</h2>

      <p>p5.js has a few methods, <a class="code" href="{{root}}/reference/#/p5/translate">translate()</a>, <a
          class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a>, and <a class="code"
          href="{{root}}/reference/#/p5/scale">scale()</a>, that we can use to position and orient objects
        within space. Each of these methods affect what is known as the <em>model matrix</em>. Collectively these are
        known as the <em>transformation</em> of an object. These methods are
        available for
        both 2D and 3D drawing.</p>

      <h3>translate(): Moving Objects in Space</h3>

      {{!-- sketch illustrating translation of geometry --}}
      <iframe src="{{assets}}/learn/basic3D/translateExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/translate">translate()</a> moves our origin point in a
        given direction. Anything drawn after we call translate will be
        positioned relative to that point. <a class="code">translate()</a> accepts arguments for x, y, and z
        values.</p>

      <pre><code class="language-javascript">
      ...
      // draw a box 100 units to the right
      translate(100,0,0);
      box();
      ..
      </code></pre>

      <h3>rotate(): Orienting Objects in Space</h3>

      {{!-- sketch illustrating rotation of geometry --}}
      <iframe src="{{assets}}/learn/basic3D/rotateExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a> reorients whatever is
        drawn after it.</p>

      <p>There are a few methods that can be used to rotate an object in 3D. Most of the time it's easiest to call
        methods like like <a class="code" href="{{root}}/reference/#/p5/rotateX">rotateX()</a>, <a class="code"
          href="{{root}}/reference/#/p5/rotateY">rotateY()</a>, and <a class="code"
          href="{{root}}/reference/#/p5/rotateZ">rotateZ()</a>, which allows for rotation around a specific axis.
        Each of these methods accept a single argument specifying the angle of rotation.
      </p>

      <pre><code class="language-javascript">
      ...
      // rotate X, Y, and Z axes by 45 degrees
      rotateX(QUARTER_PI);
      rotateY(QUARTER_PI);
      rotateZ(QUARTER_PI);
      box();
      ..
      </code></pre>

      <p>By default p5.js will expect angles to be in radians. Radians use numbers from 0 - TWO_PI to specify an
        angle. To use degrees, either convert degrees to radians using <a class="code">radians()</a>, or use
        <a class="code">angleMode(DEGREES)</a>.
      </p>

      <pre><code class="language-javascript">
      ...
      // rotate each axis by 45 degrees
      rotateX(radians(45));
      box();
      //or
      angleMode(DEGREES);
      rotateY(45);
      box();
      ..
      </code></pre>

      <p>You can also use <a class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a>, which allows
        you to specify which axis you'd like to rotate around using a vector as the second argument.</p>

      <pre><code class="language-javascript">
      ...
      // rotate 90 degrees around the y-axis
      let axis = createVector(0,1,0);
      rotate(HALF_PI, axis);
      box();
      ..
      </code></pre>

      <div class="additionalInformation">
        There's a lot more to rotation in 3d space. Check out this resource if you'd like to learn more about
        transformation and rotation in 3D:
        TODO: FIND LINK TO A RELIABLE RESOURCE
      </div>

      <h3>scale(): Size in Space</h3>

      {{!-- sketch illustrating scaling of geometry --}}
      <iframe src="{{assets}}/learn/basic3D/scaleExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/scale">scale()</a> changes the size of whatever is
        drawn after it. </p>

      <h2 id="order">Order</h2>

      <p>Something that can feel unpredictable at first is the order of transformations. Each transformation can affect
        the next one. For example if you call rotate(), followed by translate(), the direction of that translation will
        be affected by the rotation. You can think of it as your entire coordinate system rotating and moving, not just
        the object itself.</p>

      <p>The order that you use will depend on what you’re trying to do, but a good place to start is to follow the
        order of <strong>translate</strong>, <strong>rotate</strong>, and then <strong>scale</strong>. If you perform
        these out of order you might find that your
        transformations don’t act the way that you expect them to.
      </p>

      <p>In the below example, try changing the order of <a class="code">translate()</a> and <a
          class="code">rotateY()</a> and see how it affects where the object is
        drawn.</p>

      {{!--
      <pre><code class="language-javascript">
      ...
      // 
      translate(100,0,0);
      rotateZ(QUARTER_PI);
      scale(2);

      box();
      ...

      ...
      // 
      rotateZ(QUARTER_PI);
      translate(100,0,0);
      
      scale(2);

      box();
      ...
      </code></pre> --}}

      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
function setup() {
  createCanvas(150, 216, WEBGL);
  debugMode();
}

function draw(){
  background(255);
  camera(100,-100,100)
  
  translate(25,0,25); 
  rotateY(PI/3);
          
  scale(2);

  box(10);
}
      </script>

      <p>Another tool we have in p5.js is <a class="code" href="{{root}}/reference/#/p5/push">push()</a> and <a
          class="code" href="{{root}}/reference/#/p5/pop">pop()</a>. <a class="code">push()</a> and <a
          class="code">pop()</a> makes it easier to move objects
        individually. <a class="code">push()</a> saves and sets aside our
        current transformations (and certain styling, like <a class="code">stroke()</a> or <a class="code">fill()</a>),
        which allows you to perform other
        transformations. <a class="code">pop()</a> restores those transformations. If you don’t use <a
          class="code">push()</a> and
        <a class="code">pop()</a>, you have to keep track of whatever transformations have already taken place, which
        can get complicated
        and difficult to follow.
      </p>

      <pre><code class="language-javascript">
      // draw a box 100 units to the right
      translate(100,0,0);
      box();

      // now, to draw another box 100 units to the left
      // since transformations accumulate, we have to
      // subtract 200 to do this
      translate(-200,0,0);
      box();
      </code></pre>

      <p>Now, let's try the same code with <a class="code">push()</a> and <a class="code">pop()</a>. Now we can just
        translate the object where we want it, without
        having to remember where our coordinate system lies.</p>

      <pre><code class="language-javascript">
      push(); // detach our coordinate system
      // draw a box 100 units to the right
      translate(100,0,0);
      box();
      pop(); // return to our original coordinate system

      push(); // detach our coordinate system
      // draw a box 100 units to the left
      translate(-100,0,0);
      box();
      pop(); // return to our original coordinate system
      </code></pre>

      <div class="additionalInformation">
        <p>While this is a more advanced topic, each of these transformations affect what is called the model matrix.
          The
          transformation matrix is combined with the view matrix and the projection matrix, both of which help simulate
          the view of a camera, and this combination results in our 3D scene! </p>
        <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">
          https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection
        </a>
      </div>

      <p>In the below example, try removing <a class="code">push()</a> and <a class="code">pop()</a> to see how the
        transformations affect the second object
        that is drawn. </p>

      {{!-- TODO push and pop example --}}
      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">
      function setup() {
        createCanvas(windowWidth, windowHeight, WEBGL);
      }

      function draw(){
        background(255);
        // 
        push(); // detach our coordinate system
        // draw a box 100 units to the right
        translate(100,0,0);
        box();
        pop(); // return to our original coordinate system

        translate(-100,0,0);
        box();    
      }
      </script>

      {{!-- <h2>3D Primitives: Basic Shapes</h2> --}}
      <h2 id="basic_shapes">Basic Shapes in 3D</h2>

      <p>So far we have only been using <a class="code">box()</a> but p5.js has seven different predefined geometries
        that you can use in
        your sketch. These basic predefined geometries are often referred to as 'primitives'. <a
          href="{{root}}/examples/3d-geometries.html">Click here</a> to view an example showing off each
        of these types.</p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/box">box(width, height, depth, detailX, detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/plane">plane(width, height, detailX, detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/sphere">sphere(radius, detailX, detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/ellipsoid">ellipsoid(radiusx, radiusy, radiusz, detailX,
            detailY)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/cone">cone(radius, height, detailX, detailY, cap)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/cylinder">cylinder(radius, height, detailX, detailY,
            bottomCap, topCap)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/torus">torus(radius, tubeRadius, detailX, detailY)</a>
        </li>
      </ul>

      <p>It is also possible to create custom geometry, either from scratch or from 3D models created in another
        program.
        More information about custom geometry can be found the <a href="{{root}}/learn/custom-geometry.html">Custom
          Geometry tutorial</a>.
      </p>

      {{!-- TODO create a separate tutorial and link to it from here --}}

      <h2 id="camera">Camera and View</h2>

      <p>The camera is an important piece to the 3D scene; it gives us the sense of space and dimension that we are
        often looking for in 3D. In p5.js, the WebGL mode provides us with a perspective camera by default, but we can
        change this using <a class="code">perspective()</a> or <a class="code">ortho()</a>.</p>

      <img style="padding:60px;" src='{{assets}}/learn/basic3D/images/cameraTypeIllustration.png'
        alt="an illustration showing the difference between perspective and orthographic camera types">

      <p>A perspective camera skews objects so they appear to get smaller as they get further away, vanishing at a
        single point in the distance.This is in contrast to an orthographic camera, where the geometry stays the same
        size as it gets further away and has no vanishing point. </p>

      <p>Constantly moving and adjusting the camera in code can be tedious, especially when you are experimenting with
        ideas. p5.js has a special camera method, <a class="code">orbitControl()</a>, that can be used to zoom, pan,
        and position the camera using the mouse.</p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/ortho">ortho(left, right, bottom, top, near, far)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/perspective">perspective(fovy, aspect, near, far)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/camera">camera(x, y, z, centerX, centerY, centerZ, upX, upY,
            upZ)</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/orbitControl">orbitControl(sensitivityX, sensitivityY,
            sensitivityZ)</a></li>
      </ul>

      {{!-- sketch illustrating 3D camera --}}
      <iframe src="{{assets}}/learn/basic3D/cameraExample.html" width="720" height="350">
      </iframe>

      <h2 id="lighting">Lighting</h2>

      <p>Lighting is another essential part of a 3D scene. To be able to convey shape and depth in 3D is necessary to
        have a light source. </p>

      <p>In p5 we have: </p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/ambientLight">ambientLight()</a>
          <ul style="margin-left:15px;">
            <li>Ambient light makes everything display a little brighter, with no consideration for light position or
              direction.</li>
          </ul>
        </li>
        <li><a class="code" href="{{root}}/reference/#/p5/directionalLight">directionalLight()</a>
          <ul style="margin-left:15px;">
            <li>A directional light shines from one direction, which can be especially useful for communicating depth in
              a scene, or when a scene needs a 'sun' light. This method accepts a color and direction.</li>
          </ul>
        </li>
        <li><a class="code" href="{{root}}/reference/#/p5/pointLight">pointLight()</a>
          <ul style="margin-left:15px;">
            <li>A point light emits from a single point in all directions, similar to something like a lightbulb. This method accepts a color and a position for the light.</li>
          </ul>
        </li>
        <li><a class="code" href="{{root}}/reference/#/p5/spotLight">spotLight()</a>
          <ul style="margin-left:15px;">
            <li>A spot light emits from a single point in a single direction. This light is cast in a conical shape and it's radius and concentration can be adjusted.</li>
          </ul>
        </li>
        <li><a class="code" href="{{root}}/reference/#/p5/noLights">noLights()</a>
          <ul style="margin-left:15px;">
            <li>noLights() makes it so that all subsequent geometry is rendered without any lighting. This can be useful when you want flat, unshaded geometry.</li>
          </ul>
        </li>
      </ul>
      <br />

      {{!-- sketch illustrating lighting of geometry --}}
      <iframe src="{{assets}}/learn/basic3D/lightingExample.html" width="720" height="350">
      </iframe>

      <h2 id="materials">Materials and Textures</h2>
      <p>3D is not all about geometry, objects can appear differently based on their material. Materials dictate how
        light interacts with the geometry and how color (or texture) gets applied to the object. Materials can be really
        flexible and each can have unique properties. </p>

      <p>In p5 we have </p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/normalMaterial">normalMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/ambientMaterial">ambientMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/emissiveMaterial">emissiveMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/specularMaterial">specularMaterial()</a></li>
      </ul>

      <p>More custom materials can be achieved through using <a class="code">texture()</a> and shaders. These are a bit
        beyond the scope of this tutorial, so make sure to check out the <a
          href="{{root}}/learn/introduction-to-shaders.html">Introduction to Shaders</a> page when you are ready. </p>

      {{!-- sketch illustrating materials --}}
      {{!-- <iframe src="{{assets}}/learn/basic3D/materialsExample.html" width="720" height="350">
      </iframe> --}}

      <h2 id="glossary">Glossary</h2>

      {{!-- <h3>World Space</h3>
      <p>A coordinate space that is relative to the world origin (0,0,0)</p>

      <h3>Screen Space</h3>
      <p>A coordinate space that is relative to the top left of the screen (0,0)</p> --}}

      <h3>Model</h3>
      <p>A custom 3D geometry that can be saved and loaded from a file</p>

      <h3>Matrix</h3>
      <p>A special array that can hold information about the transformation of a geometry.</p>

      <h3>Camera</h3>
      <p>The viewpoint of a 3D scene</p>

      <h3>Transform</h3>
      <p>The combined scale, rotation, and translation of a geometry.</p>

      <h3>Vertex</h3>
      <p>A point in space</p>

      <h3>Face</h3>
      <p>A collection of three points that create a solid surface</p>

    </main>

    {{> footer}}

  </div> <!-- end column-span -->

  {{> asterisk}}

</div><!-- end id="get-started-page"  -->