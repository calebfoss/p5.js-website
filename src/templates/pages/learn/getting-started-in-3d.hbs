---
title: learn
slug: learn/
---

<style>
  .methodsList {
    font-family: monospace;
    /*white-space: pre;*/
  }
</style>

<div id="learn-page">

  {{> sidebar}}

  <div class="column-span">

    <main>
      <script src="//toolness.github.io/p5.js-widget/p5-widget.js"></script>

      {{!-- large title sketch --}}
      <iframe src="{{assets}}/learn/basic3d/titleExample.html" width="720" height="350">
      </iframe>

      <h1>Getting Started with 3D in p5.js</h1>

      <p>If you have been learning p5.js for a while you might have seen some examples on this site using 3D graphics.
        There are some new concepts you will need to learn before creating in 3D, but p5.js can make it a lot easier to
        get started. This document will introduce you to some of the ideas that will make 3D in p5.js easier to
        understand and learn.</p>

      <h2>What is WebGL</h2>

      <p>WebGL is an API that gives us the tools we need to create 3D graphics within a web browser. To put it simply,
        it allows us to do all kinds of 3D math that would be difficult and slow to do ourselves. </p>

      <p>Working in 3D introduces a lot of complexity, especially when you begin adding motion, texture, lighting, and
        more. 3D requires a lot of additional calculations and our computers have special hardware that is particularly
        well suited to performing those calculations, the graphics processing unit (GPU). The reason that the GPU is so
        well suited to 3D graphics is that it can process many things at once, which is important when you are drawing
        many shapes. </p>

      <p>Working with WebGL can be difficult, so p5.js helps us by handling a lot of things in the background. </p>

      <p>Before we can do anything else, we need to set up our canvas to use the p5.js WebGL mode. This will give us
        access
        to some new methods and tools that will help us with the challenges that come with 3D.
      </p>

      <pre><code class="language-javascript">
      function setup() {
        createCanvas(windowWidth, windowHeight, WEBGL);
      }

      function draw(){
        background(255);
        box();
      }
      </code></pre>

      <h2>What is 3D? Coordinate spaces</h2>

      <p>One of the most fundamental differences between working in 2d and working in 3d is the most obvious: we are
        working with one more dimension. In addition to the horizontal and vertical position (x and y axes) of an
        element in our drawing, 3D adds depth, (the z-axis). </p>

      {{!-- sketch illustrating coordinate space --}}
      {{!-- <iframe src="{{assets}}/learn/basic3d/transformExample.html" width="720" height="350">
      </iframe> --}}

      <p>When you are drawing in 2d, the point (0,0) is located at the top left corner of the screen. In WebGL mode, the
        origin of the sketch (0,0,0) is located in the middle of the screen. By default, the X axis goes left-to-right,
        Y goes up-to-down, and Z goes from further-to-closer.</p>

      <h2>Transformations</h2>

      <p>p5.js has a few methods, translate(), rotate(), and scale(), that we can use to position and orient objects
        within space. Collectively these are known as the <em>transformation</em> of an object. These methods are
        available for
        both 2D and 3D drawing.</p>

      <h3>translate()</h3>

      {{!-- sketch illustrating translation of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/translateExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/translate">translate(x,y,[z])</a> moves our origin point in a
        given direction. Anything drawn after we call translate will be
        positioned relative to that point.</p>

      <h3>rotate()</h3>

      {{!-- sketch illustrating rotation of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/rotateExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/rotate">rotate(angle, [axis])</a> reorients whatever ever is
        drawn after it.</p>

      <p>When given one argument it rotates around the Z-axis, but you can rotate
        in any direction by passing a vector as the second argument. Methods like <a class="code"
          href="{{root}}/reference/#/p5/rotateX">rotateX(angle)</a>, <a class="code"
          href="{{root}}/reference/#/p5/rotateY">rotateY(angle)</a>, and <a class="code"
          href="{{root}}/reference/#/p5/rotateZ">rotateZ(angle)</a> apply an angle to the
        specific axis, but each can be called in combination. </p>

      <h3>scale()</h3>

      {{!-- sketch illustrating scaling of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/scaleExample.html" width="720" height="350">
      </iframe>

      <p><a class="code" href="{{root}}/reference/#/p5/scale">scale(x,y,z)</a> multiplies the size of whatever is
        drawn after it. </p>

      <h2>Order</h2>

      <p>One thing that might feel a little different than working in 2d is that our 3d sketch has a camera. The camera
        is a 3d object of its own, with rotation and position that can affect the way that we see the geometry in our
        scene. When we move our object, keep in mind that rotate and translate operate independently from the position
        of your camera. These transformations happen in world space, relative to the world origin.</p>

      <p>Something that can feel unpredictable at first is the order of transformations. In general, the order that you
        want to perform transformations is scale, rotation, then translation. If you perform these out of order it can
        be a little more difficult to control. Each of these transformations can have an effect on each other, and this
        order makes it much more intuitive. </p>

      <p>When you call scale, rotate, or translate, each of these calls will affect any objects that are drawn after. If
        you want to move things independently, without having to account for prior transformations, you can use the
        methods push() and pop(). The combination of these two methods allow you to "detach" the current coordinate
        space, which you can then transform, and with pop() you can return to the original coordinate space. </p>

      <p>In the below example, try removing push() and pop() to see how the transformations affect the second object
        that is drawn. </p>

      {{!-- TODO push and pop example --}}
      <script type="text/p5" data-autoplay data-p5-version="{{ version }}">

      </script>

      <h2>Camera and View</h2>

      <p>The camera is an important piece to the 3d scene. In p5.js, the WebGL mode uses a perspective camera by
        default, meaning that as the view of the camera extends into the distance, geometry appears smaller. This is in
        contrast to an orthographic camera, where the geometry stays the same size as it gets further away, it has no
        vanishing point. </p>

      {{!-- sketch illustrating 3d camera --}}
      <iframe src="{{assets}}/learn/basic3d/cameraExample.html" width="720" height="350">
      </iframe>

      {{!-- <h2>Vertices and Faces</h2>

      <p>3d geometry is ultimately a collection of points, called vertices, that are connected into faces. </p>

      <p>In many 3d environments there is a collection of 3d primitives, simple built-in objects like boxes, spheres,
        torus', etc. </p>

      <p>It is certainly possible to create your own custom geometry, vertex but vertex, but that is outside of the
        scope of this article. </p>

      <p>Another common method for working with custom geometry in WebGL is to use a 3d model exported from software
        like Blender (for p5.js, an obj or stl file).</p> --}}

      <h2>Lights</h2>

      <p>Lighting is another essential part of a 3d scene. To be able to convey shape and depth in 3d is necessary to
        have a light source. </p>

      <p>In p5 we have: </p>

      <ul>
        <li><a class="code" href="{{root}}/reference/#/p5/ambientLight">ambientLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/directionalLight">directionalLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/pointLight">pointLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/spotLight">spotLight()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/noLights">noLights()</a></li>
      </ul>

      <p>Ambient light makes everything display a little brighter, with no consideration for light position or
        direction. A directional light on the other hand can be moved and rotated to shine directly on a geometry. The
        spot light is similar, but casts light evenly within a cone shape. Finally, noLights can be used when you want
        everything to be a solid color or texture, unaffected by lights. </p>

      {{!-- sketch illustrating lighting of geometry --}}
      <iframe src="{{assets}}/learn/basic3d/lightingExample.html" width="720" height="350">
      </iframe>

      <h2>Materials and Textures</h2>
      <p>3d is not all about geometry, objects can appear differently based on their material. Materials dictate how
        light interacts with the geometry and how color (or texture) gets applied to the object. Materials can be really
        flexible and each can have unique properties. </p>

      <p>In p5 we have </p>

      <ul>

        <li><a class="code" href="{{root}}/reference/#/p5/normalMaterial">normalMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/ambientMaterial">ambientMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/emissiveMaterial">emissiveMaterial()</a></li>
        <li><a class="code" href="{{root}}/reference/#/p5/specularMaterial">specularMaterial()</a></li>

      </ul>

      {{!-- sketch illustrating materials --}}
      <iframe src="{{assets}}/learn/basic3d/materialsExample.html" width="720" height="350">
      </iframe>

      <p>You can even draw to another image and apply it as a texture to the object. </p>

      <p>and more custom materials can be achieved through texture() and shaders, which will be discussed more at length
        later. </p>

      <h2>Glossary</h2>

      <h3>World Space</h3>
      <p>A coordinate space that is relative to the world origin (0,0,0)</p>

      <h3>Screen Space</h3>
      <p>A coordinate space that is relative to the top left of the screen (0,0)</p>

      <h3>Model</h3>
      <p>A custom 3D geometry that can be saved and loaded from a file</p>

      <h3>Matrix</h3>
      <p>A special array that can hold information about the transformation of a geometry.</p>

      <h3>Camera</h3>
      <p>The viewpoint of a 3D scene</p>

      <h3>Transform</h3>
      <p>The combined scale, rotation, and translation of a geometry.</p>

      <h3>Vertex</h3>
      <p>A point in space</p>

      <h3>Face</h3>
      <p>A collection of three points that create a solid surface</p>

    </main>

    {{> footer}}

  </div> <!-- end column-span -->

  {{> asterisk}}

</div><!-- end id="get-started-page"  -->