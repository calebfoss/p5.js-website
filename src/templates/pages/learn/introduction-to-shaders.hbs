---
title: learn
slug: learn/
---

<div id="learn-page">

  {{> sidebar}}

  <div class="column-span">

    <main>
      <script src="//toolness.github.io/p5.js-widget/p5-widget.js"></script>

      {{!-- large title sketch --}}
      <iframe src="{{assets}}/learn/shaderIntro/titleExample.html" width="720" height="350">
      </iframe>

      <h1>Introduction to Shaders</h1>

      <p>Shaders are special programs that run on the GPU that can do some incredible things. They take advantage of the
        GPU
        to process many pixels at once, making them fast and particularly well suited for certain tasks, like generating
        noise,
        applying filters like blur, or shading polygons. Shader programming can feel daunting at first, it requires a
        different
        approach than the 2d drawing of p5.js and it can often involve more advanced math. Shaders don't need to be
        complicated!
        This document will try to outline the basics of shader programming and point you towards other resources.</p>

      <h2>Setup</h2>

      <p>p5.js is a great tool for working with shaders because it handles a lot of the WebGL for you so you can focus
        on
        the shader code itself. Before we can get started with shaders we have to set up our canvas so that it uses
        p5.js
        WebGL model.</p>

      <pre><code class="language-javascript">
      ...
      function setup() {
        createCanvas(windowWidth, windowHeight, WEBGL);
      }
      ..
      </code></pre>

      <p>A shader program consists of two parts, a <strong>vertex shader</strong> and a <strong>fragment
          shader</strong>. The vertex shader affects where
        the 3D geometry is drawn on the screen and the fragment shader is responsible for affecting the color output.
        Each of these will live in separate
        files and will be loaded into p5.js using loadShader(). Once a shader is loaded it can be used within draw().
        The following example will show how
        to set up a basic shader within p5.js:
      </p>

      <pre><code class="language-javascript">
      let myShader;
    
      function preload() {
        // load each shader file (don't worry, we will come back to these!) 
        myShader = loadShader('shader.vert', 'shader.frag');
      }

      function setup() {
        // the canvas has to be created with WEBGL mode
        createCanvas(windowWidth, windowHeight, WEBGL);
      }

      function draw() {
        // shader() sets the active shader, which will be applied to what is drawn next
        shader(myShader);
        // apply the shader to a rectangle taking up the full canvas
        rect(0,0,width,height);
      }
      </code></pre>

      <p>So now you might be wondering what we actually write in these shader files! Shader files are written in a
        different language and have a very difference syntax and structure than we are familiar with. First let's
        look at a basic vertex shader:</p>

      <pre><code class="language-javascript">
      // shader.vert
      // this is an attribute sent to the shader by p5  
      // it contains all of our vertex position information 
      // it is a vec3, meaning it contains x, y, and z data 
      // attribute signals that this is a global variable sent by the sketch 
      // it is read only, meaning it cannot be changed directly (you can copy it though) 
      // attributes exist in vertex shaders only 

      /*
        an attribute is used to communicate certain information about the vertices being processed.
        p5.js handles most of these attributes for you, you just need to define it here

        vec3 is the type of data, in this case a vector of three numbers (x,y,z)
      */
      attribute vec3 aPosition; 

      /*
        all vertex shaders need a main() function. this function needs to have a value assigned
        to gl_Position

        'void' means that this function doesn't return anything
      */
      void main() {           
        // copy the position data into a vec4, using 1.0 as the w component 
        vec4 positionVec4 = vec4(aPosition, 1.0); 

        // scale the rect by two, and move it to the center of the screen 
        // if we don't do this, it will appear with its bottom left corner in the center of the sketch 
        // try commenting this line out to see what happens 
        positionVec4.xy = positionVec4.xy * 2.0 - 1.0; 

        // send the vertex information on to the fragment shader 
        gl_Position = positionVec4; 
      }
      </code></pre>

      <p>Don't worry if this doesn't make a ton of sense yet. The vertex shader plays an important role but it is often just responsible for making sure what we create in
        our
        fragment shader displays properly on the geometry. You'll probably find yourself reusing the same vertex shaders
        in many of your projects.</p>

      <p>The fragment shader is responsible for the color output of our shader and is where will do a lot of our shader programming.</p>

      <pre><code class="language-javascript">
      /* 
        the fragment shader begins with a line specifying the float 'precision'.
        this value you can either be lowp, mediump, or highp, although you will likely 
        use mediump, or highp in certain situations
      */
      precision mediump float; 

      /*
        the fragment shader has to have a main() function, where you will do most of your
        programming. main() is responsible for setting the color of the current pixel, by
        assigning a vec4 (r,g,b,a) to the built-in gl_FragColor.
      */
      void main() { 

        // this vector is just the color red
        vec4 myColor = vec4(1.0, 0.0, 0.0, 1.0);

        // and now this color is to the current pixel
        gl_FragColor = myColor; 
      }
      </code></pre>

      <p>A few other things that you should know about the syntax of these shader files. First of all, the shading language
        requires you to specify a <em>type</em> of data you are storing in a variable. Here is a list of the common types
        
      </p>

      <pre><code class="language-javascript">
        vec2(x,y)     // a vector of two floats
        vec3(r,g,b)   // a vector of three floats
        vec4(r,g,b,a) // a vector of four floats
        float         // a number with decimal points
        int           // a whole number without decimal points
        sampler2D     // a reference to a texture
      </code></pre>

      <p>
        The shading language is much more strict than JavaScript. A missing semicolon for example is not allowed and will
        result in an error message. 
      </p>

      {{!-- <p>Shaders are separate programs that run on the graphics card, and as a result, they have a very different
        syntax
        and structure than what we are familiar with in p5.js. They are written in a shader language, which has a syntax
        similar to the programming language, C. They are also programs that run on a single pixel, and as a result, they
        sometimes require you to think a little bit differently. </p> --}}

      {{!-- https://itp-xstory.github.io/p5js-shaders/#/ --}}
      {{!-- https://github.com/aferriss/p5jsShaderExamples/blob/gh-pages/1_basics/1-1_red/basic.vert --}}
      {{!-- https://github.com/aferriss/p5jsShaderExamples/blob/gh-pages/1_basics/1-1_red/basic.frag --}}

      <h2>Glossary </h2>
      <h3>Shader</h3>
      <p>A special graphics card program that can efficiently produce many visual effects and filters. </p>
      <h3>Uniform</h3>
      <p>A variable that is passed from your sketch to a shader</p>

    </main>

    {{> footer}}

  </div> <!-- end column-span -->

  {{> asterisk}}

</div><!-- end id="get-started-page"  -->