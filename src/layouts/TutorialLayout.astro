---
import BaseLayout from "@layouts/BaseLayout.astro";
import TutorialWrapper from "@components/TutorialWrapper/index.astro";
import { getCurrentLocale, getUiTranslator } from "../i18n/utils";
import { setJumpToState, type JumpToLink } from "../globals/state";
import FreeRatioImage from "@components/Image/FreeRatioImage.astro";
import CodeContainerWithCopy from "../components/CodeContainer/CodeContainerWithCopy.astro";
import CodeBlockWrapper from "@components/CodeBlockWrapper/index.astro";
import type { MarkdownHeading } from "astro";

const { entry, relatedEntries } = Astro.props;
const { Content, components, headings } = await entry.render();

const currentLocale = getCurrentLocale(Astro.url.pathname);
const t = await getUiTranslator(currentLocale);

const jumpToLinks = [
  {
    label: entry.data.category,
    url: `/tutorials#${entry.data.category}`,
    current: true,
  },
] as JumpToLink[];

const currentTutorialHeadings = headings
  .filter((heading: MarkdownHeading) => heading.depth <= 2)
  .map((heading: MarkdownHeading) => ({
    label: heading.text,
    url: `#${heading.slug}`,
    size: "small",
  }));

jumpToLinks.push(...currentTutorialHeadings);

for (const relEntry of relatedEntries) {
  jumpToLinks.push({
    label: relEntry.data.title,
    url: `/tutorials/${relEntry.slug}`,
  });
}

const jumpToState = {
  title: t("Tutorials"),
  links: jumpToLinks,
};

setJumpToState(jumpToState);
---

<BaseLayout title={entry.data.title} variant="item">
  {entry.data.authors && <h6>By {entry.data.authors.join(", ")}</h6>}
  {entry.data.authorsNote && <h7>{entry.data.authorsNote}</h7>}
  <TutorialWrapper>
    <Content
      components={{
        ...components,
        img: FreeRatioImage,
        pre: CodeBlockWrapper,
      }}
    />
  </TutorialWrapper>

  <h2>Related examples</h2>
  <ul>
    {/* revise when schema for examples exists */}
    {entry.data.relatedContent?.examples?.map((relEx: any) => <li>{relEx}</li>)}
  </ul>

  <h2>Related references</h2>
  <ul>
    {/* revise when schema for reference exists */}
    {
      entry.data.relatedContent?.references?.map((relRef: any) => (
        <li>{relRef}</li>
      ))
    }
  </ul>
</BaseLayout>
