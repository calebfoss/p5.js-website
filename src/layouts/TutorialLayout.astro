---
import BaseLayout from "@layouts/BaseLayout.astro";
import TutorialWrapper from "@components/TutorialWrapper/index.astro";
import { getCurrentLocale, getUiTranslator } from "../i18n/utils";
import { setJumpToState, type JumpToLink } from "../globals/state";
import FreeRatioImage from "@components/Image/FreeRatioImage.astro";
import CodeBlockWrapper from "@components/CodeBlockWrapper/index.astro";
import RelatedItems from "@components/RelatedItems/index.astro";
import type { MarkdownHeading } from "astro";
import { getRelatedEntriesinCollection } from "../pages/_utils";

const { entry, relatedEntries } = Astro.props;
const { Content, components, headings } = await entry.render();

const currentLocale = getCurrentLocale(Astro.url.pathname);
const t = await getUiTranslator(currentLocale);

const jumpToLinks = [
  {
    label: t("tutorialCategories", entry.data.category),
    url: `/tutorials#${entry.data.category}`,
    current: true,
  },
] as JumpToLink[];

const currentTutorialHeadings = headings
  .filter((heading: MarkdownHeading) => heading.depth <= 2)
  .map((heading: MarkdownHeading) => ({
    label: heading.text,
    url: `#${heading.slug}`,
    size: "small",
  }));

jumpToLinks.push(...currentTutorialHeadings);

for (const relEntry of relatedEntries) {
  jumpToLinks.push({
    label: relEntry.data.title,
    url: `/tutorials/${relEntry.slug}`,
  });
}

const jumpToState = {
  title: t("Tutorials"),
  links: jumpToLinks,
};

setJumpToState(jumpToState);

const relatedReferences =
  entry.data.relatedContent?.references !== undefined
    ? await getRelatedEntriesinCollection(
        "reference",
        currentLocale,
        entry.data.relatedContent.references.map((r: any) => r.slug)
      )
    : [];
const relatedExamples =
  entry.data.relatedContent?.examples !== undefined
    ? await getRelatedEntriesinCollection(
        "examples",
        currentLocale,
        entry.data.relatedContent.examples.map((r: any) => r.slug)
      )
    : [];
---

<BaseLayout title={entry.data.title} variant="item" topic="tutorials">
  {entry.data.authors && <h6>By {entry.data.authors.join(", ")}</h6>}
  {entry.data.authorsNote && <h7>{entry.data.authorsNote}</h7>}
  <TutorialWrapper>
    <Content
      components={{
        ...components,
        img: FreeRatioImage,
        pre: CodeBlockWrapper,
      }}
    />
  </TutorialWrapper>

  <div class="grid gap-y-lg mt-2xl">
    {
      relatedReferences && (
        <RelatedItems
          title={t("Related References") as string}
          items={relatedReferences}
        />
      )
    }
    {
      relatedExamples.length > 0 && (
        <RelatedItems
          title={t("Related Examples") as string}
          items={relatedExamples}
        />
      )
    }
  </div>
</BaseLayout>
