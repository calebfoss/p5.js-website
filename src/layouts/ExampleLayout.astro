---
import type { CollectionEntry } from "astro:content";
import Head from "@components/Head/index.astro";
import { setJumpToState } from "../globals/state";
import { getCurrentLocale, getUiTranslator } from "../i18n/utils";
import {
  generateJumpToState,
  getRelatedEntriesinCollection,
} from "../pages/_utils";
import BaseLayout from "./BaseLayout.astro";
import EditableSketch from "@components/EditableSketch/index.astro";
import RelatedItems from "@components/RelatedItems/index.astro";
import authorData from 'public/assets/exampleAuthors.json'
import type { AuthorData } from "../scripts/builders/exampleAuthors";

interface Props {
  example: CollectionEntry<"examples">;
  code: string;
  relatedExamples: CollectionEntry<"examples">[];
}

const { example, code, relatedExamples } = Astro.props;

const baseLegacyPath = "https://archive.p5js.org/examples/";
const baseProcessingPath = "https://processing.org/examples/";

const currentLocale = getCurrentLocale(Astro.url.pathname);
const t = await getUiTranslator(currentLocale);

const jumpToState = await generateJumpToState(
  "examples",
  example.slug,
  "Examples",
  t,
  currentLocale
);

setJumpToState(jumpToState);

const relatedReferences =
  example.data.relatedReference !== undefined
    ? await getRelatedEntriesinCollection(
        "reference",
        currentLocale,
        example.data.relatedReference.map((r: any) => r.slug)
      )
    : [];

const { Content } = await example.render();

const [categoryDir, exampleDir] = example.id.split("/").slice(1);

const additionalAuthors = example.data.additionalContributors ?? [];

const categoryGitAuthors = authorData[categoryDir as keyof typeof authorData];

const exampleGitAuthors = categoryGitAuthors[exampleDir as keyof (typeof categoryGitAuthors)] as AuthorData[];

const allExampleAuthors = additionalAuthors
  .concat(exampleGitAuthors
    .map(author => ({...author, name: author.name.length ? author.name : author.login}))
  );
---

<Head
  title={example.data.title}
  locale={currentLocale}
  featuredImageSrc={example.data.featuredImage.src}
  description={example.data.oneLineDescription}
/>

<BaseLayout
  title={example.data.title}
  titleClass=""
  subtitle={null}
  variant="item"
  topic="examples"
  className="example"
>
  <div class="mt-xl mb-4xl lg:mb-3xl max-w-[770px]">
    <div class="rendered-markdown">
      <Content />
      <p>Contributors: {allExampleAuthors.map((author, index, arr) => {
        const name = author.name;

        const comma = index < arr.length - 1 ? ', ' : ''
        
        if(author.url.length === 0) return <>{name}{comma}</>;
      
        return <><a href={author.url} target="_blank">{name}</a>{comma}</>
      })}</p>
      {example.data.legacyTitle && example.data.legacyPath 
        ? <p>Modified from <a href={baseLegacyPath + example.data.legacyPath} target="_blank">{example.data.legacyTitle}</a>.</p> 
          : null}
      {example.data.processingTitle && example.data.processingPath
        ? <p>Originally ported from the Processing example
            <a href={baseProcessingPath + example.data.processingPath} target="_blank">{example.data.processingTitle}</a>.
          </p>
          : null}
    </div>
    <EditableSketch code={code} />
    <p>{example.data.arialabel}</p>
    <div class="rendered-markdown">
      <p>
        <a href={Astro.url.pathname}>{example.data.title}</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a>.
      </p>
      <img src="/images/by-nc-sa.svg" />
    </div>
  </div>
  <div class="grid gap-y-4xl lg:gap-y-mb-3xl mt-2xl">
    {
      relatedReferences.length > 0 ? (
        <RelatedItems
          title={t("Related References") as string}
          items={relatedReferences}
        />
      ) : null
    }
    <RelatedItems
      title={t("Related Examples") as string}
      items={relatedExamples}
    />
  </div>
</BaseLayout>
