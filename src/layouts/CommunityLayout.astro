---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "./BaseLayout.astro";
import LinkButton from "@components/LinkButton/index.astro";
import GridItemSketch from "@components/GridItem/Sketch.astro";
import GridItemLibrary from "@components/GridItem/Library.astro";
import GridItemEvent from "@components/GridItem/Event.astro";
import { getCurrentLocale, getUiTranslator } from "@i18n/utils";
import { makeThumbnailUrl } from "../api/OpenProcessing";
import { setJumpToState } from "../globals/state";

interface Props {
  sketches: OpenProcessingCurationResponse;
  libraries: CollectionEntry<"libraries">[];
  pastEvents: CollectionEntry<"past-events">[];
}

// Max number of sketches we will show on this page
const sketchesLimit = 8;
// Max number of libraries we will show on this page
const librariesLimit = 8;
// Max number of libraries we will show on this page
const eventsLimit = 9;

const sketches = Astro.props.sketches.slice(0, sketchesLimit),
  libraries = Astro.props.libraries.slice(0, librariesLimit),
  events = Astro.props.pastEvents.slice(0, eventsLimit);
const currentLocale = getCurrentLocale(Astro.url.pathname);
const t = await getUiTranslator(currentLocale);

setJumpToState({
  heading: t("Community") as string,
  links: [
    { label: t("Sketches") as string, url: "#sketches" },
    { label: t("Libraries") as string, url: "#libraries" },
    { label: t("Events") as string, url: "#events" },
  ],
});
---

<BaseLayout title="Community">
  <h2>{t("Sketches")} <a id="sketches"></a></h2>
  {
    sketches.slice(0, sketchLimit).map((sk) => (
      <li>
        {
          // This isn't alt text ideal but we have no way of knowing what
          // the thumbnail looks like, and the OpenProcessing API
          // doesn't include that information
        }
        <Image
          src={makeThumbnailUrl(sk.visualID)}
          alt="Screenshot of sketch"
          width={200}
          height={200}
        />
        <a href={`/sketches/${sk.visualID}`}>{sk.title}</a>
      </li>
    ))
  }
  <a href="/sketches">See Sketches Archive</a>

  <h2>{t("Libraries")} <a id="libraries"></a></h2>
  {
    libraries.map((entry) => (
      <li>
        <a href={getLibraryLink(entry)}>{removeLocaleAndExtension(entry.id)}</a>
      </li>
    ))
  }

  <a href="/libraries">See Libraries Archive</a>

  <h2>{t("Events")} <a id="events"></a></h2>
  {
    pastEvents.map((entry) => (
      <li>
        <a href={`/past-events/${removeLocaleAndExtension(entry.id)}`}>
          {removeLocaleAndExtension(entry.id)}
        </a>
      </li>
    ))
  }
  <a href="/past-events">See Past Events Archive</a>
</BaseLayout>
