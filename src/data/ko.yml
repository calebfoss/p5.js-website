Home: "홈"
Download: "다운로드"
Start: "시작하기"
Reference: "레퍼런스"
Libraries: "라이브러리"
Learn: "학습"
Examples: "예제"
Books: "관련 책"
Community: "커뮤니티"
Contribute: "기여하기"
Forum: "포럼"

footer1: "p5.js는 "
footer2: "에 의해 설립되고 커뮤니티 구성원들에 의해 개발되었으며 "
footer3: " 과 "
footer4: "의 후원을 받았습니다. 아이덴티티, 그래픽디자인 : "

tagline1: "Processing의 즐거움에 JavaScript의 매력을 곱하다"
tagline2: "Processing의 간명함에 JavaScript의 유연성을 곱하다"
tagline3: "Processing의 직관성에 JavaScript의 강력함을 곱하다"
tagline4: "Processing의 창조성에 JavaScript의 활력을 곱하다"
tagline5: "Processing 커뮤니티에 JavaScript 커뮤니티를 곱하다"
tagline6: "Processing의 강력함에 JavaScript의 범용성을 곱하다"

home:
  Download: "다운로드"
  Start: "시작하기"
  Reference: "레퍼런스"
  Libraries: "라이브러리"
  Learn: "학습"
  Community: "커뮤니티"
  p1x1: "안녕하세요! p5.js는 "
  p1x2: "의 목표를 지키고 이를 온라인 공간으로 확장하고자 시작된 자바스크립트 라이브러리로, 예술가, 디자이너, 교육자, 초보자를 위해 만들어졌습니다. "
  p2x1: "마치 다양한 미술 도구로 스케치북에 그림을 그리듯이, p5.js를 이용하면 인터넷 브라우저의 '캔버스(canvas)'를 스케치북 삼아 그림을 그릴 수 있습니다. 뿐만 아니라, p5.js의 추가 "
  libraries: " 라이브러리"
  p2x2: "를 이용하면 텍스트, 입력값, 비디오, 웹캠, 소리와 같은 HTML5 오브젝트를 "
  interact: "쉽게 다루고 "
  p2x3: " , '캔버스'를 너머 인터넷 브라우저 자체를 당신의 스케치북으로 삼을 수 있습니다."
  p3x1: "새로운 해석을 제안하는 p5.js는 지금도 활발하게 개발 중인 프로젝트입니다."
  p3x2: "새로운 p5.js 웹에디터를 지금 바로 체험해보세요!"
  sketch_by: "by"
  sketch_info: "CC Fest! November 10 @ NYU ITP"
  sketch_info_link: "http://ccfest.rocks/"

copyright:
  copyright1: "The p5.js library is free software; you can redistribute it and/or modify it under the terms of the "
  copyright2: " as published by the Free Software Foundation, version 2.1."
  copyright3: "The Reference for the language is under a "
  copyright4: " license which makes it possible to reuse this content for non-commercial purposes if it is credited."

get started:
  get-started-title: "시작하기"
  get-started1: "본 페이지는 p5.js 프로젝트를 셋업하고 나의 첫 스케치를 만드는 방법을 소개합니다."
  get-started2: ""
  get-started3: "p5.js 웹에디터"
  get-started4: "를 사용한다면, 아래 두 항목를 생략하고 이곳으로 건너뛰세요:"
  get-started5: "첫 스케치 만들기"
  download-title: "다운로드, 파일 셋업"
  download1: "가장 쉬운 방법은 "
  download2: "p5.js complete"
  download3: "와 함께 제공되는 빈 예제파일을 이용하는 것입니다."
  download4: "index.html 파일을 살펴보세요. index.html 파일이 p5.js 링크를 포함하고 있죠? 만약 빠른 로딩을 위해 압축된 간략 버전을 이용하고 싶다면, 아래와 같이 p5.js 링크를 p5.min.js로 변경하면 됩니다."
  download5: "혹은, 온라인에 저장된 p5.js 파일에 링크를 하는 방법도 있습니다. p5.js의 모든 버전은 CDN (Content Delivery Network)에 저장되어 있으며, 버전들의 히스토리는 이곳에서 보실 수 있습니다: "
  download6: ". 이 방법을 따르는 경우, 링크를 다음과 같이 변경하세요:"
  download7: "아래는 HTML 페이지 샘플입니다:"
  download8: "위 HTML 페이지 템플릿을 코드펜(codepen)에 붙여넣어 프로젝트를 시작하는 것도 한 방법입니다: "
  download9: "."
  environment-title: "개발환경"
  environment1: "어떠한 것이든, 당신이 선호하는 "
  environmentlink: "http://en.wikipedia.org/wiki/Source_code_editor"
  environment2: "코드 에디터"
  environment3: "를 사용하면 됩니다. 아래에 "
  environment4: "에서 세팅하는 경우에 대한 설명이 있습니다. "
  environment5: " 과 "
  environment6: "또한 추천할만한 에디터입니다. 당신이 스크린리더 유저인데 p5 웹에디터를 이용하지 않는다면, 다음의 에디터들을 고려해보세요: "
  environment7: " 나 "
  environment8: "먼저, Sublime 에디터 프로그램을 실행하세요. File 메뉴를 열고 Open을 클릭한 후, 당신의 html 파일과 js 파일이 위치한 폴더를 선택하세요. 폴더 이름과 폴더에 포함된 파일 리스트가 왼쪽 사이드바에 보일 것입니다"
  environment9: "sketch.js 파일을 선택하면, 오른쪽 편집 영역에서 파일이 열립니다. "
  environment10: "Sublime 에디터에서 p5 템플릿 코드를 편집중인 화면"
  environment11: "index.html 파일을 브라우저에서 열어볼까요? 파일 관리 시스템에서 index.html 파일을 더블클릭하거나 브라우저 주소창에 다음을 입력하세요:"
  environment12: "file:///the/file/path/to/your/html"
  environment13: ""
  your-first-sketch-title: "나의 첫 스케치"
  your-first-sketch-intro1: "Processing 사용자라면, 다음의 페이지를 읽어보세요: "
  your-first-sketch-intro2: "https://github.com/processing/p5.js/wiki/Processing-transition"
  your-first-sketch-intro3: "Processing에서 p5.js로 이전하기 튜토리얼"
  your-first-sketch-intro4: "에디터에 다음을 입력하세요:"
  your-first-sketch2: "위의 코드를 설명하자면 다음과 같습니다. \"왼쪽 위 모서리에서 아래로 50px, 오른쪽으로 50px 떨어진 위치를 중심으로 하는 타원을 그린다. 타원의 폭과 높이는 동일하게 80px로 한다.\""
  your-first-sketch3: "스케치 저장 후, 브라우저 페이지에서 새로고침을 해보세요. 입력한 코드에 문제가 없는 한, 다음과 같은 화면을 보실겁니다:"
  your-first-sketch4: "주의: 스크린리더를 사용하는 경우, p5 웹에디터에서 Accessibile Outputs를 활성화해야 합니다. 별도의 에디터를 사용하는 경우, 접근성 라이브러리를 html 파일에 추가해야 합니다. 자세한 설명은 다음 링크를 참조하세요: "
  your-first-sketch5: "스크린리더에서 p5를 사용하는 방법"
  your-first-sketch6: ", "
  your-first-sketch7: "접근성 라이브러리란?"
  your-first-sketch8: "캔버스에 폭과 높이가 50인 타원이 x 80, y 80의 위치에 그려져있다"
  your-first-sketch9: "코드를 제대로 입력하지 않았다면, 화면에 아무것도 나타나지 않을 수 있습니다. 이러한 경우, 예제 코드를 정확하게 따라 썼는지 확인하세요. 숫자는 괄호 안에 포함하되 각 숫자는 쉼표로 구분해야 하고, 각 라인은 세미콜론을 끝나야 합니다."
  your-first-sketch10: "프로그래밍을 시작할 때 가장 어려운 것 중 하나는 문법이 매우 까다롭다는 점입니다. 브라우저는 사용자가 의미하는 바가 무엇인지 이해할 정도로 똑똑하지 않으며, 각 요소의 위치와 구두법에 매우 민감합니다. 처음에는 이런 점들이 낯설게 느껴지겠지만, 연습을 통해 점차 익숙해질 것입니다. 몇몇 브라우저는 코드 내 오류를 확인할 수 있는 자바스크립트 '콘솔'을 제공합니다. 크롬의 경우, 보기 > 개발자 > 자바스크립트 콘솔을 클릭해 '콘솔'을 활성화하할 수 있습니다."
  your-first-sketch11: "이제 한층 더 재미있는 스케치를 만들 차례입니다다. 지난 예제의 코드를 삭제하고 다음의 코드를 입력해 보세요:"
  your-first-sketch12: "이 프로그램은 폭이 640px이고 높이가 480인 캔버스를 생성하고, 마우스 커서 위치에서 흰 원을 그리기 시작합니다. 마우스 버튼을 누르고 있을 때는 원의 색이 검정색으로 바뀝니다. 마우스 위치에 대한 설명은 추후에 더 하기로 하고, 일단 여기서는 코드를 실행하고 마우스를 움직이고 클릭하며 스케치의 변화를 살펴보세요."
  your-first-sketch13: "캔버스에 마우스 궤적을 따라 여러개의 원이 그려져있다"
  what-next-title: "다음 단계"
  processing-transition1: "Processing을 p5.js로 전환하려면 어떻게 해야하며, 둘이 어떻게 다른지 궁금하다면, "
  processing-transition2: "https://github.com/processing/p5.js/wiki/Processing-transition"
  processing-transition3: "Processing에서 p5.js로 이전하기 튜토리얼"
  processing-transition4: "을 읽어보세요."
  reference1: "p5.js에 대한 전체 다큐멘테이션을 보려면, "
  reference2: "레퍼런스"
  reference3: "를 읽어보세요."
  learn1: "더 많은 정보가 필요하다면, "
  learn2: "학습"
  learn3: " 페이지와 "
  learn4: "예제"
  learn5: " 페이지를 살펴보세요."
  learn6: "스크린리더에서 p5를 사용하고 싶다면, 다음 페이지를 읽어보세요: "
  learn7: "스크린리더에서 p5 사용하기 튜토리얼"
  book1: "본 튜토리얼의 일부는 다음의 책에서 발췌하였습니다: Getting Started with p5.js, by Lauren McCarthy, Casey Reas, and Ben Fry, O'Reilly / Make 2015. Copyright "
  book2: 2015 Lauren McCarthy, Casey Reas, and Ben Fry. All rights reserved.

download:
  Download: "Download"
  complete-library-title: "Complete Library"
  p5.js-complete: "p5.js complete"
  includes-1: "Includes:"
  includes-2: "p5.js, p5.dom.js, p5.sound.js, and an example project"
  includes-3: "Version "
  single-files-title: "Single Files"
  single-file: "Single file: "
  p5.js-uncompressed: "Full uncompressed version"
  compressed: "Compressed version"
  link: "Link: "
  statically-hosted-file: "Statically hosted file"
  editor-title: "Editor"
  p5.js-editor: "p5.js Web Editor"
  editor-includes: "Start coding using the p5.js Web Editor, no setup required!"
  etc-title: "ETC"
  older-releases: "Older releases / changelog "
  report-bugs: "Report bugs "
  supported-browsers: "Supported browsers "
  support-title: "Support p5.js!"
  support-1: "p5.js is free, open-source software. We want to make our community as open and inclusive as possible. You can support this work by "
  support-2: "becoming a member"
  support-3: " of the Processing Foundation as an individual, a studio, or an educational institution. You can also "
  support-4: "make a donation"
  support-5: " without purchasing a membership."
  support-6: "Individual"
  support-7: "$25"
  support-8: "Studio"
  support-9: "$250"
  support-10: "Educational Institution"
  support-11: "$5/student or $500"
  support-12: "Your membership supports software development (for p5.js, Processing, Processing.py, Processing for Android and ARM devices, education resources like code examples and tutorials, "
  support-13: "Fellowships"
  support-14: ", and "
  support-15: "community events"
  support-16: ". We need your help!"
  support-17: "p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in Pittsburgh (Image credit: Taeyoon Choi)"
  support-18: "Processing Fellow Saskia Freeke is organizing Code Liberation x Processing workshops in London (Image credit: Code Liberation Foundation)"
  support-19: "Learning to Teach, Teaching to Learn conference with SFPC (Image credit: Kira Simon-Kennedy)"
  support-20: "Processing Foundation Fellow Cassie Tarakajian’s workshop at Code Art Miami (Image credit: Christian Arévalo Photography)"
  support-21: "Taeyoon Choi and ASL interpretor at Signing Coders p5.js workshop (Image credit: Taeyoon Choi)"
  support-22: "Google Summer of Code kickoff (Image credit: Taeyoon Choi)"
  support-23: "Processing Foundation Fellow Cassie Tarakajian’s workshop at Code Art Miami (Image credit: Christian Arévalo Photography)"
  support-24: "Luisa Pereira and Yeseul Song helping facilitate a sign language based p5.js workshop led by Taeyoon Choi (Image credit: Taeyoon Choi)"
  support-25: "p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in Pittsburgh (Image credit: Taeyoon Choi)"
  support-26: "Processing Fellow Digital Citizens Lab hosts a panel on STEM teaching at the International Center of Photography (Image credit: International Center of Photography)"
  support-27: "Participants at p5.js workshop in Santiago, Chile, led by Aarón Montoya-Moraga (Image credit: Aarón Montoya-Moraga.)"
  support-28: "Claire Kearney-Volpe helping facilitate a sign language based p5.js workshop led by Taeyoon Choi (Image credit: Taeyoon Choi)"
  support-29: "Processing Foundation Fellow DIY Girls run a creative coding program in Los Angeles (Image credit: DIY Girls)"
  support-30: "Processing Fellow Digital Citizens Lab"
  support-31: "Bicoastal p5.js meetup at UCLA DMA and NYU ITP"
  support-32: "The Processing Foundation"
  support-33: " was founded in 2012 after more than a decade of work with the original Processing software. The Foundation’s mission is to promote software literacy within the visual arts, and visual literacy within technology-related fields — and to make these fields accessible to diverse communities. Our goal is to empower people of all interests and backgrounds to learn how to program and make creative work with code, especially those who might not otherwise have access to these tools and resources."

learn:
  learn-title: "Learn"
  learn1: "These tutorials provide more in-depth or step-by-step overviews of particular topics. Check out the "
  learn2: "examples page"
  learn3: "to see short demonstrations of various p5.js topics."
  introduction-to-p5js-title: "Introduction to p5.js"
  hello-p5js-title: "Hello p5.js"
  hello-p5js: "This short video will introduce you to the library and what you can do with it."
  getting-started-title: "Getting Started"
  getting-started: "Welcome to p5.js! <br> This introduction covers the basics of setting up a p5.js project."
  p5js-overview-title: "p5.js overview"
  p5js-overview: "An overview of the main features of p5.js."
  p5js-processing-title: "p5.js and Processing"
  p5js-processing: "The main differences between the two, and how to convert from one to the other."
  p5-screen-reader-title: "p5 with a screen reader"
  p5-screen-reader: "Setting up p5 so that it can be used easily with a screen reader."
  using-local-server-title: "Using a local server"
  using-local-server: "How to set up a local server on Mac OSX, Windows, or Linux."
  connecting-p5js-title: "Connecting p5.js"
  creating-libraries-title: "Creating libraries"
  creating-libraries: "Creating p5.js addon libraries."
  nodejs-and-socketio-title: "node.js and socket.io"
  nodejs-and-socketio: "Using a node.js server with p5.js, communication via socket.io."
  programming-topics-title: "Programming topics"
  beyond-the-canvas-title: "Beyond the canvas"
  beyond-the-canvas: "Creating and manipulating elements on the page beyond the canvas."
  3d-webgl-title: "3D/WebGL"
  3d-webgl: "Developing advanced graphics applications in p5.js using WEBGL mode."
  color-title: "Color"
  color: "An introduction to digital color."
  coordinate-system-and-shapes-title: "Coordinate System and Shapes"
  coordinate-system-and-shapes: "Drawing simple shapes and using the coordinate system."
  interactivity-title: "Interactivity"
  interactivity: "Introduction to interactivity with the mouse and keyboard."
  program-flow-title: "Program Flow"
  program-flow: "Introduction to controlling program flow in p5.js."
  curves-title: "Curves"
  curves: "An introduction to the three types of curves in p5.js: arcs, spline curves, and Bézier curves."
  becoming-a-better-programmer-title: "Becoming a better programmer"
  debugging-title: "Debugging"
  debugging: "Field guide to debugging for everyone."
  optimizing-title: "Optimizing p5.js code for performance"
  optimizing: "A tutorial of tips and tricks for optimizing your code to make it run faster and smoother."
  test-driven-development-title: "Unit testing and test driven development"
  test-driven-development: "Save yourself from agony on install day. What is unit testing and how to use it? By Andy Timmons."
  contributing-to-the-community-title: "Contributing to the community"
  development-title: "Development"
  development: "Getting started and overview for contributing to development."
  looking-inside-title: "Looking inside p5"
  looking-inside: "A friendly intro to the file structure and tools for p5.js development, by Luisa Pereira."
  writing-tutorial-title: "Writing a tutorial"
  writing-tutorial: "A guide to writing a p5.js programming tutorial."
  writing-a-tutorial-title: "Guide to contributing p5.js tutorials"
  writing-a-tutorial-author: "This tutorial was written by Tega Brain."
  writing-a-tutorial-1: "We invite educators, contributors and general enthusiasts to contribute p5js tutorials. The p5js project makes creative coding and open source development more accessible to a diverse community and we are excited to publish tutorials on all aspects of the development process. Our learning materials so far include guides on learning p5, programming technique and how to contribute to an open source project."
  writing-a-tutorial-2: "We welcome new written tutorial contributions and this guide outlines the steps of how to propose, prepare and contribute."
  writing-a-tutorial-how-start-title: "How to get started:"
  writing-a-tutorial-how-start-1: "Check that your proposed topic has not already been covered. There is "
  writing-a-tutorial-how-start-2: "a working spreadsheet here"
  writing-a-tutorial-how-start-3: "that outlines in progress tutorials. If your topic is listed as in progress, perhaps you can add to work being done and contribute to preparing existing work for publication so please reach out to us."
  writing-a-tutorial-how-start-4: "If your topic is not already covered and is not listed as in progress, please write a few sentences on what you propose to cover and email us this description at education@p5js.org."
  writing-a-tutorial-how-prepare-title: "How to prepare a p5js tutorial for publication online:"
  writing-a-tutorial-how-prepare-1: "When your tutorial is ready for publication, please follow these steps to prepare your content for the p5js website."
  writing-a-tutorial-how-prepare-2: "Prepare the content of your tutorial as a tutorial-name.hbs file with "
  writing-a-tutorial-how-prepare-3: "this basic structure"
  writing-a-tutorial-how-prepare-4: ". As is shown in this file, it must contain a header as shown below:"
  writing-a-tutorial-how-prepare-5: "The folder containing your tutorial will be placed in the 'tutorials' folder of the p5js site. The file called index.hbs is the "
  writing-a-tutorial-how-prepare-6: "p5.js tutorials landing page,"
  writing-a-tutorial-how-prepare-7: " and the test-tutorial.hbs file is the test tutorial."
  writing-a-tutorial-how-prepare-8: "All content should go in the:"
  writing-a-tutorial-how-prepare-9: "tags on the page, with formatting defined by the &lt;h1&gt; and &lt;h2&gt; tags, the &lt;p&gt; paragraph tags as is done shown on the"
  writing-a-tutorial-how-prepare-10: "test tutorial page."
  writing-a-tutorial-how-prepare-11: "If your tutorial contains images, they are to be placed in the assets folder of the p5 site, in the location src/assets/learn/test-tutorial/images as shown below."
  writing-a-tutorial-how-prepare-12: "To correctly format code in the html of the page use the tag:"
  writing-a-tutorial-embedding-title: "Embedding p5.js sketches"
  writing-a-tutorial-embedding-1: "Using p5js means you can illustrate your tutorial with animated, interactive or editable code examples to demonstrate programming concepts. Your examples should be prepared as p5.js sketches and can be embedded into the tutorial in two ways."
  writing-a-tutorial-embedding-2: "If the example is to be editable like in "
  writing-a-tutorial-embedding-3: "the reference pages"
  writing-a-tutorial-embedding-4: " of the p5js site, the p5 sketch should be embedded into the html page using the p5js widget. Follow "
  writing-a-tutorial-embedding-5: "this guide "
  writing-a-tutorial-embedding-6: "on how to embed p5js sketches using the widget written by "
  writing-a-tutorial-embedding-7: ". You can also see this in action on the"
  writing-a-tutorial-embedding-8: " test tutorial page"
  writing-a-tutorial-embedding-9: "."
  writing-a-tutorial-embedding-10: "If the example is to be animated and/or interactive but not editable. The p5.js sketch should be embedded into the page as an iframe as described below."
  writing-a-tutorial-iframe-title: "Embed a p5 sketch using an iframe"
  writing-a-tutorial-iframe-1: "An iframe is like creating a window through which you can see another page, sandboxed from the rest of your page. In this case it will be a window to the index.html containing your p5.js sketch. "
  writing-a-tutorial-iframe-2: "Put your p5 sketches in the /src/assets/learn folder of the site, in a folder labelled with the name of your sketch as shown in the screenshot. This is where all the images and p5 sketches linked by iframe should be stored."
  writing-a-tutorial-iframe-3: "In the subfolders containing your p5 examples there should be a sketch.js file and the embed.html file for the sketch. "
  writing-a-tutorial-iframe-4: "Make sure your embed.html file has the correct paths to the p5 libraries of the site. If your file structure is the same as above, the path to the p5.js library should be \"../../../js/p5.min.js\"."
  writing-a-tutorial-iframe-5: "You can then embed the p5js index files as iframes in the .hbs file that contains your tutorial content. The embed code for the iframe would then be: "
  writing-a-tutorial-iframe-6: "Styling for the iframe (this could directly into the post or in a stylesheet):  "
  writing-a-tutorial-iframe-7: "Here you can see the naked sketch running: "
  writing-a-tutorial-iframe-8: "And here it is embedded in the p5 site using the code below:  "
  writing-a-tutorial-iframe-9: "One thing to note is that you need to manually set the size of the iframe, so it works best if things are a standard size."
  writing-a-tutorial-iframe-10: "Also note that the links to the p5.js library files do not happen from the .eps page with all the tutorial content. Instead they will be located in the html page that is rendering your sketch (in this case, called embed.html)."
  writing-a-tutorial-iframe-11: "More information on embedding p5.js sketches can be found "
  writing-a-tutorial-embed-iframe-12: "here."
  writing-a-tutorial-finishing-title: "Finishing up"
  writing-a-tutorial-finishing-1: "Once your have finished writing your tutorial and your content has been given the thumbs up. Fork the p5.js website repository, prepare your content as described above and then issue a pull request to the p5.js website repository so we can publish your contribution!"
  writing-a-tutorial-finishing-2: "Thank you!"
  color-description1: "This tutorial is from the book Learning Processing by Daniel Shiffman, published by Morgan Kaufmann, © 2008 Elsevier Inc. All rights reserved. It was ported to P5 by Kelly Chang. If you see any errors or have comments, "
  color-description2: " please let us know."
  color-title: "Color"
  color-p1x1: "In the digital world, when we want to talk about a color, precision is required. Saying \"Hey, can you make that circle bluish-green?\" will not do. Color, rather, is defined as a range of numbers. Let's start with the simplest case: black & white or grayscale. 0 means black, 255 means white. In between, every other number—50, 87, 162, 209, and so on—is a shade of gray ranging from black to white."
  color-p2x1: "By adding the "
  color-p2x2: " and "
  color-p2x3: " functions before something is drawn, we can set the color of any given shape. There is also the function "
  color-p2x4: ", which sets a background color for the window. Here's an example."
  color-code1: "background(255);    // Setting the background to white \n stroke(0);          // Setting the outline (stroke) to black \n fill(150);          // Setting the interior of a shape (fill) to grey \n rect(50,50,75,100); // Drawing the rectangle"
  color-p3x1: "Stroke or fill can be eliminated with the functions: "
  color-p3x2: " and "
  color-p3x3: ". Our instinct might be to say \"stroke(0)\" for no outline, however, it is important to remember that 0 is not \"nothing\", but rather denotes the color black. Also, remember not to eliminate both—with "
  color-p3x4: " and "
  color-p3x5: ", nothing will appear!"
  color-p4x1: "In addition, if we draw two shapes, p5.js will always use the most recently specified stroke and fill, reading the code from top to bottom."
  color-rgb-title: "RGB Color"
  color-rgb-p1x1: "Remember finger painting? By mixing three \"primary\" colors, any color could be generated. Swirling all colors together resulted in a muddy brown. The more paint you added, the darker it got. Digital colors are also constructed by mixing three primary colors, but it works differently from paint. First, the primaries are different: red, green, and blue (i.e., \"RGB\" color). And with color on the screen, you are mixing light, not paint, so the mixing rules are different as well."
  color-rgb-li1: "Red + Green = Yellow"
  color-rgb-li2: "Red + Blue = Purple"
  color-rgb-li3: "Green + Blue = Cyan (blue-green)"
  color-rgb-li4: "Red + Green + Blue = White"
  color-rgb-li5: "No colors = Black"
  color-rgb-p2x1: "This assumes that the colors are all as bright as possible, but of course, you have a range of color available, so some red plus some green plus some blue equals gray, and a bit of red plus a bit of blue equals dark purple. While this may take some getting used to, the more you program and experiment with RGB color, the more it will become instinctive, much like swirling colors with your fingers. And of course you can't say \"Mix some red with a bit of blue,\" you have to provide an exact amount. As with grayscale, the individual color elements are expressed as ranges from 0 (none of that color) to 255 (as much as possible), and they are listed in the order R, G, and B. You will get the hang of RGB color mixing through experimentation, but next we will cover some code using some common colors."
  color-transparency-title: "Color Transparency"
  color-transparency-p1x1: "In addition to the red, green, and blue components of each color, there is an additional optional fourth component, referred to as the color's \"alpha\". Alpha means transparency and is particularly useful when you want to draw elements that appear partially see-through on top of one another. The alpha values for an image are sometimes referred to collectively as the \"alpha channel\" of an image."
  color-transparency-p2x1: "It is important to realize that pixels are not literally transparent, this is simply a convenient illusion that is accomplished by blending colors. Behind the scenes, p5.js takes the color numbers and adds a percentage of one to a percentage of another, creating the optical perception of blending. (If you are interested in programming \"rose-colored\" glasses, this is where you would begin.)"
  color-transparency-p3x1: "Alpha values also range from 0 to 255, with 0 being completely transparent (i.e., 0% opaque) and 255 completely opaque (i.e., 100% opaque)."
  color-custom-ranges-title: "Custom Color Ranges"
  color-custom-ranges-p1x1: "RGB color with ranges of 0 to 255 is not the only way you can handle color in p5.js, in fact, it allows us to think about color any way we like. For example, you might prefer to think of color as ranging from 0 to 100 (like a percentage). You can do this by specifying a custom "
  color-custom-ranges-p2x1: "The above function says: \"OK, we want to think about color in terms of red, green, and blue. The range of RGB values will be from 0 to 100.\""
  color-custom-ranges-p3x1: "Although it is rarely convenient to do so, you can also have different ranges for each color component:"
  color-custom-ranges-p4x1: "Now we are saying \"Red values go from 0 to 100, green from 0 to 500, blue from 0 to 10, and alpha from 0 to 255.\""
  color-custom-ranges-p5x1: "Finally, while you will likely only need RGB color for all of your programming needs, you can also specify colors in the HSB (hue, saturation, and brightness) mode. Without getting into too much detail, HSB color works as follows:"
  color-custom-ranges-li1x1: "Hue"
  color-custom-ranges-li1x2: "—The color type, ranges from 0 to 255 by default."
  color-custom-ranges-li2x1: "Saturation"
  color-custom-ranges-li2x2: "—The vibrancy of the color, 0 to 255 by default."
  color-custom-ranges-li3x1: "Brightness"
  color-custom-ranges-li3x2: "—The, well, brightness of the color, 0 to 255 by default."
  color-custom-ranges-p6x1: "With "
  color-custom-ranges-p6x2: " you can set your own ranges for these values. Some prefer a range of 0-360 for hue (think of 360 degrees on a color wheel) and 0-100 for saturation and brightness (think of 0-100%)."
  coordinate-system-description1: "This tutorial is from the book "
  coordinate-system-description2: "Learning Processing"
  coordinate-system-description3: " by Daniel Shiffman, published by Morgan Kaufmann, © 2008 Elsevier Inc. All rights reserved. It was ported to p5.js by Alex Yixuan Xu. If you see any errors or have comments, please "
  coordinate-system-description4: "let us know"
  coordinate-system-description5: "."
  coordinate-system-description-title: "Coordinate System and Shapes"
  coordinate-system-description-p1x1: "Before we begin programming with p5, we must first channel our eighth grade selves, pull out a piece of graph paper, and draw a line. The shortest distance between two points is a good old fashioned line, and this is where we begin, with two points on that graph paper."
  coordinate-system-description-p2x1: "The above figure shows a line between point A (1,0) and point B (4,5). If you wanted to direct a friend of yours to draw that same line, you would give them a shout and say \"draw a line from the point one-zero to the point four-five, please.\" Well, for the moment, imagine your friend was a computer and you wanted to instruct this digital pal to display that same line on its screen. The same command applies (only this time you can skip the pleasantries and you will be required to employ a precise formatting). Here, the instruction will look like this:"
  coordinate-system-description-p3x1: "Even without having studied the syntax of writing code, the above statement should make a fair amount of sense. We are providing a command (which we will refer to as a \"function\") for the machine to follow entitled \"line.\" In addition, we are specifying some arguments for how that line should be drawn, from point A (1,0) to point B (4,5). If you think of that line of code as a sentence, the function is a verb and the arguments are the objects of the sentence. The code sentence also ends with a semicolon instead of a period."
  coordinate-system-description-p4x1: "The key here is to realize that the computer screen is nothing more than a fancier piece of graph paper. Each pixel of the screen is a coordinate - two numbers, an \"x\" (horizontal) and a \"y\" (vertical) - that determines the location of a point in space. And it is our job to specify what shapes and colors should appear at these pixel coordinates."
  coordinate-system-description-p5x1: "Nevertheless, there is a catch here. The graph paper from eighth grade (\"Cartesian coordinate system\") placed (0,0) in the center with the y-axis pointing up and the x-axis pointing to the right (in the positive direction, negative down and to the left). The coordinate system for pixels in a computer window, however, is reversed along the y-axis. (0,0) can be found at the top left with the positive direction to the right horizontally and down vertically."
  coordinate-system-simple-shapes-title: "Simple Shapes"
  coordinate-system-simple-shapes-p1x1: "The vast majority of the programming examples you'll see with p5 are visual in nature. These examples, at their core, involve drawing shapes and setting pixels. Let's begin by looking at four primitive shapes."
  coordinate-system-simple-shapes-p2x1: "For each shape, we will ask ourselves what information is required to specify the location and size (and later color) of that shape and learn how p5 expects to receive that information. In each of the diagrams below, we'll assume a window with a width of 100 pixels and height of 100 pixels."
  coordinate-system-simple-shapes-p3x1: "A "
  coordinate-system-simple-shapes-p3x2: " is the easiest of the shapes and a good place to start. To draw a point, we only need an x and y coordinate."
  coordinate-system-simple-shapes-p4x1: "A "
  coordinate-system-simple-shapes-p4x2: " isn't terribly difficult either and simply requires two points: (x1,y1) and (x2,y2):"
  coordinate-system-simple-shapes-p5x1: "Once we arrive at drawing a "
  coordinate-system-simple-shapes-p5x2: ", things become a bit more complicated. In p5, a rectangle is specified by the coordinate for the top left corner of the rectangle, as well as its width and height."
  coordinate-system-simple-shapes-p6x1: "A second way to draw a rectangle involves specifying the centerpoint, along with width and height. If we prefer this method, we first indicate that we want to use the "
  coordinate-system-simple-shapes-p6x2: " mode before the instruction for the rectangle itself. Note that p5 is case-sensitive."
  coordinate-system-simple-shapes-p7x1: "Finally, we can also draw a rectangle with two points (the top left corner and the bottom right corner). The mode here is "
  coordinate-system-simple-shapes-p7x2: ". Note this example gives the same result on screen as the example above."
  coordinate-system-simple-shapes-p8x1: "Once we have become comfortable with the concept of drawing a rectangle, an "
  coordinate-system-simple-shapes-p8x2: " is a snap. In fact, it is identical to "
  coordinate-system-simple-shapes-p8x3: " with the difference being that an ellipse is drawn where the bounding box of the rectangle would be. The default mode for "
  coordinate-system-simple-shapes-p8x4: " is "
  coordinate-system-simple-shapes-p8x5: ", rather than "
  coordinate-system-simple-shapes-p8x6: "."
  coordinate-system-simple-shapes-p9x1: "Now let's look at what some code with shapes in more complete form, with canvas dimensions of 200 by 200. Note the use of the createCanvas() function to specify the width and height of the canvas."

test-tutorial:

libraries:
  Libraries: "Libraries"
  p5.dom: "p5.dom lets you interact with HTML5 objects beyond the canvas, including video, audio, webcam, input, and text."
  p5.sound: "p5.sound extends p5 with Web Audio functionality including audio input, playback, analysis and synthesis."
  p5.accessibility: "p5.accessibility makes the p5 canvas more accessible to people who are blind and visually impaired."
  Contributed: "Contributed"
  p5.serial1: "p5.serial enables serial communication between devices that support serial (RS-232) and p5 sketches running in the browser. Created by "
  p5.serial2: ", with contributions from "
  p5.serial3: " and "
  p5.collide2D: "p5.collide2D provides tools for calculating collision detection for 2D geometry with p5.js. Created by "
  rita.js: "RiTa.js provides a set of natural language processing objects for generative literature. Created by "
  p5.geolocation: "p5.geolocation provides techniques for acquiring, watching, calculating, and geofencing user locations for p5.js. Created by "
  p5.speech: "p5.speech provides simple, clear access to the Web Speech and Speech Recognition APIs, allowing for the easy creation of sketches that can talk and listen. Created by "
  p5.bots: "With p5.bots you can interact with your Arduino (or other microprocessor) from within the browser. Use sensor data to drive a sketch; use a sketch to drive LEDs, motors, and more! Created by "
  grafica.js: "grafica.js lets you add simple but highly configurable 2D plots to your p5.js sketches. Created by "
  p5.play: "p5.play provides sprites, animations, input and collision functions for games and gamelike applications. Created by "
  p5.gui: "p5.gui generates a graphical user interface for your p5.js sketches. Created by "
  p5.gibber: "p5.gibber provides rapid music sequencing and audio synthesis capabilities. Created by "
  p5.particle: "The Particle and Fountain objects can be used to create data-driven effects that are defined through user structures or JSON input and user-draw functions. Created by "
  p5.scribble: "Draw 2D primitives in a sketchy look. Created by Janneck Wullschleger, based on a port of the original Processing library "
  p5.tiledmap1: "p5.tiledmap provides drawing and helper functions to include maps made with"
  p5.tiledmap2: "in your sketches. Created by "
  p5.dimensions1: "p5.dimensions extends p5.js' vector functions to work in any number of dimensions. Created by "
  p5.dimensions2: " and "
  p5.scenemanager: "p5.SceneManager helps you create sketches with multiple states / scenes. Each scene is a like a sketch within the main sketch. Created by "
  mappa: "Mappa provides a set of tools for working with static maps, tile maps, and geo-data. Useful when building geolocation-based visual representations. Created by "
  p5.func: "p5.func is a p5 extension that provides new objects and utilities for function generation in the time, frequency, and spatial domains. Created by "
  p5.voronoi: "p5.voronoi provides a set of tools to draw and utilize voronoi diagrams in your p5.js sketches. Created by "
  using-a-library-title: "Using a library"
  using-a-library1: "A p5.js library can be any JavaScript code that extends or adds to the p5.js core functionality. There are two categories of libraries. Core libraries ("
  using-a-library2: " and "
  using-a-library3: ") are part of the p5.js distribution, while contributed libraries are developed, owned, and maintained by members of the p5.js community."
  using-a-library4: "To include a library in your sketch, link it into your HTML file, after you have linked in p5.js. An example HTML file might look like this:"
  create-your-own-title: "Create Your Own"
  create-your-own1: "p5.js welcomes libraries contributed by others! Check out the"
  create-your-own2: "libraries tutorial"
  create-your-own3: "for more specifics about how to create one."
  create-your-own4: "If you have created a library and would like to have it included on this page, submit this form!"

community:
  community-title: "커뮤니티"
  community-statement-title: "p5.js 커뮤니티 성명서"
  community-statement1: "p5.js는 기술을 재료로 예술과 디자인을 창조하는데 관심이 있는 커뮤니티입니다."
  community-statement2: "우리는 다양한 성 정체성(gender identity), 젠더 표현(gender expression), 성적 지향(sexual orientation), 인종, 민족성, 언어, 사회성, 크기, 능력, 계급, 종교, 문화, 하위문화, 정치적 성향, 나이, 기술적 숙련도, 직업, 배경을 가진 사람들의 공동체이자 연대입니다. 우리는 당신의 참여를 환영하며 독려합니다. 모든 사람이 우리 커뮤니티에 활발히 참여할만한 시간, 경제적 수단, 능력이 있는 것이 아니라는 점을 알고 있지만요. 우리는 모두 배우는 과정에 있습니다."
  community-statement3: "우리가 좋아하는 해시태그는 #noCodeSnobs (우리는 효율성보다 커뮤니티를 우위에 두니까요), #newKidLove (누구나 언젠가는 초보니까요), #unassumeCore (상대가 어떠한 것을 알고 있다고 섣불리 가정하지 않습니다), and #BlackLivesMatter (말할 필요도 없이 중요한 사실이죠) 입니다."
  in-practice-title: "행동지침:"
  in-practice1: "우리는 잘난체하는 프로그래머들이 아닙니다. 우리는 상대가 이미 어떠한 것을 알고 있다고 섣불리 가정하거나 모든 사람이 반드시 알아야 할 지식이 있다고 생각하지 않습니다. "
  in-practice2: "피드백이 필요한 경우가 있다면 언제든 적극적으로 응합니다."
  in-practice3: "우리는 초심자를 환영하며 타인의 학습을 우선순위에 둡니다. 또한, 우리는 모든 과업을 대할 때 초심자의 열정을 잃지 않습니다. 우리 커뮤니티에서, 초보자는 숙련자만큼이나 중요한 존재입니다. "
  in-practice4: "우리는 모든 형태의 이바지를 적극적으로 알아차리고 인증합니다."
  in-practice5: "우리는 언제나 기꺼이 도움과 안내를 제공합니다."
  in-times-conflict-title: "갈등이 있을때는 우리는:"
  in-times-conflict1: "서로의 생각에 귀 기울입니다. "
  in-times-conflict2: "명확하게 의사를 전달하되, 상대의 감정을 배려합니다. "
  in-times-conflict3: "잘못한 경우에는 잘못을 인정하고, 용서를 구하며, 행동에 대한 책임을 집니다. "
  in-times-conflict4: "우리 자신과 커뮤니티를 향상시키기 위해 지속적으로 노력합니다. "
  in-times-conflict5: "서로 존중하며 개방된 자세를 유지합니다. "
  in-times-conflict6: "모든 사람의 의견을 존중하고 경청합니다. "
  in-times-conflict7: "사려깊고 친절한 태도로 대화합니다."
  in-the-future-title: "미래에는:"
  in-the-future1: "지금이 바로 미래입니다."
  contribute-title: "기여하기"
  contribute1: "우리는 언제나 열정있는 당신의 도움을 환영합니다."
  develop-title: "개발. "
  develop1: "GitHub"
  develop2: "는 코드가 수집되고, 문제나 쟁점들이 문서화되며, 코드 관련 논의가 진행되는 곳입니다. p5.js 개발에 기여하려면 "
  develop3: "개발 튜토리얼"
  develop4: "을 참고하거나, "
  develop5: "당신의 라이브러리를 만들어보세요."
  document-title: "다큐멘테이션. "
  document1: "다큐멘테이션만큼 유용한게 없죠! 현재 도움이 필요한 부분은 "
  document2: "예제를 이전하는 작업"
  document3: ","
  document4: "다큐멘테이션을 추가하는 작업"
  document5: ", 그리고 튜토리얼을 만드는 작업입니다."
  teach-title: "가르치기. "
  teach1: "워크샵, 수업, 친구, 협업자에게 p5.js를 가르치는 것도 좋은 기여 방법입니다. 트위터에서 @p5xjs를 소환하면 당신이 어떠한 수업을 하는지 공유할게요."
  create-title: "만들기. "
  create1: "p5.js는 사용자들에게 영감을 줄 수 있는 작업을 웹사이트 첫 페이지에 게재합니다. 디자이너, 예술가, 코더, 프로그래머- 누구든 좋습니다. 당신이 만든 창의적인 작업을 다음의 메일주소로 제출하세요: "
  create2: "hello@p5js.org"
  create3: "."
  donate-title: "기부하기. "
  donate1: "p5.js는 예술가들에 의해 만들어진 오픈소스 프로젝트로, 사용자들에게 무료로 제공됩니다. p5.js의 개발을 지원하려면, "
  donate2: "프로세싱 파운데이션"
  donate3: "에 기부해 주세요. "
  contributors-conference-title: "기여자 컨퍼런스"
  contributors-conference1: "2015년에, p5.js는 첫 "
  contributors-conference2: "기여자 컨퍼런스"
  contributors-conference3: "를 개최했습니다. 예술가, 디자이너, 개발자, 교육자를 포함한 다수의 사람들이 "
  contributors-conference4: "카네기멜론대학의 Studio for Creative Inquiry"
  contributors-conference5: "에서 만나 p5.js를 더 멋지게 만들기 위한 논의와 활동들을 하였습니다."
  mailing-list-title: "이메일 Mailing list"
  mailing-list-1: "프로세싱 재단으로부터 새소식을 받아보려면, 아래에 이메일 주소를 입력하세요."
  people-title: "People"
  people1: "blah"

books:
  books-title: "Books"

examples:
  Examples: "Examples"
  back-examples: "Back to Examples"
  Structure: "Structure"
  Form: "Form"
  Data: "Data"
  Arrays: "Arrays"
  Control: "Control"
  Image: "Image"
  Color: "Color"
  Math: "Math"
  Simulate: "Simulate"
  Interaction: "Interaction"
  Objects: "Objects"
  Lights: "Lights"
  Motion: "Motion"
  Instance_Mode: "Instance Mode"
  Dom: "DOM"
  Drawing: "Drawing"
  Transform: "Transform"
  Typography: "Typography"
  3D: "3D"
  Input: "Input"
  Advanced_Data: "Advanced Data"
  Sound: "Sound"
  Mobile: "Mobile"
  Hello_P5: "Hello p5"

contributors-conference:
  contributors-conference-title: "p5.js Contributors Conference"
  contributors-conference-date: "May 25-31"
  contributors-conference1: "A diverse group of approximately 30 participants gathered spent a week at the "
  contributors-conference2: ", advancing the code, documentation, and community outreach tools of the p5.js programming environment. Participants came from as far away as Hong Kong, Seattle, Los Angeles,Boston and New York. Most were working professionals in the fields of creative technology, interaction design, and new-media arts, but the group also included a half-dozen undergraduate and graduate students from Carnegie Mellon’s Schools of Art and Architecture."
  contributors-conference-participants-title: "Participants"
  contributors-conference-diversity-title: "Diversity"
  contributors-conference-diversity1: "Alongside technical development, one of the main focuses of this conference was outreach, community, and diversity. The conference began with a panel"
  contributors-conference-diversity2: "Diversity: Seven Voices on Race, Gender, Ability &amp; Class for FLOSS and the Internet"
  contributors-conference-diversity3: ". "
  contributors-conference-diversity4: "Organized by"
  contributors-conference-diversity5: "and"
  contributors-conference-diversity6: ", "
  contributors-conference-diversity7: "the panel took place Tuesday, 25 May 2015 in Kresge Auditorium at Carnegie Mellon University. Speakers included"
  contributors-conference-diversity8: "and"
  contributors-conference-diversity9: "."
  contributors-conference-support-title: "Support"
  contributors-conference-support1: "Our contributor conference took place at the"
  contributors-conference-support2: "at Carnegie Mellon University, an academic laboratory for atypical, anti-disciplinary, and inter-institutional research at the intersections of arts, science, technology, and culture."
  contributors-conference-support3: "This event was made possible by a grant from the"
  contributors-conference-support4: "and generous support from the"
  contributors-conference-support5: "and"
  contributors-conference-support6: "Thank you!"

reference:
  Reference: "Reference"
