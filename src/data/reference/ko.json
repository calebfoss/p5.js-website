{
  "Home": "홈",
  "Download": "다운로드",
  "Start": "시작하기",
  "Reference": "레퍼런스",
  "reference-tagline": "프로세싱의 직관성에 자바스크립트의 강력함을 곱하다*",
  "reference-search": "API 검색",
  "reference-menu-home": "홈",
  "reference-menu-download": "다운로드",
  "reference-menu-get-started": "시작하기",
  "reference-menu-reference": "레퍼런스",
  "reference-menu-libraries": "라이브러리",
  "reference-menu-learn": "배우기",
  "reference-menu-examples": "예제",
  "reference-menu-books": "출판물",
  "reference-menu-community": "커뮤니티",
  "reference-menu-forum": "포럼",
  "reference-description1": "찾는 항목이 없다면, 다음의 페이지를 살펴보세요:",
  "reference-description2": " 또는 ",
  "reference-description3": "오프라인 버전의 레퍼런스는 다음 링크에서 다운받을 수 있습니다: ",
  "reference-description4": "레퍼런스 다운로드",
  "reference-contribute1": "잘못된 부분이나 제안사항이 있다면",
  "reference-contribute2": "언제든 알려주세요",
  "reference-error1": "오타나 버그를 발견했다면",
  "reference-error2": "관련 문서는 이곳에 있습니다: ",
  "reference-error3": "p5.js에 기여하고 싶다면, ",
  "reference-error4": "파일을 수정하고",
  "reference-error5": "에 풀 리퀘스트(pull request) 해주세요!",
  "reference-example": "예제",
  "reference-description": "설명",
  "reference-extends": "확장",
  "reference-parameters": "변수",
  "reference-syntax": "문법",
  "reference-returns": "반환(return)",
  "footer1": "p5.js는 ",
  "footer2": "가 창안하고 협력자 커뮤니티와 함께 개발되었습니다. 지원: 프로세싱 재단 ",
  "footer3": " 과 ",
  "footer4": " 아이덴티티 및 그래픽 디자인:",
  "Libraries": "라이브러리",
  "Learn": "배우기",
  "Examples": "예제",
  "Books": "출판물",
  "Community": "커뮤니티",
  "Contribute": "함께하기",
  "Forum": "포럼",
  "h1": "레퍼런스",
  "Color": "색상",
  "Shape": "도형", 
  "Creating & Reading": "만들기 & 읽기", 
  "Setting": "설정하기", 
  "2D Primitives": "2D 기본 조형", 
  "Attributes": "Attributes",  
  "Curves": "곡선 Curves", 
  "Vertex": "버텍스 Vertex", 
  "3D Models": "3D 모델",  
  "3D Primitives": "3D 기본 조형", 
  "Constants": "상수",  
  "Structure": "구조",  
  "Environment": "환경",  
  "DOM": "DOM", 
  "Rendering": "렌더링",  
  "Transform": "변형(Transform)", 
  "Data": "데이터",  
  "Dictionary": "사전(Dictionary)",  
  "Array Functions": "배열 기능",  
  "Conversion": "변환(Conversion)", 
  "String Functions": "문자열(String) 기능",  
  "Events": "이벤트",  
  "Acceleration": "가속",  
  "Keyboard": "키보드",  
  "Mouse": "마우스", 
  "Touch": "터치", 
  "Image": "이미지",  
  "Loading & Displaying": "로딩 & 디스플레이", 
  "Pixels": "픽셀",  
  "IO": "IO", 
  "Input": "입력(Input)", 
  "Output": "아웃풋", 
  "Table": "테이블", 
  "Time & Date": "날짜 & 시간",  
  "XML": "XML", 
  "Math": "수학", 
  "Calculation": "계산",  
  "Noise": "노이즈", 
  "Trigonometry": "삼각법",  
  "Typography": "타이포그래피", 
  "Font": "폰트", 
  "Lights, Camera": "라이트, 카메라",  
  "Camera": "카메라",  
  "Lights": "라이트"",  
  "Material": "재질(Material)",
  "p5": {
    "background": {
      "description": "background() 함수는 p5.js 캔버스의 배경색을 설정합니다. 배경색의 초기값은 투명입니다. 이 함수는 주로 각 프레임이 시작될 때 화면을 초기화하기 위한 목적으로 draw() 내에서 사용되는데, 배경색을 일회적으로 설정할 경우 setup() 함수 내에서 애니메이션의 첫 프레임의 배경색을 설정하는데 사용되기도 합니다. 색 지정은 RGB, HSB, HSL 세가지 방법으로 할 수 있는데, 모드를 변경하기 위해서는 colorMode() 함수를 이용합니다. 따로 모드 설정을 하지 않는 경우, 색은 RGB로 정의되며 각 숫자의 범위는 0에서 255까지입니다. background()의 괄호 안에 단 한개의 값만 입력하는 것도 가능한데, RGB, RGBA, HEX CSS 모두 사용할 수 있습니다. 단, 투명도를 설정하기 위해서는 반드시 RGBA를 사용해야합니다. 참고로, p5.Color 오브젝트를 통해 배경색을 설정하는 것도 가능합니다. 배경 이미지를 설정하고 싶다면, 레퍼런스의 p5.Image 항목을 참고하세요.",
      "params": ["p5.Color: color() 함수를 통해 만들어진 값",
               "문자열: 색상 문자열, 정수 rgb()나 rgba(), 백분율 rgb()나 rgba(), 3자리 숫자 hex, 6자리 숫자 hex",
               "숫자: 배경색 투명도 (범위 기본값은 0-255이며, 범위는 설정에 따라 다를 수 있음)",
               "숫자: 흑백 채도를 설정함",
               "숫자: 선택한 컬러모드에 따라, red값 혹은 hue값",
               "숫자: 선택한 컬러모드에 따라, green값 혹은 saturation값",
               "숫자: 선택한 컬러모드에 따라, blue값 혹은 brightness값",
               "숫자 배열[]: red, green blud와 투명도를 포함한 배열",
               "p5.Image: loadImage()나 createImage()로 생성된 이미지를 배경 이미지로 설정하는 경우 (스케치 창과 같은 사이즈여야 함)"],
      "returns": "the p5 object"
    },
    "clear": {
      "description": "버퍼 내의 픽셀을 클리어합니다. 본 함수는 createCanvas() 함수로 만들어진 p5.Canvas 오브젝트에만 적용되며, 메인 디스플레이 윈도우에 사용할 수는 없습니다. 메인 그래픽 영역에서와 다르게, createGraphics()를 이용해 생성한 추가 그래픽 영역 내에 있는 픽셀은 완전히 혹은 부분적으로 투명하게 만들 수 있습니다. clear() 함수는 모든 픽셀을 100% 투명하게 만듭니다.",
      "returns": "the p5 object"
    },
    "colorMode": {
      "description": "colorMode()는 p5.js가 색 데이터를 해석하는 방식을 결정합니다. fill(), stroke(), background(), color()의 매개변수의 초기값은 RGB 컬러모드이며, 범위는 0에서 255까지, 즉 colorMode(RGB, 255) 입니다. colorMode(HSB)로 설정하는 경우 HSB 컬러 시스템을 사용할 수 있는데, 초기값은 colorMode(HSB, 360, 100, 100, 1)와 같이 설정됩니다. 컬러모드를 HSL을 설정하는 것도 가능합니다. 참고: 이미 존재하는 컬러 오브젝트들은 자신이 생성되었을 당시의 모드를 기억합니다. 따라서, 이미 존재하는 컬러 오브젝트에 영향을 미치지 않으면서 컬러모드는 바꾸는 것이 가능합니다.",
      "params": ["상수(Constante): RGB (Red/Green/Blue), HSB (Hue/Saturation/Brightness), HSL (Hue/Saturation/Lightness) 중 하나",
      "숫자: 현재 컬러모드에 따라 red 혹은 hue 범위",
      "숫자: 현재 컬러모드에 따라 green 혹은 saturation 범위.",
      "숫자: 현재 컬러모드에 따라 blue 혹은 brightness/lightness 범위.",
      "숫자: 투명도 범위"],
      "returns": "the p5 object"
    },
    "fill": {
      "description": "도형을 칠할 색을 선택합니다. 예를 들어 fill(204, 102, 0)을 실행하면 해당되는 모든 도형들의 색이 주황색으로 바뀝니다. 색 지정은 선택된 colorMode() 값에 따라서 RGB나 HSB로 할 수 있습니다. 초기 컬러모드는 RGB이며 R, G, B 각 값의 범위는 0-255 사이입니다. 투명도 역시 초기값의 범위는 0-255 입니다. RGB, RGBA, Hex CSS 컬러값이나 색 이름과 같이 한개의 문자열을 입력하는 것도 가능합니다. 이러한 경우에는 두번째 변수로 투명도를 입력하는 것이 불가능하므로, RGBA를 사용해야 합니다. 참고로, p5의 Color 오브젝트를 사용해 색을 지정하는 것도 가능합니다.",
      "params": ["숫자: 선택한 컬러모드와 색상값 범위에 따라, red값 혹은 hue값",
      "숫자: 선택한 컬러모드와 색상값 범위에 따라, green값 혹은 saturation값",
      "숫자: 선택한 컬러모드와 색상값 범위에 따라, blue값 혹은 brightness값",
      "숫자: 배경색 투명도 (범위 기본값은 0-255이며, 범위는 설정에 따라 다를 수 있음)",
      "문자열: 문자열로 된 색상값",
      "숫자: 흑백 채도를 설정함",
      "숫자 배열[]: red, green blue와 투명도를 포함한 배열",
      "p5.Color" ],
      "returns": "the p5 object"
    },
    "noFill": {
      "description": "도형에 색을 채우지 않도록 설정합니다. noStroke() 과  noFill()을 동시에 사용하면, 화면에 아무것도 나타나지 않습니다.",
      "returns": "the p5 object"
    },
    "noStroke": {
      "description": "선이나 윤곽선을 그리지 않도록 설정합니다. noStroke() 과  noFill()을 동시에 사용하면, 화면에 아무것도 나타나지 않습니다.",
      "returns": "the p5 object"
    },
    "stroke": {
      "description": "선을 그리거나 도형 윤곽선 색을 설정합니다. 색 지정은 선택된 colorMode() 값에 따라서 RGB나 HSB로 할 수 있습니다. 초기 컬러모드는 RGB이며 R, G, B 각 값의 범위는 0-255 사이입니다. 투명도 역시 초기값의 범위는 0-255 입니다. RGB, RGBA, Hex CSS 컬러값이나 색 이름과 같이 한개의 문자열을 입력하는 것도 가능합니다. 이러한 경우에는 두번째 변수로 투명도를 입력하는 것이 불가능하므로, RGBA를 사용해야 합니다. 참고로, p5의 Color 오브젝트를 사용해 색을 지정하는 것도 가능합니다.",
      "params": ["숫자: 선택한 컬러모드와 색상값 범위에 따라, red값 혹은 hue값",
      "숫자: 선택한 컬러모드와 색상값 범위에 따라, green값 혹은 saturation값",
      "숫자: 선택한 컬러모드와 색상값 범위에 따라, blue값 혹은 brightness값",
      "숫자: 배경색 투명도 (범위 기본값은 0-255이며, 범위는 설정에 따라 다를 수 있음)",
      "문자열: 문자열로 된 색상값",
      "숫자: 흑백 채도를 설정함",
      "숫자 배열[]: red, green blud와 투명도를 포함한 배열",
      "p5.Color"],
      "returns": "the p5 object"
    },
    "arc": {
      "description": "화면에 호를 그립니다. 모드 선택 없이 x, y, w, h, 시작, 끝만을 지정하면 호는 열린 파이조각 형태로 그려집니다. 모드 변수를 설정하기에 따라, 호는 각각 반원(OPEN), 닫혀진 반원(CHORD), 닫혀진 파이조각(PIE) 형태로 그려집니다. ellipseMode() 함수를 이용하면 시작점을 변경할 수 있습니다. 본 함수를 이용해 시작점을 0, 끝점을 TWO_PI로 설정해 원 전체를 그리려 시도하면, 시작점과 끝점이 같기 때문에 아무것도 그려지지 않습니다. 원 전체를 그릴때는 ellipse() 함수를, 원 일부를 그릴 때는 arc() 함수를 이용하세요.",
      "params": ["숫자: 호를 포함하는 원의 x 좌표",
      "숫자: 호를 포함하는 원의 y 좌표",
      "숫자: 호를 포함하는 원의 너비",
      "숫자: 호를 포함하는 원의 높이",
      "숫자: 시작점의 각도로, 호도(radians)로 설정",
      "숫자: 끝점의 각도로, 호도(radians)로 설정",
      "상수: 호를 그리는 방식을 설정함. CHORD, PIEC, OPEN 중 선택. 필수 변수는 아니며 필요한 경우에만 사용하면 됨.",
      "숫자: WEBGL 모드에서만 사용하며, 호의 윤곽선을 구성하는 점(vertices)의 숫자를 지정한다. 필수 변수는 아니며 필요한 경우에만 사용하면 됨. 초기값은 25이다."],
      "returns": "the p5 object"
    },
    "ellipse": {
      "description": "스크린에 타원을 그립니다. 너비와 높이가 같은 경우에는 원이 그려집니다. 첫 두 변수는 위치를, 세번째 네번째 변수는 도형의 너비와 높이를 설정합니다. 높이를 설정하지 않으면 너비 값이 높이로도 사용됩니다. 너비나 높이를 음수로 입력하면, 자동적으로 절대값이 사용됩니다. 원 시작점을 원의 중심으로 둘지의 여부는 ellipseMode() 함수를 이용해 변경할 수 있습니다.",
      "params": ["숫자: 원의 x 좌표",
      "숫자: 원의 y 좌표",
      "숫자: 원의 너비",
      "숫자: 원의 높이",
      "정수: 원을 몇 개의 부분으로 나누어 그릴 것인지 지정 (WEGBL 모드용)"],
      "returns": "the p5 object"
    },
    "circle": {
      "description": "화면에 원을 그립니다. 원은 단순한 단일폐곡선으로, 중심점으로부터 같은 좌표에 위치한 점들의 집합입니다. 원은 너비와 높이가 동일한 타원으로 ellipse() 함수를 이용해 그리는 것도 가능합니다. 이 경우 타원의 너비와 높이는 원의 지름과 동일합니다. 본 함수의 첫번째 두번째 변수는 원의 중심점을, 세번째 변수는 지름을 설정합니다.",
      "params": ["숫자: 원 중심점의 x 좌표",
      "숫자: 원 중심점의 y 좌표",
      "숫자: 원의 지름"],
      "returns": "the p5 object"
    },
    "line": {
      "description": "화면에 선, 즉 두 점을 연결하는 곧은 선을 그립니다. line() 함수에 4개의 변수를 입력하는 경우 이차원 평면에 선을 그립니다. 선의 색을 지정하려면 stroke() 함수를 이용하세요. 선은 면은 가지고 있지 않기 때문에 면 색을 채우는 fill() 함수는 적용되지 않습니다. 선의 굵기 초기값은 1픽셀이며 이를 변경하기 위해서는 strokeWeight() 함수를 이용합니다.",
      "params": ["숫자: 첫번째 점의 x 좌표",
      "숫자: 첫번째 점의 y 좌표",
      "숫자: 두번째 점의 x 좌표",
      "숫자: 첫번째 점의 y 좌표",
      "숫자: 첫번째 점의 z 좌표",
      "숫자: 두번째 점의 z 좌표"],
      "returns": "the p5 object"
    },
    "point": {
      "description": "Dibuja un punto, una coordenada en el espacio de un pixel de dimensión. El primer parámetro es la coordenada horizontal del punto, el segundo valor es la coordenada vertical del punto. El color del punto es determinado por el trazado actual con la función stroke().",
      "params": ["숫자: x 좌표",
      "숫자: y 좌표",
      "숫자: z 좌표 (WEBGL 모드 사용시)"],
      "returns": "the p5 object"
    },
    "quad": {
      "description": "네모꼴을 그립니다. 네모꼴은 4개의 변을 가진 다각형으로, 직사각형과 유사해 보이지만 직사각형과 다르게 변 사이의 각도가 90도로 고정되어 있지 않습니다. 첫 한 쌍의 변수는 첫 꼭지점을 설정하며 뒤따르는 다른 쌍의 변수들은 시계방향이나 반시계방향으로 차례대로 꼭지점을 설정합니다. z 변수는 WEBGL모드에서 quad() 함수를 사용하는 경우에만 적용됩니다.",
      "params": ["숫자: 첫번째 꼭지점의 x 좌표",
      "숫자: 첫번째 꼭지점의 y 좌표",
      "숫자: 두번째 꼭지점의 x 좌표",
      "숫자: 두번째 꼭지점의 y 좌표",
      "숫자: 세번째 꼭지점의 x 좌표",
      "숫자: 세번째 꼭지점의 y 좌표",
      "숫자: 네번째 꼭지점의 x 좌표",
      "숫자: 네번째 꼭지점의 y 좌표",
      "숫자: 첫번째 꼭지점의 z 좌표",
      "숫자: 두번째 꼭지점의 z 좌표",
      "숫자: 세번째 꼭지점의 z 좌표",
      "숫자: 네번째 꼭지점의 z 좌표"],
      "returns": "the p5 object"
    },
    "rect": {
      "description": "화면에 직사각형을 그립니다. 직사각형은 변이 네개이면서 모든 각도가 90도인 도형입니다. 첫 두 변수는 왼쪽 위 꼭지점의 좌표를, 세번째 변수는 사각형의 너비를, 네번째 변수는 높이를 설정합니다. rectMode() 함수로 사각형 모드를 변경하는 경우 변수 입력값들은 다르게 해석됩니다. 다섯번째, 여섯번째, 일곱번째, 여덟번째 변수를 입력하는 경우 각각의 숫자는 차계로 왼쪽 위, 오른쪽 위, 오른쪽 아래, 왼쪽 아래 모퉁이의 각도를 지정합니다. 각도 변수를 누락하는 경우 앞서 지정한 각도 값이 사용됩니다.",
      "params": ["숫자: 직사각형의 x 좌표값",
      "숫자: 직사각형의 y 좌표값",
      "숫자: 직사각형의 너비",
      "숫자: 직사각형의 높이",
      "숫자: 왼쪽 위 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력.",
      "숫자: 오른쪽 위 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력.",
      "숫자: 오른쪽 아래 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력.",
      "숫자: 왼쪽 아래 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력.",
      "정수: x 방향의 segment 수 (WEBGL 모드에서 사용)",
      "정수: y 방향의 segment 수 (WEBGL 모드에서 사용)"],
      "returns": "the p5 object"
    },
    "square": {
      "description": "화면에 정사각형을 그립니다. 정사각형은 변이 네개이면서 모든 각도가 90도이며 네 변의 길이가 같은 도형입니다. 정사격형은 사실상 rect() 함수로도 그릴 수 있는 도형으로, 너비와 높이가 모두 s로 같은 직사각형인 셈입니다. 첫 두 변수는 왼쪽 위 꼭지점의 좌표를, 세번째 변수는 한 변의 길이를 설정합니다. rectMode() 함수로 사각형 모드를 변경하는 경우 변수 입력값들은 다르게 해석됩니다. 네번째, 다섯번째, 여섯번째, 일곱번째 변수를 입력해 왼쪽 위, 오른쪽 위, 오른쪽 아래, 왼쪽 아래 모퉁이의 각도를 각각 지정할 수 있습니다. 각도 변수를 누락하는 경우 앞서 지정한 각도 값이 사용됩니다.",
      "params": ["숫자: 정사각형의 x 좌표값",
      "숫자: 정사각형의 y 좌표값",
      "숫자: 정사각형 한 변의 길이",
      "숫자: 왼쪽 위 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력.",
      "숫자: 오른쪽 위 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력.",
      "숫자: 오른쪽 아래 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력.",
      "숫자: 왼쪽 아래 모퉁이 각도 값. 필수 변수가 아니므로 필요한 경우에만 입력."],
      "returns": "the p5 object"
    },
    "createCanvas": {
      "description": "캔버스를 생성하고 픽셀 단위로 크기를 설정합니다. createCanvas()는 setup() 시작시에 한번만 실행되어야 합니다. createCanvas()를 1번 이상 호출하면 스케치가 예기치 못한 반응을 보일 수 있습니다. 2개 이상의 캔버스가 필요하다면 createGraphics()를 이용하세요. 설정한 캔버스 사이즈는 시스템 변수인 width와 height에 각각 저장됩니다. createCanvas() 자체를 생략하면 스케치는 디폴트 사이즈인 100x100픽셀이 됩니다. 캔버스의 위치를 정하는 다른 방식들을 알고싶다면, 위키 페이지의 'positioning the canvas'를  참고하세요.",
      "params": ["숫자: 캔버스의 너비",
      "숫자: 캔버스의 높이",
      "상수: P2D 또는 WEBGL"]
    },
    "loadImage": {
      "description": "설정한 경로에서 이미지를 불러오고 p5.Image를 생성합니다. 이미지를 불러온 후 바로 렌더링이 가능하지 않은 경우도 있습니다. 이를 피하려면 loadImage()를 preload()에서 호출하거나, 이미지가 준비된 후 다른 명령을 하도록 하는 콜백 함수를 이용하세요. 이미지 경로는 스케치에 링크된 HTML 파일을 기준으로 상대 경로를 사용합니다. URL이나 원격 경로를 이용하면 브라우저의 보안 설정에 따라 이미지를 불러오는데에 문제가 생길 수 있습니다.",
      "params": ["문자열: 불러올 이미지 경로",
      "함수(p5.Image): 이미지를 불러온 후 호출할 함수",
      "함수(Event): 이미지 불러오기를 실패하는 경우에 호출할 함수"]
    },
    "image": {
      "description": "p5.js 캔버스에 이미지를 배치합니다. 본 함수를 사용하는 몇가지 방법을 소개하자면 다음과 같습니다. (1) 가장 간단한 방법은 img, x, y 세 개의 변수를 사용하는 방법입니다. x, y는 이미지의 위치를 지정합니다. (2) 이미지의 크기를 설정하려면 img, x, y와 더불어 이미지의 너비와 높이를 설정하는 두개의 변수를 추가로 사용합니다. (3) 여덟개의 변수를 사용하는 방법입니다. 먼저, 각 변수들을 구별하기 위해 p5.js에서 사용하는 용어를 배워봅시다. 첫번째 용어는 '목적지 사각형(destination rectagle)로, dx, dy 등의 변수가 이에 해당합니다. 두번째 용어는 '원본 이미지(source image)'로, sx, sy등의 변수가 이에 해당합니다. '원본 이미지'의 크기를 설정하면 해당 이미지의 일부만을 디스플레이할 때 유용합니다. 자세한 사항은 아래 도식을 참고하세요.",
      "params": ["p5.Image, p5.Element: 디스플레이할 이미지",
      "숫자: 왼쪽 위 모서리의 x 좌표",
      "숫자: 왼쪽 위 모서리의 y 좌표",
      "숫자: 이미지 너비 설정",
      "숫자: 이미지 높이 설정",
      "숫자: 원본 이미지를 배치할 목적지 사각형의 x 좌표",
      "숫자: 원본 이미지를 배치할 목적지 사각형의 y 좌표",
      "숫자: 목적지 사각형의 너비",
      "숫자: 목적지 사각형의 높이",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 x좌표",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 y좌표",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 너비",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 높이"]
    }
  },
  "p5.Image": {
    "loadPixels": {
      "description": "blah",
      "params": ["Numero: blah",
                 "Numero: blah"],
      "returns": "TODO"
    }
  },
  "p5.Element": {
    "description": "Clase base para todos los elementos añadidos al bosuqejo, incluyendo lienzo, buffers de gráficas, y otros elementos HTML. Los métodos en azul están incluidos en la funcionalidad base, los métodos en marrón son añadidos con la biblioteca p5.dom. No se ejecutan directamente, pero los objetos p5.Element son creados llamando a las funciones createCanvas(), createGraphics(), o en la biblioteca p5.dom, createDiv, createImg, createInput, etc.",
    "params": ["String: node DOM envolvente.",
    "Objeto: puntero a instancia p5."],
    "returns": "TODO"
  }
}
