{
  "Home": "홈",
  "Download": "다운로드",
  "Start": "시작하기",
  "Reference": "레퍼런스",
  "reference-tagline": "프로세싱의 직관성에 자바스크립트의 강력함을 곱하다*",
  "reference-search": "API 검색",
  "reference-menu-home": "홈",
  "reference-menu-download": "다운로드",
  "reference-menu-get-started": "시작하기",
  "reference-menu-reference": "레퍼런스",
  "reference-menu-libraries": "라이브러리",
  "reference-menu-learn": "배우기",
  "reference-menu-examples": "예제",
  "reference-menu-books": "출판물",
  "reference-menu-community": "커뮤니티",
  "reference-menu-forum": "포럼",
  "reference-description1": "찾는 항목이 없다면, 다음의 페이지를 살펴보세요:",
  "reference-description2": " 또는 ",
  "reference-description3": "오프라인 버전의 레퍼런스는 다음 링크에서 다운받을 수 있습니다: ",
  "reference-contribute1": "잘못된 부분이나 제안사항이 있다면",
  "reference-contribute2": "언제든 알려주세요",
  "reference-error1": "오타나 버그를 발견했다면",
  "reference-error2": "관련 문서는 이곳에 있습니다: ",
  "reference-error3": "p5.js에 기여하고 싶다면, ",
  "reference-error4": "파일을 수정하고",
  "reference-error5": "에 풀 리퀘스트(pull request) 해주세요!",
  "reference-example": "예제",
  "reference-description": "설명",
  "reference-extends": "확장",
  "reference-parameters": "변수",
  "reference-syntax": "문법",
  "reference-returns": "반환",
  "footer1": "p5.js는 ",
  "footer2": "가 창안하고 협력자 커뮤니티와 함께 개발되었습니다. 지원: 프로세싱 재단 ",
  "footer3": " 과 ",
  "footer4": " 아이덴티티 및 그래픽 디자인:",
  "Libraries": "라이브러리",
  "Learn": "배우기",
  "Examples": "예제",
  "Books": "출판물",
  "Community": "커뮤니티",
  "Contribute": "함께하기",
  "Forum": "포럼",
  "h1": "레퍼런스",
  "Color": "색상",
  "Shape": "도형", 
  "Creating & Reading": "만들기 & 읽기", 
  "Setting": "설정하기", 
  "2D Primitives": "2D 기본 조형", 
  "Attributes": "설정 속성",  
  "Curves": "곡선", 
  "Vertex": "꼭지점", 
  "3D Models": "3D 모델",  
  "3D Primitives": "3D 기본 조형", 
  "Constants": "상수",  
  "Structure": "구조",  
  "Environment": "환경 설정",  
  "DOM": "DOM", 
  "Rendering": "렌더링",  
  "Transform": "변형", 
  "Data": "데이터",  
  "Dictionary": "사전",  
  "Array Functions": "배열 기능",  
  "Conversion": "변환", 
  "String Functions": "문자열 기능",  
  "Events": "이벤트",  
  "Acceleration": "가속도",  
  "Keyboard": "키보드",  
  "Mouse": "마우스", 
  "Touch": "터치", 
  "Image": "이미지",  
  "Loading & Displaying": "불러오기 & 보이기", 
  "Pixels": "픽셀",  
  "IO": "입력 & 출력", 
  "Input": "입력", 
  "Output": "출력", 
  "Table": "테이블", 
  "Time & Date": "날짜 & 시간",  
  "XML": "XML", 
  "Math": "수학", 
  "Calculation": "계산",  
  "Noise": "노이즈", 
  "Trigonometry": "삼각법",  
  "Typography": "타이포그래피", 
  "Font": "폰트", 
  "Lights, Camera": "라이트, 카메라",  
  "Camera": "카메라",  
  "Lights": "라이트",  
  "Material": "재질(Material)", 
  "p5": {
      
      
//Color > Creating & Reading
      
   "alpha": {
      "description": "픽셀 배열로부터 알파값을 추출합니다.",
      "params": ["p5.Color|숫자 배열[]|문자열: p5.Color 객체, 색상 요소 또는 CSS 색상"],
      "returns": "알파값"
    },
    "blue": {
      "description": "색상 또는 픽셀 배열로부터 파랑색값 추출합니다.",
      "params": ["p5.Color 객체, 색상 요소, CSS 색상"],
      "returns": "파랑색값"
    },
    "brightness": {
      "description": "색상 또는 픽셀 배열로부터 HSB 밝기값 추출합니다.",
      "params": ["p5.Color 객체, 색상 요소, CSS 색상"],
      "returns": "밝기값"
    },
    "color": {
      "description": "색상 함수를 이용해 색상 데이터의 매개변수를 저장해보세요. 이 때, 매개변수는 colorMode()의 설정에 따라 RGB 또는 HSB 값으로 처리됩니다. 기본 모드인 RGB값은 0부터 255까지이며, 따라서 color(255,204,0)와 같은 함수는 밝은 노랑색을 반환하게 됩니다. <br><br>         만약에 color() 함수에 매개변수가 1개만 적히면, 회색 음영(grayscale)값으로 처리됩니다. 여기에 추가되는 두번째 변수는 투명도를 설정할 수 있는 알파값으로서 처리됩니다. 세번째 변수가 추가되었을 때 비로소 RGB나 HSB값으로 처리되지요. RGB나 HSB값을 정하는 3개의 변수가 존재할 때 추가되는 네번째 변수는 알파값으로 적용됩니다. <br><br> 나아가, p5는 RGB, RGBA, Hex CSS 색상 문자열과 모든 색상명 문자열 역시 지원합니다. 그 경우, 알파값은 괄호 내 2번째 매개변수 추가를 통해서가 아닌, RGBA 형식에 따라 지정될 수 있습니다.",
      "params": ["숫자: 흑과 백 사이의 값 지정",
      "숫자: 현재 색상 범위(기본값: 0-255)에 대한 알파값)",
      "숫자: 현재 색상 범위 내 빨강색(R) 또는 색조값 지정",
      "숫자: 현재 색상 범위 내 파랑색(B) 또는 색조값 지정",
      "문자열: 색상 문자열",
      "숫자[]: RGB 및 알파값을 포함한 숫자열"],
      "returns": "색상 결과"
    },

    "green": {
      "description": "색상 또는 픽셀 배열로부터 초록색값 추출합니다.",
      "params": ["p5.Color 객체, 색상 요소, CSS 색상"],
      "returns": "초록색값"
    },
    "hue": {
      "description": "색상 또는 픽셀 배열로부터 색조를 추출합니다. 색조는 HSB와 HSL상 모두 존재합니다. 이 함수는 HSB 색상 객체를 사용할 경우(또는 HSB 색상 모드로 지정된 픽셀 배열을 사용할 경우) HSB로 표준화된 색조 값을 반환합니다. 기본값으로는 HSL로 표준화된 색조를 반환합니다. (단, 최대 색조를 별도 지정한 경우 다른 값을 반환합니다.)",
      "params": ["객체, 색상 요소 또는 CSS 색상"],
      "returns": "색조"
    },
    "lerpColor": {
      "description": "두 가지 색상을 혼합하고, 그 사이에 존재하는 제 3의 색상을 찾습니다. 여기서 amt 매개변수는 두 개의 값 사이를 선형적으로 보간합니다. 예를 들어, 0.0은 첫 번째 값과 동일한 색상값을, 0.1은 첫 번째 값에 매우 가까운 색상값을, 0.5는 두 값 사이의 중간 색상값을 나타내는 식입니다. 이 때, 0 미만의 값은 0으로, 1이상의 값은 1로 자동 변환됩니다. 이 점에서 lerpColor()는 lerp()와 다르게 작동하는 셈인데, 이처럼 lerpColor()는 색상값을 0과 1사이로 조정하여 지정된 범위를 벗어난 색상 생성을 방지합니다. 또한, 색상이 보간되는 방식은 현재 지정된 색상 모드에 따라 달라집니다.",
      "params": ["이 색상으로부터 선형 보간",
      "이 색상을 향해 선형 보간",
      "숫자: 0과 1 사이의 숫자"],
      "returns": "p5.Color: 선형적으로 보간된 색상"},
    "lightness": {
      "description": "색상 또는 픽셀 배열로부터 HSL 명도를 추출합니다.",
      "params": ["p5.Color|숫자 배열[]|문자열: p5.Color 객체, 색상 요소 또는 CSS 색상"],
      "returns": "숫자: 명도"
    },
    "red": {
      "description": "색상 또는 픽셀 배열로부터 빨강색값 추출합니다.",
      "params": ["p5.Color|숫자 배열[]|문자열: p5.Color 객체, 색상 요소 또는 CSS 색상"],
      "returns": "숫자: 빨강색값"
    },
    "saturation": {
      "description": "색상 또는 픽셀 배열로부터 채도값 추출합니다. 채도값은 HSB와 HSL에서 각각 다르게 측정됩니다. 이 함수는 HSL 채도를 기본값으로 제공합니다. 하지만, HSB 색상 객체가 제공 될 때 (또는 색상 모드가 HSB이면서 픽셀 배열이 제공될 때) HSB 채도값을 반환합니다.",
      "params": ["p5.Color|숫자 배열[]|문자열: p5.Color 객체, 색상 요소 또는 CSS 색상"],
      "returns": "숫자: 채도값"
    },
          
      
//Color > Setting
      
      
    "background": {
      "description": "background() 함수는 p5.js 캔버스의 배경색을 설정합니다. 배경색의 기본값은 투명입니다. 이 함수는 주로 draw() 함수 안에 위치하며, 매 프레임마다 윈도우 화면을 초기화하기 위해 사용됩니다. 하지만, 애니메이션의 첫 프레임 배경을 지정하거나 배경색을 최초 한번만 지정할 경우, setup() 함수 안에 쓰이기도 합니다. <br> 색상은 현재 색상 모드(colorMode)에 따라 RGB, HSB, 또는 HSL값으로 지정됩니다. (기본값으로 제공되는 색상 모드는 RGB이고, 그 색상 범위는 0부터 255까지 해당합니다.) 알파값의 기본 제공 범위 역시 0부터 255까지입니다.<br> 단일한 문자열 인수에 대해 RGB, RGBA, Hex CSS 색상 문자열과 더불어 명명된 모든 색상 문자열이 지원됩니다. 단, 투명도인 알파값을 설정하기 위해서는 반드시 RGBA를 사용해야합니다. <br> p5.Color 객체를 통해 배경색을 설정할 수 있습니다. <br> p5.Image를 통해 배경 이미지를 설정할 수 있습니다.",
      "params": ["p5.Color: color() 함수로 생성된 모든 값",
               "문자열, 지원되는 문자열 형식: 색상 문자열, 정수의 rgb()나 rgba(), 백분율의 rgb()나 rgba(), 3자리 숫자의 hex, 6자리 숫자의 hex",
               "숫자: 현재 색상 범위에 따른 배경색 투명도 (기본값은 0-255) (선택 사항)",
               "숫자: 흑과 백 사이의 값 지정",
               "숫자: 빨강색값 또는 색조값 (현재 색상 모드에 따라 상이),
               "숫자: 초록색값 또는 채도값 (현재 색상 모드에 따라 상이)",
               "숫자: 파랑색값 또는 밝기값 (현재 색상 모드에 따라 상이)",
               "숫자 배열[]: 빨강색값, 초록색값, 파랑색값, 알파값을 포함한 배열",
               "p5.Image: loadImage()나 createImage()로 생성된 이미지를 배경 이미지로 설정하는 경우 (스케치 화면과 반드시 동일한 사이즈일 것)"],
      "returns": "p5 객체"
    },
    "clear": {
      "description": "버퍼에 있는 픽셀들을 클리어하는 함수로, 오직 캔버스만 클리어하게 됩니다. createVideo()나 createDiv()와 같은, createX()류의 메소드로 지정된 객체들을 제거하진 않습니다. 메인 그래픽이 아닌, createGraphics()로 생성된 부가적인 그래픽의 경우, 그 전체 또는 일부를 투명하게 처리할 수 있습니다. 이 함수는 모든 픽셀을 100% 투명하게 만듭니다.",
      "returns": "p5 객체"
    },
    "colorMode": {
      "description": "colorMode()는 p5.js가 색상 데이터를 해석하는 방식을 결정합니다. 기본값으로, fill(), stroke(), background(), color()의 매개변수는 RGB 색상 모드에서 처리되며, 그 범위는 0부터 255까지입니다. 이 기본값은 colorMode(RGB, 255)와 동일한 효과를 지닙니다. colorMode(HSB)로 설정을 변경하면 HSB 색상 시스템을 사용할 수 있습니다. HSB 색상 시스템은 그 기본값으로 colorMode(HSB, 360, 100, 100, 1)와 같이 설정됩니다. 색상 모드는 HSL로도 설정가능합니다. <br>참고: 모든 색상 객체들은 생성 당시에 지정된 색상 모드를 반영합니다. 따라서, 이미 생성된 색상 객체 중 일부에만 적용되는 색상 모드를 지정할 수도 있습니다.",
      "params": ["상수: RGB(빨강Red/초록Green/파랑색Blue), HSB(색조Hue/채도Saturation/밝기Brightness), HSL(색조Hue/채도Saturation/명도Lightness) 중 하나",
      "숫자: 모든 값들의 범위 (선택 사항)",
      "숫자: 현재 지정된 색상 모드의 색상 범위에 따른 빨강색값 또는 색조값",
      "숫자: 현재 지정된 색상 모드의 색상 범위에 따른 초록색값 또는 채도값",
      "숫자: 알파값의 범위 (선택 사항)"],
      "returns": "p5 객체"
    },
    "fill": {
      "description": "도형의 면을 채울 색상을 지정합니다. 예를 들어, fill(204, 102, 0) 함수를 실행하면, 이 명령어 다음에 그려진 모든 도형들이 주황색으로 칠해집니다. 이 때, 색상값은 colorMode()로 지정된 현재의 색상 모드에 따라 RGB 또는 HSB로 지정됩니다. (기본값으로 제공되는 색상 모드는 RGB이고, 그 색상 범위는 0부터 255까지 해당합니다.) 알파값의 기본 제공 범위 역시 0부터 255까지입니다. <br>단일한 문자열 인수에 대해 RGB, RGBA, Hex CSS 색상 문자열과 더불어 명명된 모든 색상 문자열이 지원됩니다. 단, 투명도인 알파값을 설정하기 위해서는 반드시 RGBA를 사용해야합니다.",
      "params": ["숫자: 현재 지정된 색상 모드의 색상 범위에 따른 빨강색값 또는 색조값",
      "숫자: 현재 지정된 색상 모드의 색상 범위에 따른 초록색값 또는 채도값",
      "숫자:현재 지정된 색상 모드의 색상 범위에 따른 파랑색값 또는 밝기값",
      "숫자: (선택 사항)",
      "문자열: 색상 문자열",
      "숫자: 회색값",
      "숫자 배열[]: 색상의 빨강색값, 초록색값, 파랑색값, 그리고 알파값을 포함한 배열",
       "p5.Color: 면채우기 색상" ],
      "returns": "p5 객체"
    },
    "noFill": {
      "description": "도형에 색을 채우지 않도록 설정합니다. noStroke() 과  noFill()을 동시에 사용하면, 화면에 아무것도 나타나지 않습니다.",
      "returns": "p5 객체"
    },
    "noStroke": {
      "description": "선이나 윤곽선을 그리지 않도록 설정합니다. noStroke() 과  noFill()을 동시에 사용하면, 화면에 아무것도 나타나지 않습니다.",
      "returns": "p5 객체"
    },
    "stroke": {
      "description": "그려질 선 또는 도형의 테두리 색상을 설정합니다. 이 때, 색상값은 colorMode()로 지정된 현재의 색상 모드에 따라 RGB 또는 HSB로 지정됩니다. (기본값으로 제공되는 색상 모드는 RGB이고, 그 색상 범위는 0부터 255까지 해당합니다.) <br>단일한 문자열 인수에 대해 RGB, RGBA, Hex CSS 색상 문자열과 더불어 명명된 모든 색상 문자열이 지원됩니다. 단, 투명도인 알파값을 설정하기 위해서는 반드시 RGBA를 사용해야합니다.<br> p5.Color 객체를 통해 선의 색상을 설정할 수 있습니다.",
      "params": ["숫자: 현재 지정된 색상 모드의 색상 범위에 따른 빨강색값 또는 색조값",
      "숫자: 현재 지정된 색상 모드의 색상 범위에 따른 초록색값 또는 채도값",
      "숫자:현재 지정된 색상 모드의 색상 범위에 따른 파랑색값 또는 밝기값",
      "숫자: (선택 사항)",
      "문자열: 색상 문자열",
      "숫자: 회색값",
      "숫자 배열[]: 색상의 빨강색값, 초록색값, 파랑색값, 그리고 알파값을 포함한 배열",
      "p5.Color: 선의 색상"],
      "returns": "p5 객체"
    },
      
      
// Shape > 2D Primitives
      
      
    "arc": {
      "description": "화면에 호, 즉 아치형 선을 그립니다. x좌표, y좌표, w(너비), h(높이), 시작점, 끝점을 지정하면 호는 열린 파이 조각의 형태로 그려집니다. 모드 변수를 설정하기에 따라, 호는 각각 반원(OPEN), 닫힌 반원(CHORD), 닫힌 파이 조각(PIE) 형태로 그려집니다. ellipseMode() 함수를 이용하면 시작점을 변경할 수 있습니다. 만약 원 하나를 그리기 위해 arc()의 시작점을 0으로, 끝점을 TWO_PI으로 설정할 경우, 시작점과 끝점이 동일하여 아무것도 그려지지 않습니다. 원을 그릴 때는 ellipse() 함수를, 원의 일부를 그릴 때는 arc() 함수를 이용하세요.",
      "params": ["숫자: 호를 포함하는 원의 x좌표",
      "숫자: 호를 포함하는 원의 y좌표값",
      "숫자: 호를 포함하는 원의 너비값",
      "숫자: 호를 포함하는 원의 높이값",
      "숫자: 부채각(radians)에 따른, 호의 시작점 각도값",
      "숫자: 부채각(radians)에 따른, 호의 끝점 각도값",
      "상수: 호를 그리는 방식들로, CHORD, PIEC, OPEN 중 선택 가능 (선택 사항)",
      "숫자: WebGL 모드를 위한 선택적 변수로, 호의 테두리를 구성하는 꼭지점 개수를 지정. 기본값은 25. (선택 사항)"],
      "returns": "p5 객체"
    },
    "ellipse": {
      "description": "화면에 타원을 그립니다. 너비와 높이가 동일한 값으로 지정될 경우, 원이 그려집니다. 처음 두 변수는 각각 타원의 x좌표와 y좌표를, 3번째와 4번째 변수는 각각 타원의 너비와 높이를 지정합니다. 높이값 입력을 생략할 경우, 너비값이 높이값으로 동일하게 적용됩니다. 너비나 높이에 음수로 입력해도 그 절대값이 반영됩니다. ellipseMode() 함수를 이용하면 타원의 시작점을 원의 중심으로 지정할 지의 여부를 결정할 수 있습니다.",
      "params": ["숫자: 타원의 x좌표",
      "숫자: 타원의 y좌표값",
      "숫자: 타원의 너비값",
      "숫자: 타원의 높이값",
      "정수: 타원을 몇 개의 부분으로 나누어 그릴 것인지 지정 (WebGL 모드용)"],
      "returns": "p5 객체"
    },

    "line": {
      "description": "화면에 선분, 즉 두 점을 연결하는 곧은 선을 그립니다. line() 함수에 4개의 변수를 입력하여 이차원 평면에 선을 그릴 수 있습니다. stroke() 함수를 사용해 선의 색상을 지정할 수 있습니다. 선은 면을 갖지 않으므로, 면채우기 함수인 fill()은 적용되지 않습니다. 기본값으로 제공되는 선의 두께는 1픽셀이며, 이를 변경하기 위해 strokeWeight() 함수를 사용할 수 있습니다.",
      "params": ["숫자: 1번째 점의 x좌표값",
      "숫자: 1번째 점의 y좌표값",
      "숫자: 2번째 점의 x좌표값",
      "숫자: 2번째 점의 y좌표값",
      "숫자: 1번째 점의 z좌표값",
      "숫자: 2번째 점의 z좌표값"],
      "returns": "p5 객체"
    },
    "point": {
      "description": "화면 좌표에 해당하는, 1픽셀 크기의 점을 그립니다. 첫 번째 매개 변수는 점의 x좌표값을, 두 번째 매개 변수는 점의 y좌표값입니다. 점의 색상은 stroke() 함수로 변경할 수 있습니다. 점의 크기는 strokeWeight() 함수로 변경할 수 있습니다.",
      "params": ["숫자: x좌표값",
      "숫자: y좌표값",
      "숫자: z좌표값 (WebGL 모드용)"],
      "returns": "p5 객체"
    },
    "quad": {
      "description": "사각형을 그립니다. 사각형은 4개의 변을 가진 다각형으로, 얼핏 직사각형과 유사하게 들리나 직사각형과는 달리 변 사이의 각도가 90도로 고정되어 있지 않습니다. 처음 한 쌍의 변수는 최초의 꼭지점을 설정하며, 뒤이은 다른 쌍들은 시계 방향이나 반시계 방향에 따라 나머지 3개의 꼭지점 위치를 설정합니다. z 변수는 WebGL 모드에서 quad() 함수를 사용하는 경우에만 적용됩니다.",
      "params": ["숫자: 1번째 꼭지점의 x좌표값",
      "숫자: 1번째 꼭지점의 y좌표값",
      "숫자: 2번째 꼭지점의 x좌표값",
      "숫자: 2번째 꼭지점의 y좌표값",
      "숫자: 3번째 꼭지점의 x좌표값",
      "숫자: 3번째 꼭지점의 y좌표값",
      "숫자: 4번째 꼭지점의 x좌표값",
      "숫자: 4번째 꼭지점의 y좌표값",
      "숫자: 1번째 꼭지점의 z좌표값",
      "숫자: 2번째 꼭지점의 z좌표값",
      "숫자: 3번째 꼭지점의 z좌표값",
      "숫자: 4번째 꼭지점의 z좌표값"],
      "returns": "p5 객체"
    },
    "rect": {
      "description": "화면에 직사각형을 그립니다. 직사각형은 변이 4개이고 모든 변 사이의 각도가 90도인 도형을 뜻합니다. 처음 두 변수는 좌측 상단 꼭지점의 좌표를, 3번째 변수는 사각형의 너비를, 4번째 변수는 그 높이를 설정합니다. rectMode() 함수로 사각형 그리기 모드를 변경하면, 모든 매개 변수값들이 달리 해석됩니다. 5번째, 6번째, 7번째, 8번째 매개 변수를 입력하면, 각각 좌측 상단, 우측 상단, 우측 하단, 좌측 하단 모퉁이들의 각도를 지정하게 됩니다. 이 때 특정 각도 변수가 누락되면, 직전에 입력된 변수와 동일한 값이 적용됩니다.",
      "params": ["숫자: 직사각형의 x좌표값",
      "숫자: 직사각형의 y좌표값",
      "숫자: 직사각형의 너비값",
      "숫자: 직사각형의 높이값",
      "숫자: 좌측 상단 모퉁이 각도값. (선택 사항)",
      "숫자: 우측 상단 모퉁이 각도값. (선택 사항)",
      "숫자: 우측 하단 모퉁이 각도값. (선택 사항)",
      "숫자: 좌측 하단 모퉁이 각도값. (선택 사항)",
      "정수: x축 방향의 선분 수 (WebGL 모드용)",
      "정수: y축 방향의 선분 수 (WebGL 모드용)"],
      "returns": "p5 객체"
    },
    "sqaure": {
      "description": "화면에 정사각형을 그립니다. 정사각형은 동일한 길이의 네 개의 변을 갖고, 모든 변 사이의 각도가 90도인 도형을 뜻합니다. 이 함수는 rect()함수의 특수한 사례와도 같은데, 너비와 높이가 같고 변의 길이를 "s"라는 매개 변수로 처리하게 됩니다. 기본값으로, 처음 두 변수는 처음 두 변수는 좌측 상단 꼭지점의 좌표를, 3번째 변수는 변의 길이를 지정합니다. rectMode() 함수로 사각형 그리기 모드를 변경하면, 모든 매개 변수값들이 달리 해석됩니다. <br> 5번째, 6번째, 7번째매개 변수를 입력하면, 각각 좌측 상단, 우측 상단, 우측 하단, 좌측 하단 모퉁이들의 각도를 지정하게 됩니다. 이 때 특정 각도 변수가 누락되면, 직전에 입력된 변수와 동일한 값이 적용됩니다.",
      "params": ["숫자: 정사각형의 x좌표값",
      "숫자: 정사각형의 y좌표값",
      "숫자: 정사각형의 너비 및 높이값",
      "숫자: 좌측 상단 모퉁이 각도값. (선택 사항)",
      "숫자: 우측 상단 모퉁이 각도값. (선택 사항)",
      "숫자: 우측 하단 모퉁이 각도값. (선택 사항)",
      "숫자: 좌측 하단 모퉁이 각도값. (선택 사항)"],
      "returns": "p5 객체"
    },
    "triangle": {
      "description": "삼각형은 세 개의 점을 이어 만들어진 평면을 뜻합니다. 처음 두 인수는 1번째 꼭지점을, 중간의 두 변수는 2번째 꼭지점을, 마지막 두 인수는 3번째 꼭지점을 지정합니다.",
      "params": ["숫자：1번째 꼭지점의 x좌표값",
                 "숫자：1번째 꼭지점의 y좌표값",
                 "숫자：2번째 꼭지점의 x좌표값",
                 "숫자：2번째 꼭지점의 y좌표값",
                 "숫자：3번째 꼭지점의 x좌표값",
                 "숫자：3번째 꼭지점의 y좌표값"],
      "returns": ""
    },
      
      
// Shape > Attributes
      
      
    "ellipseMode": {
      "description": "ellipse(), circle(), 그리고 arc() 함수의 매개 변수들이 해석되는 방식을 변경하여, 타원이 그려지는 시작점 위치를 변경합니다.<br><br>기본적으로 제공되는 모드는 ellipseMode(CENTER) 함수와도 같습니다. 이는 ellipse() 함수의 처음 두 매개 변수를 타원의 중심점으로, 3번째와 4번째 변수를 각각 그 너비와 높이값으로서 해석합니다.<br><br>ellipseMode(RADIUS) 역시 ellipse() 함수의 처음 두 매개 변수를 타원의 중심점으로 해석하나, 3번째와 4번째 변수를 각각 너비와 높이의 중간 지점값으로 해석합니다.<br><br>ellipseMode(CORNER)는 ellipse() 함수의 처음 두 매개 변수를 도형의 좌측 상단을 기준으로 해석하고, 3번째와 4번째 변수를 각각 그 너비와 높이로 해석합니다. <br><br>ellipseMode(CORNERS)는 ellipse() 함수의 처음 두 매개 변수를 도형의 바운딩 박스 중 한 모퉁이의 위치값으로서 해석합니다. 그리고, 3번째와 4번째 변수는 그 정반대 모퉁이의 위치값으로 해석합니다.<br><br>이 함수의 모든 매개 변수(CENTER, RADIUS, CORNER, CORNERS)들은 반드시 대문자로 작성되어야 합니다. 자바스크립트에서는 대소문자 구분이 매우 중요하답니다.",
      "params": ["상수：CENTER, RADIUS, CORNER, 또는 CORNERS"],
      "returns": ""
    },
    "noSmooth": {
      "description": "모든 그래픽의 가장자리를 울퉁불퉁하게 처리합니다. smooth() 함수는 2D 모드상 언제나 기본값으로 활성화되며, 그래픽을 부드럽게 처리합니다. 따라서, noSmooth() 함수를 호출해야만 기하, 이미지, 폰트 등의 부드러운 처리를 비활성화할 수 있습니다. 반면, 3D 모드에서는 noSmooth()가 기본값으로 활성화됩니다. 따라서, smooth() 함수를 호출해야만 부드러운 처리가 가능합니다.",
      "returns": ""
    },
    "rectMode": {
      "description": "rect() 함수의 매개 변수들이 해석되는 방식을 변경하여, 직사각형이 그려지는 시작점 위치를 변경합니다.<br><br>기본적으로 제공되는 모드는 rectMode(CORNER) 함수와도 같습니다. 이는 rect() 함수의 처음 두 매개 변수를도형의 좌측 상단을 기준으로 해석하고, 3번째와 4번째 변수를 각각 그 너비와 높이값로서 해석합니다. <br><br>rectMode(CORNERS)는 rect() 함수의 처음 두 매개 변수를 한 모퉁이의 위치값으로 서 해석합니다. 그리고, 3번째와 4번째 변수는 그 정반대 모퉁이의 위치값으로 해석합니다.<br><br>ellipseMode(CENTER)는 rect() 함수의 처음 두 매개 변수를 타원의 중심점으로, 3번째와 4번째 변수를 각각 그 너비와 높이값으로서 해석합니다. <br><br>rectMode(RADIUS) 역시 rect() 함수의 처음 두 매개 변수를 타원의 중심점으로 해석하나, 3번째와 4번째 변수를 각각 너비와 높이의 중간 지점값으로 해석합니다.<br><br>이 함수의 모든 매개 변수(CORNER, CORNERS, CENTER, RADIUS)들은 반드시 대문자로 작성되어야 합니다. 자바스크립트에서는 대소문자 구분이 매우 중요하답니다.",
      "params": ["상수：CORNER, CORNERS, CENTER 또는 RADIUS"],
      "returns": ""
    },
    "smooth": {
      "description": "모든 그래픽을 부드럽게 처리하며, 불러온 이미지 또는 크기가 재조정된 이미지의 화질을 향상합니다. smooth()는 2D 모드상 언제나 기본값으로 활성화되며. 따라서, noSmooth() 함수를 호출해야만 기하, 이미지, 폰트 등의 부드러운 그래픽 처리를 비활성화할 수 있습니다. 반면, 3D 모드에서는 noSmooth()가 기본값으로 활성화됩니다. 따라서, smooth() 함수를 호출해야만 부드러운 그래픽 처리가 가능합니다.",
      "returns": ""
    },
    "strokeCap": {
      "description": "선의 양끝에 대한 렌더링 스타일을 설정합니다. 선의 양끝은 매개 변수 SQAURE로 각지게, PROJECT로 조금 더 길게, 그리고 ROUND로 둥글게 처리될 수 있습니다. 이 중에서 ROUND는 기본값으로 적용됩니다.",
      "params": ["상수：SQUARE, PROJECT 또는 ROUND"],
      "returns": ""
    },
    "strokeJoin": {
      "description": "두 선분 간의 이음새에 대한 스타일을 설정합니다. 이음새는 매개 변수 MITER로 각지게, BEVEL로 베벨 처리되듯 비스듬히 깎인 형태로, ROUND로 둥글게 처리될 수 있습니다. 이 중에서 MITER는 기본값으로 적용됩니다.",
      "params": ["상수：MITER, BEVEL 또는 ROUND"],
      "returns": ""
    },
    "strokeWeight": {
      "description": "선, 점, 그리고 도형 테두리를 그릴 때 쓰이는 함수인 stroke()의 결과값 두께를 설정합니다. 모든 두께는 픽셀 단위로 지정됩니다.",
      "params": ["숫자：선의 두께 (픽셀 단위)"],
      "returns": ""
    },
      
      
// Shape > Curves
      
      
    "bezier": {
      "description": "화면에 3차 베지어 곡선을 그립니다. 베지어 곡선은 일련의 고정점 및 제어점들로 정의됩니다. 처음 두 매개 변수는 1번째 고정점을, 마지막 두 매개 변수는 마지막 고정점을 지정합니다. 중간의 두 매개 변수는 두 개의 제어점을 지정하며, 이는 곧 곡선의 모양을 정의하게 됩니다. 여기서 제어점은 그 자신을 향해 곡선을 당기는 역할을 합니다. <br><br> 베지어 곡선은 프랑스 출신 자동차 엔지니어인 피에르 베지어(Pierre Bezier)가 개발하였으며, 컴퓨터 그래픽상 부드럽게 경사진 곡선을 정의하는 데에 주로 사용됩니다. curve()도 참고하세요.",
      "params": ["숫자: 1번째 고정점의 x좌표값",
                 "숫자: 1번째 고정점의 y좌표값",
                 "숫자: 1번째 제어점의 x좌표값",
                 "숫자: 1번째 제어점의 y좌표값",
                 "숫자: 2번째 제어점의 x좌표값",
                 "숫자: 2번째 제어점의 y좌표값",
                 "숫자: 2번째 고정점의 x좌표값",
                 "숫자: 2번째 고정점의 y좌표값",
                 "숫자: 1번째 고정점의 z좌표값",
                 "숫자: 1번째 제어점의 z좌표값",
                 "숫자: 2번째 제어점의 z좌표값",
                 "숫자: 2번째 고정점의 z좌표값"],
      "returns": ""
    },
    "bezierDetail": {
      "description": "베지어 곡선들의 해상도를 설정합니다. <br>기본값은 20입니다.<br>이 함수는 WebGL 렌더러용으로만 사용되며, 기본 캔버스 렌더러에서는 이 함수를 사용하지 않습니다.",
      "params": ["숫자: 곡선들의 해상도값"],
      "returns": ""
    },
    "bezierPoint": {
      "description": "점 a, b, c, d로 정의된 베지어 곡선에서 위치 t를 계산합니다. 매개 변수 a와 d는 각각 곡선의 1번째 점과 마지막 점에, b와 c는 제어점에 해당합니다. 마지막 매개 변수인 t는 0과 1사이에서 표현됩니다. 함수는 먼저 x좌표를 호출한 다음, y좌표를 호출하여 위치 t를 찾게됩니다.",
      "params": ["숫자: 곡선의 1번째 점 좌표값",
                 "숫자: 1번째 제어점 좌표값",
                 "숫자: 2번째 제어점 좌표값",
                 "숫자: 곡선의 2번째 점 좌표값",
                 "숫자: 0과 1 사이의 값"],
      "returns": "숫자: 위치 t에 해당하는 베지어 곡선의 값"
    },
    "bezierTangent": {
      "description": "위치 t에서 곡선의 점 a, b, c, d에 대한 탄젠트를 계산합니다. 매개 변수 a와 d는 각각 곡선의 1번째 점과 마지막 점에, b와 c는 제어점에 해당합니다. 마지막 매개 변수인 t는 0과 1사이에서 표현됩니다.",
      "params": ["숫자: 곡선의 1번째 점 좌표값",
                 "숫자: 1번째 제어점 좌표값",
                 "숫자: 2번째 제어점 좌표값",
                 "숫자: 곡선의 2번째 점 좌표값",
                 "숫자: 0과 1 사이의 값"],
      "returns": "숫자: 위치 t에 해당하는 탄젠트"
    },
    "curve": {
      "description": "화면에 두 점 사이에 위치한 곡선을 그립니다. 이 때, 곡선의 형태는 함수의 매개 변수들 중 가운데 네 개를 통해 정의됩니다. 처음 두 매개 변수는 1번째 제어점의 좌표값을 지정하는데, 마치 이 제어점에서 곡선이 비롯된 것처럼 보이게 됩니다. 마지막 두 매개 변수들은 마찬가지 원리로 또다른 제어점의 좌표를 지정합니다.<br><br>curve() 함수를 조합하거나 curveVertex()를 사용하여 좀 더 긴 곡선을 만들 수 있습니다. 부가적으로, curveTightness()을 통해 곡선의 화질을 조절할 수 있습니다. curve() 함수는 캣멀롬 스플라인(Catmull-Rom Spline)을 구현합니다.",
      "params": ["숫자: 최초 제어점의 x좌표값",
                 "숫자: 최초 제어점의 y좌표값",
                 "숫자: 1번째 점의 x좌표값",
                 "숫자: 1번째 점의 y좌표값",
                 "숫자: 2번째 점의 x좌표값",
                 "숫자: 2번째 점의 y좌표값",
                 "숫자: 마지막 제어점의 x좌표값",
                 "숫자: 마지막 제어점의 y좌표값",
                 "숫자: 최초 제어점의 z좌표값",
                 "숫자: 1번째 점의 z좌표값",
                 "숫자: 2번째 점의 z좌표값",
                 "숫자: 마지막 제어점의 z좌표값"],
      "returns": ""
    },
    "curveDetail": {
      "description": "곡선들의 해상도를 설정합니다. <br>기본값은 20이고, 최소값은 3입니다.<br>이 함수는 WebGL 렌더러용으로만 사용되며, 기본 캔버스 렌더러에서는 이 함수를 사용하지 않습니다.",
      "params": ["숫자: 곡선들의 해상도값"],
      "returns": ""
    },
    "curveTightness": {
      "description": "curve()와 curveVertex() 함수를 사용하여 모양을 변경합니다. 곡선의 팽팽함(tightness)을 지정하는 매개변수 t는, 두 꼭지점 사이에 곡선이 들어맞는 정도를 결정합니다. 값 0.0은 곡선의 팽팽함에 대한 기본값이며(이 값을 통해 곡선을 캣멀롬 스플라인으로 정의), 값 1.0은 모든 점을 직선 상태로 연결하게 됩니다. -5.0와 5.0 사이의 값들은 화면상 인식 가능한 범위 내에서 값의 크기에 비례하여 곡선을 변형합니다.",
      "params": ["숫자: 원래 꼭지점으로부터 변형된 정도의 양"],
      "returns": ""
    },
    "curvePoint": {
      "description": "점 a, b, c, d로 정의된 곡선에서 위치 t를 계산합니다. 매개 변수 a와 d는 곡선의 제어점에, b와 c는 각각 곡선의 시작점과 끝점에 해당합니다. 마지막 매개 변수인 t는 0과 1사이에서 표현됩니다. 함수는 먼저 x좌표를 호출한 다음, y좌표를 호출하여 위치 t를 찾게됩니다.",
      "params": ["숫자: 곡선의 1번째 제어점 좌표값",
                 "숫자: 1번째 점 좌표값",
                 "숫자: 2번째 점 좌표값",
                 "숫자: 곡선의 2번째 제어점 좌표값",
                 "숫자: 0과 1 사이의 값"],
      "returns": "숫자: 위치 t에 해당하는 베지어값"
    },
    "curveTangent": {
      "description": "위치 t에서 곡선의 점 a, b, c, d에 대한 탄젠트를 계산합니다. 매개 변수 a와 d는 각각 곡선 위 점에, b와 c는 제어점에 해당합니다. 마지막 매개 변수인 t는 0과 1사이에서 표현됩니다.",
      "params": ["숫자: 곡선의 1번째 점 좌표값",
                 "숫자: 1번째 제어점 좌표값",
                 "숫자: 2번째 제어점 좌표값",
                 "숫자: 곡선의 2번째 점 좌표값",
                 "숫자: 0과 1 사이의 값"],
      "returns": "숫자: 위치 t에 해당하는 탄젠트"
    },

      
// Shape > Vertex
      
      
    "beginContour": {
      "description": "beginContour()와 endContour() 함수를 사용하여 특정 도형 내부에 그 음수 좌표에 상응하는 동일한 도형 테두리를 그릴 수 있습니다. 예를 들어, 동그라미의 안쪽에 또다른 작은 동그라미를 그릴 수 있습니다. beginContour()는 도형의 꼭지점을 기록하기 시작하고, endContour()는 그 기록을 중지합니다. 이 때, 안쪽의 도형을 정의하는 꼭지점은 바깥쪽의 도형과 반대 순서로 그려져야 합니다. 먼저 바깥에 위치한 원래 도형의 꼭지점을 시계 방향으로 그리고, 그 다음 내부의 도형을 시계 반대 방향으로 그립니다.<br><br> beginContour()/endContour() 함수는 반드시 beginShape()/endShape() 함수 사이에 작성되어야 합니다. 또한, beingContour()/endContour() 함수 사이에는 translate(), rotate(), scale()과 같은 변형 함수나 ellipse() 및 rect()와 같은 도형그리기 함수가 사용될 수 없습니다.",
      "returns": ""
    },
    "beginShape": {
      "description": "beginShape()과 endShape()를 사용하여 좀 더 복잡한 모양을 만들 수 있습니다. beingShape()은 도형의 꼭지점을 기록하기 시작하고, endShape()은 그 기록을 중지합니다. 함수의 매개 변수를 통해 꼭지점으로 어떤 도형을 그릴지 결정할 수 있습니다. 별도의 매개 변수가 지정되지 않으면, 비정형의 다각형이 그려집니다. <br><br>beginShape()에 쓰이는 매개 변수로는 POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, 그리고 TESS(WebGL 전용)가 있습니다. beginShape() 함수를 호출한 다음, 꼭지점 지정을 위해 vertex() 명령문을 반드시 작성해야 합니다. 도형그리기를 멈추려면 endShape() 함수를 호출하면 됩니다. 각 도형은 현재 지정된 선그리기(stroke) 및 면채우기(fill) 색상으로 그려집니다.",
      "params": ["상수: POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS 또는 QUAD_STRIP (선택 사항)"],
      "returns": ""
    },
    "bezierVertex": {
      "description": "베지어 곡선의 꼭지점 좌표를 지정합니다. bezierVertex()은 매 호출마다 베지어 곡선의 제어점 2개와 고정점 1개의 위치를 정의하고, 이 새로운 선분을 선 또는 도형에 더합니다. bezierVertex()는 WebGL상 2D 및 3D 모드 모두에 적용될 수 있습니다. 2D 모드에서는 6개의 매개 변수가, 3D 모드에서는 9개의 매개 변수(z좌표값 포함)가 필요합니다.<br><br>beginShape() 함수 안에 작성된 bezierVertex()를 호출하기에 앞서, vertex() 함수를 bezierVertex() 윗줄에 작성하여 곡선의 1번째 고정점을 설정해야 합니다. bezierVertex() 함수는 반드시 beginShape()/endShape() 함수 사이에 작성되어야하며, beginShape() 함수에 MODE나 POINTS 매개 변수가 지정되지 않은 경우에만 사용가능 합니다.",
      "params": ["숫자: 1번째 제어점의 x좌표값",
                 "숫자: 1번째 제어점의 y좌표값",
                 "숫자: 2번째 제어점의 x좌표값",
                 "숫자: 2번째 제어점의 y좌표값",
                 "숫자: 고정점의 x좌표값",
                 "숫자: 고정점의 y좌표값",
                 "숫자: 1번째 제어점의 z좌표값 (WebGL 모드용)",
                 "숫자: 2번째 제어점의 z좌표값 (WebGL 모드용)",
                 "숫자: 고정점의 z좌표값 (WebGL 모드용)"],
      "returns": ""
    },
    "curveVertex": {
      "description": "곡선의 꼭지점 좌표를 지정합니다. 이 함수는 반드시 beginShape()/endShape() 함수 사이에 작성되어야하며, beginShape() 함수에 MODE나 POINTS 매개 변수가 지정되지 않은 경우에만 사용가능 합니다. 또한, 이 함수는 WebGL상 2D 및 3D 모드 모두에 적용될 수 있습니다. 2D 모드에서는 2개의 매개 변수가, 3D 모드에서는 3개의 매개 변수가 필요합니다.<br><br>curveVertex()로 그려진 일련의 선들 중 1번째 점과 마지막 점을 통해 각각 전체 곡선의 시작점과 끝점을 알 수 있습니다. 2번째와 3번째 사이에도 작은 곡선을 만들기 위해선 최소 4개의 점들이 필요합니다. curveVertex() 함수로 5번째 점을 추가하면 함수는 2번째, 3번째, 4번째 점들 사이에 곡선을 그립니다. curveVertex() 함수는 캣멀롬 스플라인(Catmull-Rom Spline)을 구현합니다. ",
      "params": ["숫자: 꼭지점의 x좌표값",
                 "숫자: 꼭지점의 y좌표값",
                 "숫자: 꼭지점의 z좌표값 (WebGL 모드용)(선택 사항)"],
      "returns": ""
    },
    "endContour": {
      "description": "beginContour()와 endContour() 함수를 사용하여 특정 도형 내부에 그 음수 좌표에 상응하는 동일한 도형 테두리를 그릴 수 있습니다. 예를 들어, 동그라미의 안쪽에 또다른 작은 동그라미를 그릴 수 있습니다. beginContour()는 도형의 꼭지점을 기록하기 시작하고, endContour()는 그 기록을 중지합니다. 이 때, 안쪽의 도형을 정의하는 꼭지점은 바깥쪽의 도형과 반대 순서로 그려져야 합니다. 먼저 바깥에 위치한 원래 도형의 꼭지점을 시계 방향으로 그리고, 그 다음 내부의 도형을 시계 반대 방향으로 그립니다.<br><br> beginContour()/endContour() 함수는 반드시 beginShape()/endShape() 함수 사이에 작성되어야 합니다. 또한, beingContour()/endContour() 함수 사이에는 translate(), rotate(), scale()과 같은 변형 함수나 ellipse() 및 rect()와 같은 도형그리기 함수가 사용될 수 없습니다.",
      "returns": ""
    },
    "endShape": {
      "description": "endShape()은 beginShape()과 한 쌍을 이루는 함수로, 반드시 beginShape() 다음에 호출될 수 있습니다. endShape() 함수가 호출되면, beginShape() 함수가 호출된 이래로 정의된 모든 이미지 데이터가이미지 버퍼로서 처리됩니다. endShape()의 MODE 매개 변수로는 상수 CLOSE를 씁니다.",
      "params": ["상수: CLOSE로 도형 닫기(선택 사항)"],
      "returns": ""
    },
    "quadraticVertex": {
      "description": "2차 베지어 곡선의 꼭지점 좌표를 지정합니다. quadraticVertex()은 매 호출마다 베지어 곡선의 제어점 1개와 고정점 1개의 위치를 정의하고, 이 새로운 선분을 선 또는 도형에 더합니다. beginShape() 함수 안에 작성된 quadraticVertex()를 호출하기에 앞서, vertex() 함수를 quadraticVertex() 윗줄에 작성하여 곡선의 1번째 고정점을 설정해야 합니다. quadraticVertex()는 WebGL상 2D 및 3D 모드 모두에 적용될 수 있습니다. 2D 모드에서는 6개의 매개 변수가, 3D 모드에서는 9개의 매개 변수(z좌표값 포함)가 필요합니다.<br><br>quadraticVertex() 함수는 반드시 beginShape()/endShape() 함수 사이에 작성되어야하며, beginShape() 함수에 MODE나 POINTS 매개 변수가 지정되지 않은 경우에만 사용가능 합니다.",
      "params": ["숫자: 제어점의 x좌표값",
                 "숫자: 제어점의 y좌표값",
                 "숫자: 고정점의 x좌표값",
                 "숫자: 고정점의 y좌표값",
                 "숫자: 제어점의 z좌표값 (WebGL 모드용)",
                 "숫자: 고정점의 z좌표값 (WebGL 모드용)"],
      "returns": ""
    },
    "vertex": {
      "description": "모든 도형들은 꼭지점 연결을 통해 구축됩니다. vertex() 함수를 사용하여 점, 선, 삼각형, 사각형, 그리고 다각형의 꼭지점 좌표를 지정할 수 있습니다.는 데에 쓰입니다. 이 때, vertex() 함수는 반드시 beginShape()/endShape() 함수 사이에 작성되어야합니다.",
      "params": ["숫자: 꼭지점의 x좌표값",
                 "숫자: 꼭지점의 y좌표값",
                 "숫자: 꼭지점의 z좌표값",
                 "숫자: 꼭지점의 u좌표값(선택 사항)",
                 "숫자: 꼭지점의 v좌표값(선택 사항)"],
      "returns": ""
    },
   
    
// Shape > 3D Primitives
    
    
    "plane": {
      "description": "사용자가 지정한 너비와 높이로 평면을 그립니다.",
      "params": ["숫자: 평면의 너비값 (선택 사항)",
                 "숫자: 평면의 높이값 (선택 사항)",
                 "정수: x-차원상의 삼각 세분면 개수 (선택 사항)",
                 "정수: y-차원상의 삼각 세분면 개수 (선택 사항)"],
      "returns": ""
    },
    "box": {
      "description": "사용자가 지정한 너비, 높이, 깊이로 상자를 그립니다.",
      "params": ["숫자: 상자의 너비값 (선택 사항)",
                 "숫자: 상자의 높이값 (선택 사항)",
                 "숫자: 상자의 깊이값 (선택 사항)",
                 "정수: x-차원상의 삼각 세분면 개수 (선택 사항)"
                 "정수: y-차원상의 삼각 세분면 개수 (선택 사항)"],
      "returns": ""
    },
    "sphere": {
      "description": "사용자가 지정한 반지름으로 구를 그립니다.<br>detailX와 detailY는 각각 구에 대한 x-차원과 y-차원상의 삼각 세분면 개수를 정합니다. 세분면이 많아질수록 구가 매끄러워집니다. detailX와 detailY 모두 권장 최대값은 24입니다. 24보다 높은 값을 사용하면 경고창이 뜨거나 브라우저가 느려질 수 있습니다.",
      "params": ["숫자: 원의 반지름 (선택 사항)",
                 "정수: x-차원상의 삼각 세분면 (선택 사항)
                 "정수: y-차원상의 삼각 세분면 (선택 사항)
                ],
      "returns": ""
    },
    "cylinder": {
      "description": "사용자가 지정한 반지름과 높이로 원기둥을 그립니다.<br>detailX와 detailY는 각각 원기둥에 대한 x-차원과 y-차원상의 세분면 개수를 정합니다. 세분면이 많아질수록 원기둥이 매끄러워집니다. detailX와 detailY 모두 권장 최대값은 24입니다. 24보다 높은 값을 사용하면 경고창이 뜨거나 브라우저가 느려질 수 있습니다.",
      "params": ["숫자: 표면의 반지름 (선택 사항)",
      "params": ["숫자: 원기둥의 높이 (선택 사항)",
                 "정수: x-차원상의 세분면 개수, 기본값은 24 (선택 사항)",
                 "정수: y-차원상의 세분면 개수, 기본값은 1 (선택 사항)",
                 "불리언: 원기둥의 밑바닥면을 그릴 지의 여부 (선택 사항)",
                 "불리언: 원기둥의 윗면을 그릴 지의 여부 (선택 사항)"],
      "returns": ""
    },
    "cone": {
      "description": "사용자가 지정한 반지름과 높이로 원뿔을 그립니다. <br>detailX와 detailY는 각각 원뿔에 대한 x-차원과 y-차원상의 세분면 개수를 정합니다. 세분면이 많아질수록 원뿔이 매끄러워집니다. detailX의 권장 최대값은 24입니다. 24보다 높은 값을 사용하면 경고창이 뜨거나 브라우저가 느려질 수 있습니다.",
      "params": ["숫자: 밑표면의 반지름 (선택 사항)",
                 "숫자: 원뿔의 높이 (선택 사항)",
                 "정수: x-차원상의 세분면 개수, 기본값은 24 (선택 사항)",
                 "정수: y-차원상의 세분면 개수, 기본값은 1 (선택 사항)",
                 "불리언: 원뿔의 밑바닥면을 그릴 지의 여부 (선택 사항)"],
      "returns": ""
    },
    "ellipsoid": {
      "description": "사용자가 지정한 반지름으로 타원면을 그립니다.<br>detailX와 detailY는 각각 x-차원과 y-차원상의 세분면 개수를 정합니다. 세분면이 많아질수록 타원면이 매끄러워집니다. 가급적 detailX와 detailY의 값이 150을 넘어가면 브라우저가 중단될 수 있습니다.",
      "params": ["숫자: 타원면의 x-반지름값 (선택 사항)",
                 "숫자: 타원면의 y-반지름값 (선택 사항)",
                 "숫자: 타원면의 z-반지름값 (선택 사항)",
                 "정수: 세분면의 개수, 기본값은 24(선택 사항)"],
      "returns": ""
    },
    "torus": {
      "description": "사용자가 지정한 반지름과 튜브 반지름으로 원환을 그립니다. <br>detailX와 detailY는 각각 원환에 대한 x-차원과 y-차원상의 세분면 개수를 정합니다. 세분면이 많아질수록 원환이 매끄러워집니다. detailX과 detailY의 권장 최대값은 각각 24와 16입니다. 4나 6처럼 조금 더 적은 값으로 설정하면, 원환이 아닌 새로운 모양을 만들 수 있습니다.",
      "params": ["숫자: 전체 원환의 반지름 (선택 사항)",
                 "숫자: 튜브의 반지름 (선택 사항)",
                 "정수: x-차원상의 세분면 개수, 기본값은 24 (선택 사항),
                 "정수: y-차원상의 세분면 개수, 기본값은 16 (선택 사항)"],
      "returns": ""
    },
    
// Shape > 3D Models
    
     "loadModel": {
      "description": "OBJ 또는 STL 파일로부터 3D 모델을 불러옵니다. <br><br> loadModel() 함수는 반드시 preload() 함수 안에 작성되어야 하며, 이로써 3D 모델을 코드 실행에 앞서 온전히 불러올 수 있습니다. <br><br>OBJ와 STL 파일 형식의 한계 중 하나는 빌트인 스케일 기능이 제공되지 않는다는 것입니다. 즉, 파일을 불러오는 소프트웨어 프로그램에 따라 3D 모델의 크기가 상이해집니다. 3D 모델이 보이지 않는다면 loadModel() 함수에 표준화된 매개 변수인 true를 입력해 보세요. 또한 불러온 3D 모델의 크기는 scale() 함수로 변경할 수 있습니다. <br>색상이 지정된 STL 파일은 현재 지원하지 않아, 색상 요소가 제거된 상태로 렌더링될 수 있습니다.",
      "params": ["문자열: 불러올 3D 모델의 파일 경로",
                 "불리언: 참(true)이면, 3D 모델을 표준화된 크기로 불러오기",
                 "함수(p5.Geometry): 3D 모델을 불러온 뒤 일회적으로 호출되는 함수로, 3D 모델 객체를 전달. (선택 사항)",
                 "함수(Event)：3D 모델 불러오기를 실패할 경우 이벤트 에러와 함께 호출 (선택 사항)"],
      "returns": "p5.Geometry: p5.Geometry 객체"
    },
    "model": {
      "description": "화면에 3D 모델을 렌더링합니다.",
      "params": ["p5.Geometry: 렌더링할, 불러온 3D 모델"],
      "returns": ""
    },
    
//Constants
    
    "HALF_PI": {
      "description": "HALF_PI는 1.57079632679489661923 값을 갖는 상수입니다. 지름에 대한 원주율의 절반에 해당하며, 삼각 함수 sin()과 cos()와 함께 쓰면 더욱 유용합니다.",
      "returns": ""
    },
    "PI": {
      "description": "PI는 3.14159265358979323846 값을 갖는 상수입니다. 지름에 대한 원주율을 의미하며, 삼각 함수 sin()과 cos()와 함께 쓰면 더욱 유용합니다.",
      "returns": ""
    },
    "QUARTER_PI": {
      "description": "QUARTER_PI는 0.7853982 값을 갖는 상수입니다. 지름에 대한 원주율의 1/4에 해당하며, 삼각 함수 sin()과 cos()와 함께 쓰면 더욱 유용합니다.",
      "returns": ""
    },
    "TAU": {
      "description": "TAU는 TWO_PI의 약어로, 이는 6.28318530717958647693 값을 갖는 상수입니다. 지름에 대한 원주율의 2배에 해당하며, 삼각 함수 sin()과 cos()와 함께 쓰면 더욱 유용합니다.",
      "returns": ""
    },
    "TWO_PI": {
      "description": "TWO_PI는6.28318530717958647693 값을 갖는 상수입니다. 지름에 대한 원주율의 2배에 해당하며, 삼각 함수 sin()과 cos()와 함께 쓰면 더욱 유용합니다.",
      "returns": ""
    },
    "DEGREES": {
      "description": "p5.js가 각도를 해석하고 계산하는 방법을 설정하기 위해, angleMode() 함수와 그 매개 변수(DEGREES 또는 RADIANS)를 사용합니다.",
      "returns": ""
    },
    "RADIANS": {
      "description": "p5.js가 각도를 해석하고 계산하는 방법을 설정하기 위해, angleMode() 함수와 그 매개 변수(DEGREES 또는 RADIANS)를 사용합니다.",
      "returns": ""
    },

//Environment
    
    "print": {
      "description": "print() 함수는 브라우저 콘솔창에 출력할 때 사용됩니다. 프로그램이 생성하는 데이터를 확인할 때 주로 도움됩니다. 함수는 매번 호출될 때마다 콘솔창에 새로운 텍스트 줄을 만듭니다. 개별 요소는 큰따옴표로 분리하고, 더하기 연산자(+)로 두 요소를 결합할 수 있습니다.<br><br>인수없이 print()를 호출하면, window.print()와 동일하게 브라우저상 인쇄 기능을 켭니다. 콘솔창에 빈 줄을 출력하려면 print('\n')을 작성하면 됩니다.",
      "params": ["전부: 출력할 숫자, 문자열, 객체, 불리언, 배열의 조합"],
      "returns": ""
    },
    "frameCount": {
      "description": "시스템 변수 frameCount는 프로그램 시작 이후 화면에 나타난 프레임의 개수를 측정합니다. setup() 함수의 기본값은 0이고, draw() 함수의 첫번째 반복 실행이 마치면 1씩 증가하는 식입니다.",
      "returns": ""
    },
    "focused": {
      "description": "p5.js 프로그램이 등장하는 화면창의 초점이 맞는지 여부를 확인하며, 이는 곧 스케치가 마우스나 키보드 입력을 허용한다는 것을 의미합니다. 화면창의 초점이 맞으면 변수는 true이고, 그렇지 않으면 false입니다.",
      "returns": ""
    },
    "cursor": {
      "description" : "마우스 커서를 사전에 정의된 기호나 이미지로 설정하거나, 숨김 상태일 경우 이를 해제합니다. 특정 이미지를 커서로 설정할 경우, 권장 사이즈는 16x16 또는 32x32 입니다. 매개 변수 x와 y의 값은 이미지의 실제 크기보다 훨씬 더 작아야 합니다.",
      "params": ["문자열|상수: ARROW, CROSS, HAND, MOVE, TEXT, WAIT. CSS 요소인 'grab', 'progress', 'cell' 등. 외부: 커서 이미지의 경로(허용 파일 확장자:.cur, .gif, .jpg, .jpeg, .png, url 주소. 참고: <ah ref='https://developer.mozilla.org/en-US/docs/Web/CSS/cursor'>https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a>",
                 "숫자: 커서의 수평 활성 지점 (32미만으로 지정) (선택 사항)",
                 "숫자: 커서의 수직 활성 지점 (32미만으로 지정) (선택 사항)"],
      "returns": ""
    },
    "frameRate": {
      "description": "화면에 나타날 프레임 수를 매 초단위로 지정합니다. 예를 들어, frameRate(30)은 초당 30회씩 새로 고침을 시도합니다. 프로세서가 지정된 속도를 유지할만큼 빠르지 않다면, 프레임 속도에 달성되지 않습니다. setup() 함수 내에서 프레임 속도를 설정하는 것을 권장합니다. 기본값으로 제공되는 프레임 속도는 디스플레이의 프레임 속도(즉, '새로 고침 빈도')를 기준으로 합니다. 초당 24 프레임 정도면 애니메이션을 부드럽게 재생할 수 있습니다. 이 함수는 setFrameRate(val)와 동일한 효과를 갖습니다.<br><br>별도의 인수없이 frameRate() 함수를 호출하면 현재 프레임 속도가 반환됩니다. 프레임 속도를 반환하기 위해서는 draw() 함수를 한 번 이상 실행해야 합니다. 이는 getFrameRate() 함수와도 동일합니다.<br><br>숫자형이 아니거나 양수가 아닌 숫자형의 인수로 frameRate() 함수를 호출하면 마찬가지로 현재 프레임 속도를 반환합니다.",
      "params": ["숫자：매 초당 화면에 나타날 프레임 수"],
      "returns": ""
    },
    "noCursor": {
      "description": "화면상 커서를 숨깁니다.",
      "returns": ""
    },

    "displayWidth": {
      "description": "pixelDensity() 함수의 기본값에 따라 화면의 너비값을 저장하는 시스템 변수입니다. 모든 디스플레이에서 프로그램을 전체 화면으로 실행시킬 때 사용합니다. 실제 화면 크기값을 반환하려면 여기에 pixelDensity를 곱하면 됩니다.",
      "returns": ""
    },
    "displayHeight": {
      "description": "pixelDensity() 함수의 기본값에 따라 화면의 높이값을 저장하는 시스템 변수입니다. 모든 디스플레이에서 프로그램을 전체 화면으로 실행시킬 때 사용합니다. 실제 화면 크기값을 반환하려면 여기에 pixelDensity를 곱하면 됩니다.",
      "returns": ""
    },
    "windowWidth": {
      "description": "사용자의 윈도우 화면 너비값을 저장해주는 시스템 변수로, window.innerWidth에 매핑됩니다.",
      "returns": ""
    },
    "windowHeight": {
      "description": "사용자의 윈도우 화면 높이값을 저장해주는 시스템 변수로, window.innerHeight에 매핑됩니다.",
      "returns": ""
    },
    "windowResized": {
      "description": "windowResized() 함수는 브라우저 창의 크기가 조정될 때마다 한 번씩 호출됩니다. 캔버스 크기를 재조정하거나 새 윈도우 화면의 크기에 맞춰 조정할 때 유용합니다.",
      "returns": ""
    },
    "width": {
      "description": "생성된 캔버스의 너비값을 저장하는 시스템 변수입니다. 이 값은 createCanvas() 함수의 1번째 매개 변수로서 지정됩니다. createCanvas(320, 240)는 너비 변수를 320으로 설정한 사례입니다. 프로그램에 createCanvase()를 사용하지 않을 경우, 너비는 기본값인 100으로 설정됩니다.",
      "returns": ""
    },
    "height": {
      "description": "생성된 캔버스의 높이값을 저장하는 시스템 변수입니다. 이 값은 createCanvas() 함수의 2번째 매개 변수로서 지정됩니다. createCanvas(320, 240)는 높이 변수를 240으로 설정한 사례입니다. 프로그램에 createCanvase()를 사용하지 않을 경우, 높이는 기본값인 100으로 설정됩니다.",
      "returns": ""
    },
    "fullscreen": {
      "description": "사용자가 지정한 인수값을 기준으로 스케치를 전체 화면으로 설정합니다. 인수를 지정하지 않으면 현재 전체 화면 모드를 반환합니다. 위의 예제는 브라우저 제한으로 인해 마우스 입력과같은 사용자 입력이 있을 때 이 함수를 호출합니다.",
      "params": ["불리언: 스케치를 전체 화면 모드로 실행할 지의 여부 (선택 사항)"],
      "returns": "불리언: 현재 전체 화면 상태"
    },
    "pixelDensity": {
      "description": "픽셀 밀도가 높은 디스플레이의 픽셀 크기를 조정합니다. pixelDensity()는 그 기본값으로 화면의 픽셀 밀도와 일치하도록 설정되어 있으며, pixelDensity(1)를 호출하여 이를 해제할 수 있습니다. 별도의 인수없이 pixelDensity() 함수를 호출하면, 스케치의 현재 픽셀 밀도가 반환됩니다.",
      "params": ["숫자: 스케치의 픽셀 크기를 조정할 지 여부 또는 조정값"],
      "returns": ""
    },
    "displayDensity": {
      "description": "스케치가 실행 중인 현재 디스플레이의 픽셀 밀도를 반환합니다.",
      "returns": "숫자: 디스플레이의 현재 픽셀 밀도"
    },
    "getURL": {
      "description": "현재 URL을 받아옵니다.",
      "returns": "문자열: url"
    },
    "getURLPath": {
      "description": "현재 URL 경로를 배열로 받아옵니다.",
      "returns": "문자열 배열[]：경로 요소들"
    },
    "getURLParams": {
      "description": "현재 URL 매개 변수들을 객체로 받아옵니다.",
      "returns": "객체: URL 매개 변수들"
    },
    
    
//Structure
    
    "preload": {
      "description": "preload() 함수는 setup() 함수 직전에 호출되며, 외부 파일의 비동기 불러오기를 차단하기 위해 사용됩니다. preload() 함수로 외부 파일 사전 불러오기가 설정되면, setup() 함수는 불러오기 호출이 완료될 때까지 대기합니다. 불러오기 호출 이외의 다른 함수(loadImage, loadJOSN, loadFont, loadString)는 preload() 함수 안에 포함되지 않아야 합니다. 만약 비동기 불러오기를 선호한다면, 불러오기 메소드를 setup() 함수 안에 포함시키거나, 그 외의 영역에서 callback 매개 변수를 사용하여 호출하면 됩니다.<br> 기본값으로 'loading..'이라는 텍스트가 화면에 나타납니다. 나만의 로딩 페이지를 만들려면 id가 p5_loading으로 지정된 HTML 요소를 추가하면 됩니다. 자세한 정보는 <a href='http://bit.ly/2kQ6Nio'>여기</a>서 확인하세요.",
      "returns": ""
    },
    "setup": {
      "description": "setup() 함수는 프로그램 실행시 단 한번 호출됩니다. 함수는 화면 크기나 배경색 등의 초기 환경 요소를 정의하고, 또 이미지나 폰트같은 미디어 파일을 불러오는 데에 쓰입니다. setup() 함수는 프로그램당 한 개씩만 존재할 수 있으며, 최초 한 번 실행된 이후에는 재호출되지 않아야 합니다.<br><br>참고: setup() 함수 안에 선언된 변수는, draw() 함수를 비롯한 여타 함수들이 접근할 수 없습니다.",
      "returns": ""
    },
    "draw": {
      "description": "draw() 함수는 setup() 함수 직후에 호출되며, 프로그램 실행이 중단되거나 noLoop() 함수가 호출되기 전까지 블록 내에 포함된 코드들을 계속 실행합니다. 만약 setup() 함수에서 noLoop()가 호출된다면, draw() 함수는 단 한 번 실행됩니다. draw() 함수는 자동으로 호출되며, 명시적으로 호출하면 안됩니다.<br><br>draw() 함수는 항상 noLoop(), redraw(), 그리고 loop() 함수로 제어됩니다. noLoop()함수가 draw() 함수에 포함된 코드 실행을 멈추면, redraw() 함수가 draw() 함수 안에 포함된 코드들을 한 번만 실행하게 됩니다. loop() 함수의 경우, draw() 함수 안에 있는 코드를 계속해서 반복적으로 실행되게 합니다.<br><br>draw() 함수가 초당 호출되는 횟수는 frameRate() 함수를 통해 조정할 수 있습니다.<br><br>draw() 함수는 한 스케치당 한 번만 작성되어야 하며, 코드를 계속 실행하거나 mousePressed()와 같은 이벤트를 처리할 때 반드시 필요합니다. 때로는 위의 예제처럼 비어있는 draw() 함수를 호출하기도 합니다.<br><br>드로잉의 좌표계가 매 draw() 함수가 호출될 때마다 리셋되는 점에 유의하세요. draw() 함수 안에서 변형 함수(scale, rotate, translate)가 실행될 경우, draw() 함수가 재호출되는 시점에 그 효과들은 무효화되고, 따라서 시간이 지나도 변형 내용이 누적되지 않습니다. 반면, 한 번 선언된 스타일(fill, stroke 등)은 계속해서 적용됩니다.",
      "returns": ""
    },
    "remove": {
      "description": "전체 p5 스케치를 제거합니다. 이 함수는 캔버스와 p5.js로 생성한 모든 요소들을 제거합니다. 또한, 그리기 반복(draw loop)를 중지하고, 윈도우 전역 범위에서 선언된 속성이나 메소드의 구속력을 해제합니다. 새로운 p5 스케치를 만들고자 할 경우에는 변수 p5를 남겨둡니다. 원한다면 p5 = null로 처리하여 이를 제거할 수 있습니다. p5 라이브러리로 생성한 모든 함수, 변수, 그리고 객체가 제거되지만, 사용자가 코드로 생성한 여타 전역 변수들은 그대로 유지됩니다.",
      "returns": ""
    },
    "disableFriendlyErrors": {
      "description": "스케치를 만드는 동안 '친근한 에러 시스템(Friendly Error System, FES)'을 필요시 비활성화하여 성능을 향상시킵니다. <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'>친근한 에러 시스템 비활성화하기</a>를 참고하세요.",
      "returns": ""
    },
    "noLoop": {
      "description": "p5.js가 draw() 함수 안에 포함된 코드를 계속 실행하지 않도록 합니다. loop() 함수가 호출될 경우, draw() 함수 안의 코드가 다시 계속 실행 됩니다. setup() 함수 안에 noLoop() 함수를 사용할 경우, setup() 함수 블록의 가장 마지막 줄에 작성합니다.<br><br>noLoop()을 사용하면, mousePressed()나 keyPressed()와 같은 이벤트 처리 함수를 통해 화면에 접근하거나 조정할 수 없습니다. 대신,  redraw()나 loop() 함수들을 이용하여, 화면 업데이트 함수인 draw()를 재실행시켜 이벤트 처리 함수를 실행할 수 있습니다. 다시 말해, noLoop() 함수가 호출된다는 것은 draw()가 실행되지 않으며, saveFrame()이나 loadPixels()와 같은 함수 역시 사용할 수 없음을 뜻합니다.<br><br>스케치 크기를 재조정하면, noLoop() 함수가 호출되지 않더라도 redraw()가 호출되어 스케치를 업데이트하는 점에 유의하세요. 그렇지 않으면, 스케치는 loop()가 호출될 때까지 예기치 못한 반응을 보일 수 있습니다.",
      "returns": ""
    },
    "loop": {
      "description": "기본값으로, p5.js는 draw() 함수 안에 포함된 코드를 계속해서 반복 실행(loop)합니다. 하지만, draw() 함수의 반복 실행 기능은 noLoop() 함수를 통해 중단될 수 있습니다. 그 경우, draw()의 반복 실행 기능은 loop() 함수를 통해 재개할 수 있습니다.",
      "returns": ""
    },
    "push": {
      "description": "push() 함수는 현재의 드로잉 스타일 설정과 변형을 저장하고, pop() 함수는 이 설정들을 복구합니다. 이 함수들은 항상 함께 쓰이는 점에 유의하세요. 이 함수들을 통해 스타일과 변형 설정을 변경한 뒤에도 이전 설정 상태로 돌아갈 수 있습니다. push()와 pop() 함수들은 설정 사항에 대해 좀 더 많은 권한을 제공합니다. (두 번째 예제를 참고하세요.)<br><br> push()는 다음의 함수들을 통해 지정된 현재 변형 상태 및 스타일 설정 사항을 저장합니다: fill(), noFill(), noStroke(), stroke(), tint(), noTint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), textFont(), textSize(), textLeading(), applyMatrix(), resetMatrix(), rotate(), scale(), shearX(), shearY(), translate(), noiseSeed().<br><br>WebGL 모드에서는 다음의 함수들을 통해 지정된, 더욱 다양한 스타일 설정 사항이 저장될 수 있습니다:  setCamera(), ambientLight(), directionalLight(), pointLight(), texture(), specularMaterial(), shininess(), normalMaterial(), 그리고 shader()",
      "returns": ""
    },
    "pop": {
      "description": "push() 함수는 현재의 드로잉 스타일 설정과 변형을 저장하고, pop() 함수는 이 설정들을 복구합니다. 이 함수들은 항상 함께 쓰이는 점에 유의하세요. 이 함수들을 통해 스타일과 변형 설정을 변경한 뒤에도 이전 설정 상태로 돌아갈 수 있습니다. push()와 pop() 함수들은 설정 사항에 대해 좀 더 많은 권한을 제공합니다. (두 번째 예제를 참고하세요.)<br><br> push()는 다음의 함수들을 통해 지정된 현재 변형 상태 및 스타일 설정 사항을 저장합니다: fill(), noFill(), noStroke(), stroke(), tint(), noTint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), textFont(), textSize(), textLeading(), applyMatrix(), resetMatrix(), rotate(), scale(), shearX(), shearY(), translate(), noiseSeed().<br><br>WebGL 모드에서는 다음의 함수들을 통해 지정된, 더욱 다양한 스타일 설정 사항이 저장될 수 있습니다:  setCamera(), ambientLight(), directionalLight(), pointLight(), texture(), specularMaterial(), shininess(), normalMaterial(), 그리고 shader()""
    },
    "redraw": {
      "description": "draw() 함수 안에 포함된 코드를 한 번 재실행합니다. 이 함수를 통해 필요시에만 화면을 업데이트할 수 있습니다. mousePressed()나 keyPressed()가 지정한 이벤트를 발생시킬 때가 그 예입니다.<br><br>프로그램의 구조를 고려하면, mousePressed()와 같은 이벤트 함수에 redraw()를 호출하는 것이 좋습니다. 이는 redraw()가 draw()함수를 즉각적으로 실행시키지 않기 때문입니다. redraw()는 화면 업데이트가 필요함을 알리는 표식 설정만합니다.",
      "params": ["정수: n번 간 redraw() 함수 실행. 기본값은 1 (선택 사항)"],
      "returns": ""
    },
    "p5": {
      "description": "p5() 생성자로 전역 모드 대신 인스턴스 모드를 활성화할 수 있습니다. 이는 고급 활용 사례에 해당합니다. 간단한 설명과 예제가 아래에 포함되어 있습니다. 자세한 내용은 다니엘 쉬프만(Dan Shiffman)의 Coding Train 비디오 튜토리얼 또는 이 페이지를 참조하세요. <br><br> 기본값으로, 모든 p5.js 함수들은 전역 네임스페이스에 속합니다. (즉, 화면창 객체에 구속됩니다.) 이는, p5.js 함수들을 ellipse(), fill()과 같은 이름으로 불러올 수 있음을 뜻합니다. 하지만, 이러한 방식은 자바스크립트의 여타 (동기식 또는 비동기식) 라이브러리를 사용하거나 긴 코딩을 작성할 때 다소 불편할 수 있습니다. 따라서, p5.js는 인스턴스 모드를 통해 이 문제를 해결할 수 있는 방법을 지원합니다. 인스턴스 모드에서는 모든 p5 함수의 전역 네임 스페이스를 오염시키는 대신, 이를 단일 변수에 구속되게 만듭니다.<br><br>선택적으로, 캔버스나 다른 요소에 추가할 두 번째 인수로서 기본 컨테이너를 지정할 수 있습니다. HTML상 요소의 id나 노드 자체를 추가(append)할 수 있습니다.<br><br>이처럼 인스턴스를 만들면, 단일 웹페이지에 두 개 이상의 p5 스케치를 사용할 수 있게 됩니다. 각각의 고유한 설정 변수에 의거하기 때문입니다. 물론, 전역 모드에서도 iframe 기능을 이용하면 복수의 스케치를 웹페이지에 사용할 수 있습니다.",
      "params": ["객체: p5.js 스케치를 포함하는 함수", 
                 "문자열|객체: 스케치를 포함할 HTML DOM 노드 ID 또는 포인터"],
      "returns": ""
    },
    
//DOM
    
  "p5.Element": {
    "description": "캔버스, 그래픽 버퍼, 기타 HTML 요소를 비롯하여, 스케치에 추가된 모든 요소(element)들을 위한 기본 클래스입니다. p5.Element 클래스는 직접 호출되지 않지만, 그 객체는 createCanvas, createGraphics, createDiv, createImg, createInput 호출을 통해 생성됩니다.",
    "params": ["문자열: 래핑된 DOM 노드",
               "P5: p5 인스턴스에 대한 포인터 (선택 사항)"
              ],
    "fields": ["기본 HTML 요소로, 모든 일반 HTML 메소드를 호출."
               ],
    "methods": ["지정된 부모 클래스에 요소를 연결합니다. 요소의 컨테이너를 설정하는 방법입니다. 문자열 ID, DOM 노드, 또는 p5.Element를 허용합니다. 별도의 인수가 지정되지 않을 경우, 부모 노드가 반환됩니다. 캔버스 배치하는 다른 방법들은 <a href= 'https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>이 위키 페이지</a>를 참고하세요.",
                "요소의 ID를 설정합니다. 별도로 지정한 ID 인수가 없으면, 요소의 현재 ID를 반환합니다. 요소당 1개의 특정 id를 가질 수 있습니다. .class() 함수는 동일한 클래스 이름을 가진 여러 요소들을 식별하는 데에 사용됩니다.",
                "사용자가 지정한 클래스를 요소에 더합니다. 별도로 지정한 클래스 인수가 없으면, 요소의 현재 클래스(들)를 포함하는 문자열을 반환합니다.",
                ".mousePressed() 함수는 요소 위에서 마우스 버튼이 눌릴 때마다 한 번씩 호출됩니다. 터치 스크린 기반의 모바일 브라우저에서는 손가락 탭을 통해 이벤트가 발생합니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".doubleClicked() 함수는 요소 위에서 마우스 버튼을 빠르게 두 번 클릭할 때마다 한 번씩 호출됩니다. 요소에 행동 특정적 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".mouseWheel() 함수는 요소 위에서 마우스 휠을 스크롤 할 때마다 한 번싹 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.<br> 이 함수에서는 콜백 함수를 인수로서 사용할 수 있습니다. 그 경우, 요소 위에서 휠 이벤트가 발생할 때마다 콜백 함수가 하나의 event 인수로서 전달됩니다. event.deltaY 속성은 마우스 휠이 위쪽으로 회전하거나 사용자로부터 멀어지면 음수값을 반환하고, 그 반대 방향에선 양수값을 반환합니다. event.deltaX 속성은 마우스 가로 휠 스크롤을 읽는다는 점을 제외하고 event.deltaY와 동일하게 작동합니다.",
                ".mouseReleased() 함수는 요소 위에서 마우스 버튼을 놓을 때마다 한 번씩 호출됩니다. 터치 스크린 기반의 모바일 브라우저에서는 손가락 탭을 통해 이벤트가 발생합니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".mouseClicked() 함수는 요소 위에서 마우스 버튼을 클릭한 뒤 놓을 때마다 한 번씩 호출됩니다. 터치 스크린 기반의 모바일 브라우저에서는 손가락 탭을 통해 이벤트가 발생합니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".mouseMoved() 함수는 마우스가 요소 위에서 움직일 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".mouseOver() 함수는 마우스가 요소 위에 올라올 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".mouseOut() 함수는 마우스가 요소 위에서 벗어날 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".touchStarted() 함수는 터치가 등록될 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".touchMoved() 함수는 터치 움직임이 등록될 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".touchEnded() 함수는 터치가 등록될 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".dragOver() 함수는 요소 위에 파일을 드래그할 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                ".dragLeave() 함수는 드래그된 파일이 요소 영역을 벗어날 때마다 한 번씩 호출됩니다. 요소에 이벤트 리스너를 연결하는 데에 사용됩니다.",
                "요소에 특정 클래스를 추가합니다.",
                "요소로부터 특정 클래스를 제거합니다.",
                "요소에 이미 클래스가 설정되어 있는지 확인합니다.",
                "요소 클래스를 토글합니다.",
                "지정된 부모 클래스에 요소를 자식으로서 연결합니다. 문자열 ID, DOM 노드, 또는 p5.Element를 허용합니다. 별도의 인수가 지정되지 않을 경우, 자식 DOM 노드 배열이 반환됩니다. ",
                "p5 Element를 수직으로, 수평으로, 또는 수직 및 수평으로 가운데 정렬합니다. 별도로 지정한 부모가 있는 경우 부모를 기준으로, 부모가 없는 경우 그 자신을 기준으로 합니다. 별도로 지정한 인수가 없으면 요소는 수직 및 수평으로 정렬됩니다.",
                "사용자가 별도로 지정한 인수로서 요소의 내부 HTML을 설정하며, 기존의 모든 HTML를 대체합니다. 참(true)이 그 2번째 인수로서 포함된 경우, 기존의 모든 HTML을 대체하는 대신 새로운 HTML을 추가(append)합니다. 별도로 지정한 인수가 없으면 요소의 내부 HTML을 반환합니다.",
                "요소의 위치를 설정합니다. 별도로 지정한 위치 유형 인수가 없는 경우, 화면창의 (0,0)을 기준으로 합니다. 기본적으로, 이 메소드를 통해 position:absolute와 left 및 top 스타일 속성을 설정합니다. 선택적으로, 3번째 인수를 통해 x 및 y 좌표의 <a href ='https://developer.mozilla.org/en-US/docs/Web/CSS/position'>위치 지정 체계</a>를 설정할 수 있습니다. 별도로 지정한 인수가 없으면 함수는 요소의 x와 y의 위치를 반환합니다.",
                "별도 지정한 값(2번째 인수)으로 CSS 스타일 속성(1번째 인수)을 설정합니다. 1개의 인수만 지정할 경우, .style()은 주어진 속성의 값을 반환합니다. 그러나 이 인수를 CSS 구문('text-align:center')으로 작성할 경우, .style()은 CSS를 설정합니다.",
                "사용자가 지정한 요소에 새 속성을 추가하거나, 요소의 기존 속성값을 변경합니다. 별도로 지정한 값이 없는 경우 주어진 속성의 값을 반환하고, 속성이 설정되지 않은 경우 null을 반환합니다. ",
                "요소로부터 속성을 제거합니다.",
                "별도로 지정한 인수가 없는 경우, 요소의 값을 반환하거나 설정합니다.",
                "현재 요소를 보여줍니다. display:block로 스타일을 설정합니다.",
                "현재 요소를 숨깁니다. display:none으로 스타일을 설정합니다.",
                "요소의 너비와 높이를 설정합니다. AUTO는 한 번에 한 개의 수치를 조정하는 데에 쓰입니다. 별도로 지정한 인수가 없는 경우, 객체 속 요소의 너비와 높이를 반환합니다. 이미지 파일과 같이 불러오기가 필요한 요소의 경우, 불러오기가 완료된 후 함수를 호출하는 것을 권장합니다.",
                "요소를 제거하고, 모든 미디어 스트림을 중지하며, 모든 리스너를 해제합니다.",
                "요소에 드롭된 파일이 로드될 때마다 호출되는 콜백을 등록합니다. p5는 메모리에 드롭된 모든 파일을 로드하고 이를 p5.File 객체로서 콜백에 전달합니다. 동시에 여러 파일을 드롭할 경우, 콜백이 여러 번 호출됩니다. 선택적으로, raw 드롭 이벤트에 등록될 2번째 콜백을 전달할 수 있습니다. 이 경우, 콜백에 본래 DragEvent도 제공됩니다. 동시에 여러 파일을 드롭하면 2번째 콜백이 드롭당 한 번씩 발생하며, 1번째 콜백은 로드된 파일당 한 번씩 발생합니다.",
               ]
  },

  "select": {
    "description": "지정한 ID, 클래스, 또는 태그 이름(접두어 '#'로 ID를, '.'로 클래스 지정 가능, 태그는 별도의 접두어 없음)에 해당하는 요소를 페이지 내에서 검색하고, p5.Element를 반환합니다. 클래스나 태그의 이름이 2개 이상의 요소로 지정된 경우, 1번째 요소만 반환됩니다. DOM 노드는 .elt로 검섹할 수 있습니다. 아무 것도 검색되지 않을 경우 null을 반환합니다. 검색할 컨테이너를 별도로 지정할 수 있습니다.",
    "params": ["문자열: 검색할 요소의 id, 클래스, 또는 태그 이름",
               "문자열|p5.Element|HTML 요소: id, p5.Element, 또는 HTML 요소 내에서 검색(선택 사항)"],
    "returns": "검색된 노드를 포함한 p5.Element"
  },
  "selectAll": {
    "description": "지정한 클래스 또는 태그 이름('.'로 클래스 지정 가능, 태그는 별도의 접두어 없음)에 해당하는 요소를 페이지 내에서 검색하고, p5.Element 배열로 반환합니다. DOM 노드는 .elt로 검색할 수 있습니다. 아무 것도 검색되지 않을 경우 빈 배열을 반환합니다. 검색할 컨테이너를 별도로 지정할 수 있습니다.",
    "params": ["문자열: 검색할 요소의 클래스 또는 태그 이름",
               "문자열: id, p5.Element, 또는 HTML 요소 내에서 검색(선택 사항)"],
    "returns": "검색된 노드를 포함한 p5.Element 배열"
  },
  "removeElements": {
    "description": "createCanvase() 또는 createGraphics()로 생성된 캔버스와 그래픽을 제외하고, p5로 생성된 모든 요소를 제거합니다. 이벤트 핸들러 역시 제거되며, 요소가 DOM에서 제거됩니다.",
    "params": "",
    "returns": ""
  },
  "changed": {
    "description": ".changed() 함수는 요소값이 변경될 때 호출됩니다. 특정 요소의 이벤트 리스너와 연결하는 데에 사용됩니다.",
    "params": ["함수|불리언: 요소값이 변경될 때 발생하는 함수. 거짓(false)이 전달되면 이전 실행 함수는 더이상 실행 불가"],
    "returns": ""
  },
  "input": {
    "description": ".input() 함수는 요소가 사용자 입력을 감지할 때 호출됩니다. 입력 이벤트는 키 또는 슬라이더 요소의 변경을 감지합니다. 특정 요소의 이벤트 리스너와 연결하는 데에 사용됩니다.",
    "params": ["함수|불리언: 요소가 사용자 입력을 감지할 때 발생하는 함수. 거짓(false)이 전달되면 이전 실행 함수는 더이상 실행 불가"],
    "returns": ""
  },
  "createDiv": {
    "description": "주어진 내부 HTML을 사용하여 DOM에 <div></div> 요소를 생성합니다.",
    "params": ["문자열: 요소를 생성한 내부 HTML (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createP": {
    "description": "주어진 내부 HTML을 사용하여 DOM에 <p></p> 요소를 생성합니다. 문단형 텍스트 작성시 사용됩니다.",
    "params": ["문자열: 요소를 생성한 내부 HTML (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createSpan": {
    "description": "주어진 내부 HTML을 사용하여 DOM에 <span></span> 요소를 생성합니다.",
    "params": ["문자열: 요소를 생성한 내부 HTML (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createImg": {
    "description": "주어진 src와 대체 텍스트(alt text)를 사용하여 DOM에 <img> 요소를 생성합니다.",
    "params": ["문자열: 이미지의 src 또는 url 경로",
               "문자열: 이미지가 로드되지 않을 경우 사용할 <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes'>대체 텍스트</a>. 빈 문자열(" ")로 이미지 숨기기 가능",
               "문자열: img 요소의 <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin'>교차 출처 속성(crossOrigin property)</a>. '익명(anonymous)' 또는 '사용 자격 증명(use-credentials)'을 통해 교차 출처 권한이 있는 이미지를 검색하세요. 이는 캔버스에 이미지를 사용하기 위함이며, 빈 문자열(" ")이 전달된 경우 교차 출처 리소스 공유(CORS)는 사용되지 않습니다.",
               "gkatn: 인수로 지정된 p5.Element가 이미지 데이터를 불러왔을 때 호출되는 콜백 함수 (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createA": {
    "description": "DOM에 하이퍼링크를 포함한 <a></a> 요소를 생성합니다.",
    "params": ["문자열: 링크될 페이지 url",
               "문자열: 화면에 보여질 링크 요소의 내부 HTML",
               "문자열: 새로운 링크가 보여질 대상, _blank, _self, _parent, _top 중 지정 가능 (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createSlider": {
    "description": "DOM에 슬라이더<input></input> 요소를 생성합니다. .size() 함수로 슬라이더의 길이를 설정합니다.",
    "params": ["숫자: 슬라이더의 최소값",
               "숫자: 슬라이더의 최대값",
               "숫자: 슬라이더의 기본값(선택 사항)",
               "숫자: 슬라이더의 단위당 이동 크기(이동 크기가 0으로 지정된 경우, 슬라이더는 최소값과 최대값 사이를 부드럽게 이동합니다.)(선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createButton": {
    "description": "DOM에 <button></button> 요소를 생성합니다. .size() 함수로 버튼의 크기를 설정합니다. .mousePressed() 함수로 버튼이 클릭됐을 때의 행동을 지정합니다.",
    "params": ["문자열: 버튼 위에 나타나는 레이블",
               "문자열: 버튼값 (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createCheckbox": {
    "description": "DOM에 체크박스<input></input> 요소를 생성합니다. .checked() 함수를 통해 체크되었는지의 여부를 반환합니다.",
    "params": ["문자열: 체크박스 위에 나타나는 레이블 (선택 사항)",
               "불리언: 체크박스의 값: 체크는 참(true), 체크 해제는 거짓(false) (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createSelect": {
    "description": "DOM에 드롭다운 메뉴<select></select> 요소를 생성합니다. 이미 생성된 셀렉트 박스(select box)를 선택할 경우, p5.Element에 select-box 메소드를 지정하는 데에도 쓰입니다. 셀렉트 박스 생성 후, .option() 메소드로 선택지(option)를 설정할 수 있습니다. .selected() 메소드는 p5.Element 인스턴스인 현재 드롭다운 요소를 반환합니다. .selected() 메소드는 특정 선택지를 최초 페이지 로드시의 기본값으로서 설정할 수 있습니다. .disable() 메소드는 특정 선택지를 비활성화하고, 별도로 지정된 인수가 없는 경우엔 전체 드롭다운 요소를 비활성화 상태로 표시합니다.",
    "params": ["불리언: 드롭다운이 여러 개의 선택지를 제공할 경우 참(true) (선택 사항)",
               "객체: DOM 셀렉트 요소"],
    "returns": "p5.Element"
  },
  "createRadio": {
    "description": "DOM에 라디오 버튼<input></input> 요소를 생성합니다. 라디오 버튼 생성 후, .option() 메소드로 옵션을 설정할 수 있습니다. .value() 메소드는 현재 선택된 옵션을 반환합니다.",
    "params": ["문자열: 생성된 div와 input field 각각의 id 및 이름 (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createColorPicker": {
    "description": "DOM에 색상 입력을 위한 색상 추출(colorPicker) 요소를 생성합니다. .value() 메소드는 색상의 헥사(Hex) 문자열(#rrggbb)을 반환합니다. .color() 메소드는 현재 선택된 색상의 p5.Color 객체를 반환합니다.",
    "params": ["문자열|p5.Color: 요소의 색상 기본값 (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createInput": {
    "description": "DOM에 텍스트 입력을 위한 <input></input> 요소를 생성합니다. .size() 함수로 상자의 크기를 설정합니다.",
    "params": ["문자열: 입력 상자의 기본값 (선택 사항)",
               "문자열: 텍스트 유형 (예: text, password 등) 기본값은 text (선택 사항)"],
    "returns": "p5.Element: 생성된 노드를 담고있는 p5.Element에 대한 포인터"
  },
  "createFileInput": {
    "description": "'파일(file)' 유형의 DOM에 <input></input> 요소를 생성합니다. 스케치에 사용할 로컬 파일을 선택할 수 있게 됩니다.",
    "params": ["함수: 파일이 로드될 때의 콜백 함수 (선택 사항)",
               "문자열: 여러 파일 선택 허용 (선택 사항)"],
    "returns": "p5.Element: 생성된 DOM 요소를 담고있는 p5.Element에 대한 포인터"
  },
  "createVideo": {
    "description": "DOM에 간단한 오디오/비디오 재생을 위한 HTML5 <video> 요소를 생성합니다. 화면에 나타나기가 기본값이며, .hide()로 숨길 수 있습니다. video() 함수를 통해 캔버스에 그릴 수 있습니다. 1번째 매개 변수는 비디오 파일에 대한 단일 문자열 경로이거나, 또는 동일한 비디오 파일이 여러 개의 형식을 갖는 경우, 문자열 경로들의 배열로 지정됩니다. 특히, 다양한 파일 형식을 지정하여 여러 종류의 브라우저에서 재생될 수 있도록 하는 데에 용이합니다. 지원되는 파일 형식에 대한 자세한 내용은 <a href = 'https://developer.mozilla.org/en-US/docs/Web/Media/Formats'>이 페이지</a>를 참고하세요. ",
    "params": ["문자열|문자열 배열[]: 비디오 파일 경로, 또는 경로들의 배열(여러 종류의 브라우저 지원)",
               "함수: 브라우저의 미디어 재생가능 상태를 뜻하는, 'canplaythrough' 이벤트 발생시에 호출되는 함수. 추가 버퍼링 없이도, 미디어를 끝까지 재생할 수 있는 충분한 데이터가 로드된 것으로 평가. (선택 사항)"],
    "returns": "p5.MediaElement: 비디오 p5.Element에 대한 포인터"
  },
  "createAudio": {
    "description": "DOM에 간단한 오디오 재생을 위한 HTML5 <audio> 요소를 생성합니다. 1번째 매개 변수는 오디오 파일에 대한 단일 문자열 경로이거나, 또는 동일한 오디오 파일이 여러 개의 형식을 갖는 경우, 문자열 경로들의 배열로 지정됩니다. 특히, 다양한 파일 형식을 지정하여 여러 종류의 브라우저에서 재생될 수 있도록 하는 데에 용이합니다. 지원되는 파일 형식에 대한 자세한 내용은 <a href = 'https://developer.mozilla.org/en-US/docs/Web/Media/Formats'>이 페이지</a>를 참고하세요. ",
    "params": ["문자열|문자열 배열[]: 오디오 파일 경로, 또는 경로들의 배열(여러 종류의 브라우저 지원)",
               "함수: 브라우저의 미디어 재생가능 상태를 뜻하는, 'canplaythrough' 이벤트 발생시에 호출되는 함수. 추가 버퍼링 없이도, 미디어를 끝까지 재생할 수 있는 충분한 데이터가 로드된 것으로 평가. (선택 사항)"],
    "returns": "p5.MediaElement: 오디오 p5.Element에 대한 포인터"
  },
  "VIDEO": {
    "description": "",
    "params": [""],
    "returns": ""
  },
  "AUDIO": {
    "description": "",
    "params": [""],
    "returns": ""
  },
  "createCapture": {
    "description": "웹캠의 오디오/비디오 피드를 담는 <video> 요소를 생성합니다. 이 요소는 캔버스와는 별개로 작동합니다. '화면에 나타내기'가 기본값으로 주어지며, .hide()를 사용하여 화면으로부터 숨길 수 있습니다. image() 함수를 사용하여 피드를 캔버스에 그릴 수 있습니다. loadedmetadata 속성을 사용하여 요소가 완전히 로드된 시점을 감지할 수 있습니다. (2번째 예제 참고)<br><br> 피드의 구체적인 속성은 제약 조건(Constraints) 객체를 전달할 수 있습니다. 속성 및 제약 조건 객체와 관련해서는 <a href = 'https://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'>W3C 사양</a>을 참고하세요. 모든 브라우저가 이 기능을 지원하지 않는 점에 유의하세요.<br><br>보안 정보: 최신 브라우저 보안 사양은 createCapture() 이면의 getUserMedia() 메소드가 로컬 또는 HTTPS에서 코드 실행시에만 작동할 것을 요구합니다. 자세한 사항은 <a href = 'https://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https'>여기</a>와 <a href = 'https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia'>여기</a>서 확인하세요. ",
    "params": ["문자열|상수|객체: 캡쳐 유형, VIDEO 또는 AUDIO 중 하나로 지정 가능. 별도의 매개 변수가 지정되지 않을 경우 기본값으로 둘 다 또는 제약 조건 객체",
               "함수: 스트림 로드 완료 후 1번 호출되는 함수 (선택 사항)"],
    "returns": ""
  },
  "createElement": {
    "description": "지정된 콘텐츠를 지닌 DOM에 태그된 요소를 생성합니다.",
    "params": ["문자열: 새로운 요소의 태그",
               "문자열: 요소 안에 삽입될 HTML 콘텐츠 (선택 사항)"],
    "returns": ""
  },
  "p5.MediaElement": {
    "description": "오디오/비디오 처리를 위해 p5.Element를 확장합니다. p5.Element의 메소드 뿐 아니라, 미디어 제어를 위한 메소드도 포함합니다. p5.MediaElements는 직접 호출되지 않지만, createVideo, createAudio, CreateCapture 호출을 통해 생성됩니다.",
    "params": ["문자열: 래핑된 DOM 노드"],
    "fields": ["미디어 요소 소스 경로"],
    "methods": ["HTML5 미디어 요소를 재생합니다.",
               "HTML5 미디어 요소를 중지합니다. (현재 시간을 0으로 설정)",
               "HTML5 미디어 요소를 일시정지합니다.",
               "HTML5 미디어 요소의 반복을 참(true)로 설정하고, 재생 시작합니다.",
               "HTML5 미디어 요소의 반복을 거짓(false)으로 설정합니다. 종료 시점에 도달하면 요소가 중지합니다.",
               "HTML5 미디어 요소 자동재생 여부 설정",
               "HTML5 미디어 요소의 볼륨을 설정합니다. 별도로 지정한 인수가 없으면, 현재 볼륨을 반환합니다.",
               "별도로 지정한 인수가 없으면, 요소의 현재 재생 속도를 반환하빈다. 속도 매개 변수는 2.0일 때 2배속으로, 0.5일 때 0.5배속으로, -1일 때 정상 속도로 역재생합니다. (모든 브라우저가 역재생을 지원하지 않으며, 일부 지원 브라우저에서도 부드럽게 재생되지 않을 수 있습니다.)",
               "별도로 지정한 인수가 없을 경우, 요소의 현재 시간을 반환합니다. 인수가 지정될 경우, 요소의 현재 시간이 해당 인수로 설정됩니다.",
               "HTML5 미디어 요소의 지속 시간을 반환합니다.",
               "오디오/비디오 요소가 종료 시점에 도달할 때 호출할 이벤트를 예약합니다. 요소가 반복하는 경우 호출되지 않습니다. 요소는 oneded 콜백에 인수로 전달됩니다.",
               "요소가 출력한 오디오를 특정 audioNode나 p5.sound 객체로 보냅니다. 요소가 없는 경우, p5의 마스터 출력에 연결합니다. 모든 연결은 .disconnect() 메소드로 제거할 수 있습니다. p5.sound.js 애드온 라이브러리로 이러한 방법을 사용할 수 있습니다.",
               "마스터 출력을 비롯하여 모든 웹 오디오 라우팅을 분리합니다. 사용 예: 오디오 효과를 통해 출력을 다시 라우팅할 때",
               "웹 브라우저가 지정한 기본 미디어 요소(MediaElement) 컨트롤을 나타냅니다.",
               "기본 미디어 요소(MediaElement) 컨트롤을 숨깁니다.",
               "오디오/비디오와 같은 미디어 요소(MediaElement)가 재생 큐 지점에 도달할 때 발생할 이벤트를 예약합니다. 콜백 함수, 콜백이 발생할 시간(초 단위), 콜백에 대한 선택적 매개 변수를 허용합니다. 1번째 매개 변수는 시간(time)을, 2번째 매개 변수는 param을 콜백 함수에 전달합니다.",
               "ID를 기반으로 콜백을 제거합니다. ID는 addCue 메소드로 반환됩니다.",
               "addCue 메소드로 예약된 모든 콜백을 제거합니다."],
    "returns": ""
  },
  "p5.File": {
    "description": "파일을 위한 기본 클래스입니다. Element.drop()과 createFileInput()에 사용됩니다.",
    "params": "파일: 래핑된 파일",
    "fields": ["기본 파일 객체. 모든 일반 File 메소드를 호출할 수 있습니다.",
              "파일 유형 (이미지, 텍스트 등)",
              "파일 하위 유형 (주로 jpg, png, xml 등의 파일 확장자)",
              "파일명",
              "파일 크기",
              "이미지 데이터를 담는 URL 문자열"],
    "returns": ""
  },
    
//Rendering
    
  "p5.Graphics": {
    "description": "렌더러을 둘러싼 얇은 래퍼(wrapper)로, 그래픽 버퍼 객체를 생성하는 데에 사용합니다. 화면 밖 그래픽 버퍼에 그리려면 이 클래스를 사용하세요. 2개의 매개 변수는 너비와 높이를 픽셀 단위로 지정합니다. 이 클래스의 필드와 메소드는 확장성이 있으나, p5를 위한 일반적인 드로잉 API를 반영합니다.<br>p5.Element를 확장합니다.",
    "params": ["숫자: 너비값",
               "숫자: 높이값",
               "상수: 사용할 렌더러, P2D 또는 WEBGL",
               "P5: p5 인스턴스에 대한 포인터 (선택 사항)",
    ""],
    "methods": ["그래픽 버퍼 객체로 자동 재설정되지 않은 특정값들(예: 레퍼런스 중 변형(Transform) 또는 라이트(Light) 항목에 해당하는 함수들로서 지정된 값들). 이 메소드를 draw() 함수 안에서 호출하면, 기본 캔버스의 행위를 복제합니다.",
               "페이지에서 그래픽 객체를 제거하고 이 객체에 연결된 모든 소스들을 연결 해제합니다."]
  },
  "createCanvas": {
      "description": "캔버스를 생성하고 픽셀 단위로 크기를 설정합니다. createCanvas()는 setup() 함수 시작시 단 한 번만 실행되어야 합니다. createCanvas()를 한 번 이상 호출하면 스케치가 예기치 못한 반응을 보일 수 있습니다. 두 개 이상의 캔버스가 필요하다면 createGraphics()를 이용하세요.<br><br>설정된 캔버스 사이즈는 시스템 변수인 너비(width)와 높이(height)에 각각 저장됩니다. createCanvas() 함수를 생략하면, 스케치의 크기는 기본값인 100x100 픽셀로 지정됩니다.<br><br>캔버스의 위치 지정 방법을 알고싶다면, <a href = 'https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>캔버스 위치 지정하기</a> 위키 페이지를 참고하세요.",
      "params": ["숫자: 캔버스의 너비값",
      "숫자: 캔버스의 높이값",
      "상수: P2D 또는 WEBGL (선택 사항)"],
      "returns": "p5.Renderer"
    },
      
    "resizeCanvas": {
      "description": "사용자가 지정한 너비와 높이로 캔버스 크기를 재조정합니다. 이 함수를 사용하면 캔버스는 클리어되며, draw() 함수가 곧바로 호출되어 스케치를 재조정된 크기의 캔버스로 다시 렌더링되게 합니다.",
      "params": ["숫자: 캔버스의 너비값",
                 "숫자: 캔버스의 높이값",
                 "불리언: 캔버스를 곧바로 다시 그리지 않도록 처리할지의 여부 (선택 사항)"],
      "returns": ""
    },
    "noCanvas": {
      "description": "캔버스가 불필요한 p5 스케치를 위해 기본적으로 제공되는 캔버스를 제거합니다.",
      "returns": ""
    },
    "createGraphics": {
      "description": "새로운 p5.Renderer 객체를 생성하고 반환합니다. 화면 밖 그래픽 버퍼(off-screen graphic buffer)에 그리려면 이 클래스를 사용하세요. 2개의 매개 변수는 너비와 높이를 픽셀 단위로 지정합니다.",
      "params": ["숫자: 화면 밖 그래픽 버퍼의 너비값",
                 "숫자: 화면 밖 그래픽 버퍼의 높이값",
                 "상수：P2D 또는 WEBGL, 기본값은 P2D"],
      "returns": "p5.Graphics: 화면 밖 그래픽 버퍼"
    },
    "blendMode": {
      "description": "지정된 모드에 따라 디스플레이 화면상의 픽셀들을 혼합합니다. 소스 픽셀 (A)를 디스플레이 화면 (B)상에 있는 픽셀과 혼합하기 위해 다음 모드를 선택할 수 있습니다:<br><ul><li><code>BLEND</code> - 색상 선형 보간:C = (A)\*계수 + (B). 기본 혼합 모드입니다.</li><li><code>ADD</code> - (A)와 (B)의 합</li><li><code>DARKEST</code> - 가장 어두운 색상만 혼합됩니다：C = min(A*계수, B).</li><li><code>LIGHTEST </code> - 가장 밝은 색상만 혼합됩니다.：C = max(A*계수, B).</li><li><code>DIFFERENCE</code> - 기본 이미지에서 색상값을 뺄셈합니다.</li><li><code>EXCLUSION</code> - DIFFERENCE와 유사하지만 덜 극적입니다.</li><li><code>MULTIPLY</code> - 색상을 곱하는 것으로, 결과값은 좀 더 어둡습니다.</li><li><code>SCREEN</code> - MULTIPLY와 반대로 색상의 반전된 값을 사용합니다.</li><li><code>REPLACE</code> - 픽셀이 다른 픽셀을 완전히 대체하며 알파값(투명도)를 사용하지 않습니다.</li><li><code>OVERLAY</code> - MULTIPLY와 SCREEN의 혼합으로, 어두운 값을 곱하고 밝은 값의 반전된 값을 사용합니다. (2D)</li><li><code>HARD_LIGHT</code> - 회색값이 50%보다 높으면 SCREEN로, 낮으면 MULTIPLY로 처리합니다. (2D)</li><li><code>SOFT_LIGHT</code> - DARKEST와 LIGHTEST 혼합으로, OVERLAY처럼 작동하나 덜 강합니다. (2D)</li><li><code>DODGE</code> - 밝은 색조를 더 밝게 처리하고 대비를 높이며, 어두운 영역은 무시합니다. (2D)</li><li><code>BURN</code> - 어두운 영역이 적용되어 대비가 증가하고 밝기는 무시됩니다. (2D)</li><li><code>SUBTRACT</code> - (A)와 (B)의 나머지(3D)</li></ul><br><br>(2D)는 2D 렌더러에서만 작동하는 혼합 모드를 뜻합니다.<br>(3D)는 WEBGL 렌더러에서만 작동하는 혼합 모드를 뜻합니다.",
      "params": ["상수：캔버스에 설정되는 혼합 모드. BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN, ADD, REMOVE 또는 SUBTRACT 중 하나"]
      "returns": ""
    },
    "drawingContext": {
        "description": "p5.js API는 다양한 그래픽 제작 기능들을 제공하지만, p5에 노출되지 않는 HTML5 고유의 캔버스 기능이 있습니다. 그러한 기능들은 예제처럼 drawingContext 변수를 사용하여 직접 호출할 수 있습니다. 이는 canvas.getContext('2d') 또는 canvas.getContext('webgl') 함수를 호출하는 것과도 같습니다. 호출 가능한 함수를 확인하려면 <a href ='https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D'>기본 캔버스 API 레퍼런스</a>를 참고하세요.",
        "params": ["",
        ""],
        "returns": "TODO"
      },

    "setAttributes": {
      "description": "WebGL 드로잉 컨텍스트의 속성을 설정하여 WebGL 렌더러가 화면과 성능을 미세 조정할 수 있도록 합니다.<br><br> WebGL 캔버스를 생성한 후에 이 함수를 호출하면 드로잉 컨텍스트가 다시 초기화되는 점에 유의하세요. <br><br>객체가 매개 변수로 전달될 경우, 객체에 선언되지 않은 모든 속성은 기본값으로 처리됩니다.<br><br>사용한 가능한 속성은 다음과 같습니다:<br>alpha - 캔버스에 알파 버퍼가 있는지의 여부를 나타냅니다. 기본값은 참(true)입니다.<br>stencil - 드로잉 버퍼에 8비트 이상의 스텐실 버퍼가 있는지 여부를 나타냅니다.<br>antialias - 안티앨리어싱 기본값을 수행할지 여부를 나타냅니다. (Safari에서는 참)<br>premultipliedAlpha -   드로잉 버퍼에 포함된 색상이 미리 곱해진 알파 기본값을 포함하는 지의 여부에 대해, 페이지 컴포지터가 거짓(false)으로 가정하고 있음을 나타냅니다.<br>perPixelLighting - 참(true)이라면, 픽셀당 라이팅(per-pixel Lighting)이 라이팅 셰이더에 사용됩니다. 그렇지 않다면, 꼭지점당 라이팅(per-vertex lighting)이 사용됩니다. 기본값은 참입니다.",
      "params": ["문자열: 속성명",
                 "불리언: 명명된 속성의 새로운 값",
                 "객체: 주요값들의 쌍을 갖는 객체"]
    },

      

//Foundation

      
  "let": {
    "description": "새로운 변수를 생성하고 그 이름을 지정합니다. 변수는 값을 담는 컨테이너입니다.<br>let으로 선언된 변수는 블록 단위의 적용 범위를 갖습니다. 즉, 변수가 작성된 블록 내에서만 존재하고 사용될 수 있음을 뜻합니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let'>MDN Entry</a>에서 발췌: 블록 범위의 지역 변수를 선언하고, 선택적으로 그 값을 초기화합니다.",
    "params": ["",
    ""],
    "returns": ""
  },
    
  "const": {
    "description": "새로운 상수를 생성하고 그 이름을 지정합니다. 마치 let으로 생성된 변수처럼, const로 생성된 상수는 값을 담는 컨테이너입니다. 하지만, 상수는 한 번 산언된 다음 변경할 수 없습니다.<br>const로 선언된 상수는 블록 단위의 적용 범위를 갖습니다. 즉, 상수가 작성된 블록 내에서만 존재하고 사용될 수 있음을 뜻합니다. 상수는 자신이 존재하고 있는 범위 내에서 재선언될 수 없습니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const'>MDN Entry</a>에서 발췌: 읽기만 가능한 상수를 선언합니다. const는 블록 단위로 적용되며, let으로 선언된 변수들과 유사합니다. 상수값은 재지정을 통해 변경될 수 없으며, 재선언될 수 없습니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "===": {
    "description": "완전 항등 연산자 '===' 는 두 값이 같으면서 동시에 동일한 유형인지 여부를 확인합니다.<br>비교 표현식은 항상 불리언으로 연산됩니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators'>MDN Entry</a>에서 발췌: 이 연산자는 피연산자들이 동일한 값이 아니고/또는 동일한 유형이 아닐 때 참(true)을 반환합니다.<br>웹상의 몇몇 예제에서 피연산자 간의 비교를 위해 이중 등호(==)를 사용하는 것을 볼 수 있습니다. 이는 자바스크립트상의 완전 항등 연산자(===)에 해당하지 않으며, 두 피연산자의 값들을 비교하기에 앞서, 그 유형이 동일한지의 여부를 비교하게 됩니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  ">": {
    "description": "비교 연산자 > 는 왼쪽 값이 오른쪽 값보다 큰 경우 참(true)으로 연산합니다.<br><br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators'>MDN 발췌 비교 연산자 상세 설명</a>",
    "params": ["",
    ""],
    "returns": ""
  },
  ">=": {
    "description": "비교 연산자 >= 는 왼쪽 값이 오른쪽 값보다 크거나 같은 경우 참(true)로 연산합니다.<br><br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators'>MDN 발췌 비교 연산자 상세 설명</a>",
    "params": ["",
    ""],
    "returns": ""
  },
  "<": {
    "description": "비교 연산자 < 는 왼쪽 값이 오른쪽 값보다 작은 경우 참(true)으로 연산합니다.<br><br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators'>MDN 발췌 비교 연산자 상세 설명</a>",
    "params": ["",
    ""],
    "returns": ""
  },
  "<=": {
    "description": "비교 연산자 <= 는 왼쪽 값이 오른쪽 값보다 작거나 같은 경우 참(true)로 연산합니다.<br><br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators'>MDN 발췌 비교 연산자 상세 설명</a>",
    "params": ["",
    ""],
    "returns": ""
  },
  "if-else": {
    "description": "if-else문으로 코드의 흐름을 제어할 수 있습니다.<br>'if' 바로 다음 괄호 안에 조건을 지정할 수 있으며, 조건이 <a href = 'https://developer.mozilla.org/en-US/docs/Glossary/truthy'>참(truthy)</a>으로 연산되면 뒤따른 중괄호 사이의 코드가 실행됩니다. 조건이 <a href = 'https://developer.mozilla.org/en-US/docs/Glossary/Falsy'>거짓(falsy)</a>으로 연산되면 'else' 뒤에 오는 중괄호 사이의 코드가 대신 실행됩니다.<br><br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else'>MDN Entry</a>에서 발췌: 지정된 조건이 참일 경우, if문은 명령문을 실행합니다. 조건이 거짓이면 다른 명령문을 실행할 수 잇습니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "function": {
    "description": "새로운 <a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions'>함수(function)</a>를 생성하고 그 이름을 지정합니다. 함수란, 작업을 수행하는 일련의 명령문을 뜻합니다.<br> 선택적으로, 함수는 매개 변수를 가질 수 있습니다.<a href = 'https://developer.mozilla.org/en-US/docs/Glossary/Parameter'>매개 변수(parameter)</a>란, 특정 함수에만 그 사용 범위가 지정된 변수를 뜻하며 함수 호출시 그 값을 지정할 수 있습니다.<br><br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function'>MDN Entry</a>에서 발췌: 사용자가 지정한 매개 변수를 사용하여 함수를 선언합니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "return": {
    "description": "함수가 반환할 값을 지정합니다. <br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return'>MDN Entry 발췌 함수(function) 상세 설명</a>",
    "params": ["",
    ""],
    "returns": ""
  },
  "boolean": {
    "description": "불리언(boolean)은 자바스크립트에서 지정한 7개의 <a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values'>기본 데이터 유형</a> 중 하나입니다. 불리언은 참(true) 또는 거짓(false)으로 값을 나타냅니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type'>MDN Entry</a>에서 발췌: 불리언은 논리적 개체를 나타내며 참(true) 또는 거짓(false)이라는 두 개의 값만 갖습니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "string": {
    "description": "문자열(string)은 자바스크립트에서 지정한 7개의 <a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values'>기본 데이터 유형</a> 중 하나입니다. 문자열은 일련의 텍스트 문자들을 뜻하며, 자바스크립트에서 문자열 값은 작은 따옴표나 큰따옴표로 묶여 표현됩니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Glossary/string'>MDN Entry</a>에서 발췌: 문자열은 텍스트를 나타낼 때 사용하는 일련의 문자들입니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "number": {
    "description": "숫자(number)는 자바스크립트에서 지정한 7개의 <a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values'>기본 데이터 유형</a> 중 하나입니다. 숫자는 정수 또는 10진수로 표현됩니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Glossary/number'>MDN Entry 발췌 숫자(number) 상세 설명</a>",
    "params": ["",
    ""],
    "returns": ""
  },
  "object": {
    "description": "<a href = 'https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics'>MDN Entry 발췌 객체(object) 기초 설명</a>: 객체(object)는 데이터 그리고/또는 함수의 모음을 뜻합니다. 일반적으로 여러 개의 변수와 함수로 구성됩니다. 변수와 함수가 객체 안에 포함된 경우, 각각을 속성(property)과 메소드(method)라 부릅니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "class": {
    "description": "클래스(class)를 생성하고 그 이름을 지정합니다. 클래스는 객체(object) 생성을 위한 하나의 템플릿입니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Glossary/number'>MDN Entry</a>에서 발췌: 클래스 선언을 통해 새로운 Class를 생성합니다. 이 때, 새로운 Class의 이름은 프로토타입 기반 상속을 통해 지정됩니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "for": {
    "description": "for문을 사용하여 특정 섹션의 코드에 대한 반복문(loop)을 만듭니다.<br><br>'for 반복문(for loop)'은 괄호 속 3개의 다른 표현식들로 구성되며, 각각의 표현식은 모두 선택 사항입니다. 이 표현식들은 반복 실행(loop)의 횟수를 제어합니다. 1번째 표현식은 반복문의 초기 상태를 설정하는 명령문입니다. 2번째 표현식은 매 반복 실행에 앞서 조건 충족 여부를 확인합니다. 이 표현식이 거짓(false)를 반환하면 반복 실행이 종료됩니다. 3번째 표현식은 반복문의 가장 마지막 단계에 실행됩니다.<br><br>for 반복문의 본문(중괄호 사이의 영역)에 포함된 코드는 2번째와 3번째 표현식의 연산과정 사이에 실행됩니다.<br><br>여타 반복문과 마찬가지로, for 반복문 역시 반복이 '종료'되는 시점이나, 조건을 더이상 충족하지 않아 거짓(false)으로 연산되는 시점을 명시해야 합니다. 앞서 설명된 2번째 표현식을 통해, for 반복문의 조건이 거짓으로 연산되는 시점을 정할 수 있습니다. for반복문의 조건이 언젠가 거짓으로 처리되는 시점을 지정함으로써, 해당 반복문이 무한으로 실행되지 않도록 처리하기 위함입니다. 그렇지 않으면, 브라우저가 중단될 수 있습니다.<br><br><a href ='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for'>MDN Entry</a>에서 발췌: for 반복문은 조건이 거짓(false)으로 연산될 때까지 지정된 명령문을 실행합니다. 명령문을 실행한 후에는 조건 충족 여부를 다시 평가하여, 명령문이 최소 1번 실행되도록 합니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "while": {
    "description": "while문을 사용하여 특정 섹션의 코드에 대한 반복문(loop)을 만듭니다.<br><br>'while 반복문(while loop)'을 사용하면, 소괄호 속 조건이 거짓(false)이 될 때까지 중괄호 속 본문의 코드가 반복적으로 실행됩니다. for 반복문과 달리, while 반복문은 그 본문 속 코드를 실행하기 앞서 조건 충족 여부를 먼저 확인합니다. 따라서, 최초 실행시 조건이 거짓일 경우, while문 속 본문과 명령문은 절대 실행되지 않습니다.<br><br>여타 반복문과 마찬가지로, while 반복문 역시 반복이 '종료'되는 시점이나, 조건을 더이상 충족하지 않아 거짓(false)으로 연산되는 시점을 명시해야 합니다. while 반복문의 조건이 언젠가 거짓으로 처리되는 시점을 지정함으로써, 해당 반복문이 무한으로 실행되지 않도록 처리하기 위함입니다. 그렇지 않을 경우, 브라우저가 중단될 수 있습니다.<br><br><a href ='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while'>MDN Entry</a>에서 발췌: while 반복문은 조건이 참(true)인 경우에 한해 지정된 명령문을 실행합니다. 명령문 실행에 앞서 조건 충족 여부가 평가됩니다.",
    "params": ["",
    ""],
    "returns": ""
  },
  "JSON": {
    "description": "",
    "methods": ["<a href ='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify'>MDN Entry</a>에서 발췌: JSON.stringify() 메소드는 자바스크립트 객체나 값을 JSON 문자열로 변환합니다.",
    ""],
    "returns": ""
  },
  "console": {
    "description": "",
    "methods": ["브라우저의 웹 콘솔창에 메시지를 인쇄합니다. p5의 경우, print()와 console.log()를 모두 사용할 수 있습니다. 콘솔은 사용자의 브라우저에 따라 달라집니다. <a href = 'https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console'>Firefox</a>, <a href = 'https://developers.google.com/web/tools/chrome-devtools/open'>Chrome</a>, <a href = 'https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console'>Edge</a>, <a href = 'https://support.apple.com/en-ca/guide/safari/sfri20948/mac'>Safari</a>에서 콘솔을 여는 방법에 대한 링크는 다음과 같습니다. <a href ='https://editor.p5js.org/'>온라인 p5 에디터</a>의 경우, 콘솔창이 코드 에디터 하단에 임베드 되어있습니다. <a href = 'https://developer.mozilla.org/en-US/docs/Web/API/Console/log'>MDN Entry</a>에서 발췌: 콘솔 메소드 log()는 웹 콘솔에 메시지를 출력합니다. 메시지는 단일 문열(선택적으로, 대체값과 함께)이거나 한 개 이상의 자바스크립트 객체일 수 있습니다.",
    ""],
    "returns": ""
  },
    
    "applyMatrix": {
      "description": "현재 행렬(matrix)에 매개 변수로 지정된 행렬을 곱합니다. 평행 이동과 같은 연속 이동(translate), 크기 조정(scale), 전단(shear), 회전(rotate)을 한 번에 수행할 수 있습니다. <a href='https://ko.wikipedia.org/wiki/%EB%B3%80%ED%99%98%ED%96%89%EB%A0%AC'>변환행렬 위키피디아</a>에서 더 많은 정보를 확인할 수 있습니다.<br><br>이 때, 인수들은 <a href='https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform'>WHATWG 사양</a>에 따라 그 이름이 지정되며, 다음과 같은 형식의 변환 행렬에 상응합니다：<blockquote><p><img style='max-width: 150px' src='assets/transformation-matrix.png' alt='applyMatrix() 함수 호출시 사용되는 변환 행렬'></p></blockquote>",
      "params": ["숫자: 곱할 2x3 행렬 정의",
                 "숫자: 곱할 2x3 행렬 정의",
                 "숫자: 곱할 2x3 행렬 정의",
                 "숫자: 곱할 2x3 행렬 정의",
                 "숫자: 곱할 2x3 행렬 정의",
                 "숫자: 곱할 2x3 행렬 정의"],
      "returns": ""
    },
    "resetMatrix": {
      "description": "현재 행렬을 항등 행렬로 바꿉니다.",
      "returns": ""
    },
    "rotate": {
      "description": "사용자가 지정한 각도 매개 변수에 따라 도형을 회전합니다. 이 함수는 angleMode() 함수의 영향을 받으며, 괄호 안에 RADIANS 또는 DEGREES를 입력하여  각도가 해석되는 방식을 지정할 수 있습니다.<br><br>객체는 항상 원점에 대한 상대적 위치를 중심으로 회전하며, 양수를 입력할 경우 시계 방향으로 객체를 회전합니다. 이러한 변형(transformation) 함수는 그것이 호출된 뒤 후속적으로 호출된 모든 변형 함수들에 적용됩니다. 예를 들어, rotate(HALF_PI)를 호출한 뒤 rotate(HALF_PI)를 호출하면, 결과적으로 rotate(PI)와 동일한 효과를 갖습니다. 모든 변형은 draw() 함수가 다시 시작하는 시점에 리셋됩니다.<br><br>좀 더 기술적으로 설명하자면, rotate() 함수는 현재 변환 행렬에 회전 행렬을 곱하는 셈입니다. 이 함수는 push()와 pop() 함수를 통해 추가적으로 제어 가능합니다.",
      "params": ["숫자: 현재 angleMode의 매개 변수인 RADIANS(부채각) 또는 DEGREES(도)의 설정 사항에 따른 회전각",
                 "p5.Vector|숫자 배열[]: (3D의 경우,) 회전축 (선택 사항)"],
      "returns": ""
    },
    "rotateX": {
      "description": "x축을 따라 회전합니다.",
      "params": ["숫자: 현재 angleMode의 매개 변수인 RADIANS(부채각) 또는 DEGREES(도)의 설정 사항에 따른 회전각"],
      "returns": ""
    },
    "rotateY": {
      "description": "y축을 따라 회전합니다.",
      "params": ["숫자: 현재 angleMode의 매개 변수인 RADIANS(부채각) 또는 DEGREES(도)의 설정 사항에 따른 회전각"],
      "returns": ""
    },
    "rotateZ": {
      "description": "z축을 따라 회전합니다. (WebGL 모드 전용)",
      "params": ["숫자: 현재 angleMode의 매개 변수인 RADIANS(부채각) 또는 DEGREES(도)의 설정 사항에 따른 회전각"],
      "returns": ""
    },
    "scale": {
      "description": "꼭지점을 확장하거나 축소하여 도형의 크기를 키우거나 줄입니다. 객체의 크기는 언제나 좌표계에 대한 상대적 원점을 기준으로 조정됩니다. 크기값들은 10진수 백분율로 지정됩니다. 예를 들어, scale(2.0) 함수를 호출하면 도형의 크기를 200% 증가시킵니다.<br><br> 이러한 변형(transformation) 함수는 그것이 호출된 뒤 후속적으로 호출된 모든 변형 함수들에 적용됩니다. 예를 들어, scale(2.0)을 호출한 뒤 scale(1.5)를 호출하면, 결과적으로 scale(3.0)과 동일한 효과를 갖습니다. 모든 변형은 draw() 함수가 다시 시작하는 시점에 리셋됩니다.<br><br>매개 변수 z는 오직 WebGL 모드에서만 사용 가능합니다. 이 함수는 push()와 pop() 함수를 통해 추가적으로 제어 가능합니다.",
      "params": ["숫자|p5.Vector|숫자 배열[]：객체 크기를 조정하는 백분율, 또는 여러 인수를 지정할 경우 x축에서의 객체 크기 배율을 조정하는 백분율",
                 "숫자: y축에서의 객체 크기를 조정하는 백분율 (선택 사항)",
                 "숫자: z축에서의 객체 크기를 조정하는 백분율(WebGL 모드용)(선택 사항)",
                 "p5.Vector|숫자 배열[]: 축을 기준으로 객체의 크기 조정"],
      "returns": ""
    },
    "shearX": {
      "description": "사용자가 지정한 각도 매개 변수에 따라 도형을 x축에서 전단(shear)합니다. 이 함수는 angleMode() 함수의 영향을 받습니다. 객체는 항상 원점에 대한 상대적 위치를 중심으로 전단되며, 양수를 입력할 경우 시계 방향으로 객체를 전단합니다.<br><br> 이러한 변형(transformation) 함수는 그것이 호출된 뒤 후속적으로 호출된 모든 변형 함수들에 적용되어, 그 효과들이 축적됩니다. 예를 들어, shearX(PI/2)를 호출한 뒤 shearX(PI/2)를 또 호출하면, 결과적으로 shearX(PI)와 동일한 효과를 갖습니다. draw() 함수 내에서 shearX()를 호출하면, 반복 실행이 다시 시작되는 시점에 모든 변형 내용이 리셋됩니다.<br><br>보다 기술적으로 설명하자면, shearX() 함수는 현재 변환 행렬에 회전 행렬을 곱하는 셈입니다. 이 함수는 push()와 pop() 함수를 통해 추가적으로 제어 가능합니다.",
      "params": ["숫자: 현재 angleMode의 매개 변수인 RADIANS(부채각) 또는 DEGREES(도)의 설정 사항에 따른 전단각"],
      "returns": ""
    },
    "shearY": {
        "description": "사용자가 지정한 각도 매개 변수에 따라 도형을 y축에서 전단(shear)합니다. 이 함수는 angleMode() 함수의 영향을 받습니다. 객체는 항상 원점에 대한 상대적 위치를 중심으로 전단되며, 양수를 입력할 경우 시계 방향으로 객체를 전단합니다.<br><br> 이러한 변형(transformation) 함수는 그것이 호출된 뒤 후속적으로 호출된 모든 변형 함수들에 적용되어, 그 효과들이 축적됩니다. 예를 들어, shearY(PI/2)를 호출한 뒤 shearY(PI/2)를 또 호출하면, 결과적으로 shearY(PI)와 동일한 효과를 갖습니다. draw() 함수 내에서 shearY()를 호출하면, 반복 실행이 다시 시작되는 시점에 모든 변형 내용이 리셋됩니다.<br><br>보다 기술적으로 설명하자면, shearY() 함수는 현재 변환 행렬에 회전 행렬을 곱하는 셈입니다. 이 함수는 push()와 pop() 함수를 통해 추가적으로 제어 가능합니다.",
        "params": ["숫자: 현재 angleMode의 매개 변수인 RADIANS(부채각) 또는 DEGREES(도)의 설정 사항에 따른 전단각"],
        "returns": ""
    },
    "translate": {
      "description": "디스플레이 화면 내에서 객체를 이동시킬 양을 지정합니다. 매개 변수 x는 좌/우 이동을, 매개 변수 y는 상/하 이동을 지정합니다.<br><br>이러한 변형(transformation) 함수는 그것이 호출된 뒤 후속적으로 호출된 모든 변형 함수들에 적용되어, 그 효과들이 축적됩니다. 예를 들어, translate(50, 0)를 호출한 뒤 translate(20, 0)를 또 호출하면, 결과적으로 translate(70, 0)와 동일한 효과를 갖습니다. draw() 함수 내에서 translate()을 호출하면, 반복 실행이 다시 시작되는 시점에 모든 변형 내용이 리셋됩니다.<br><br>이 함수는 push()와 pop() 함수를 통해 추가적으로 제어 가능합니다.",
      "params": ["숫자: 좌/우 이동",
                 "숫자: 상/하 이동",
                 "숫자: 앞/뒤 이동(WebGL 모드용)",
                 "p5.Vector: 이동시킬 벡터"],
      "returns": ""
    },

// Data > Array Functions
    
    "storeItem":{
        "description":"로컬 저장소에 값을 키 이름(key name)으로 저장합니다. 로컬 저장소는 브라우저에 저장되며, 브라우징 세션과 페이지를 다시 불러오는 사이에 유지됩니다. 키(key)는 변수명과 동일하게 지정될 수 있으나, 반드시 그럴 필요는 없습니다. 저장된 항목(item)을 가져오려면 <a href = 'https://p5js.org/reference/#/p5/getItem'>getItem</a>을 참조하세요.<br><br>비밀번호나 개인 정보와같이 민감한 데이터는 로컬 저장소에 저장되면 안됩니다.",
        "params":["문자열:",
                  "문자열|숫자|객체|불리언|p5.Color|p5.Vector:"],
        "returns":""
    },
    "getItem":{
        "description":"storeItem()로 저장한 항목(item)의 값을 로컬 저장소로부터 반환합니다.",
        "params":["문자열: 로컬 저장소에 저장시 사용할 이름"],
        "returns":"숫자|객체|문자열|불리언|p5.Color|p5.Vector: 저장된 항목의 값"
    },
    "clearStorage":{
        "description":"현재 영역에서 storeItem()으로 설정된 모든 로컬 저장소 항목(item)을 제거합니다.",
        "params":"",
        "returns":""
    },
    "removeItem":{
        "description":"storeItem()으로 저장된 항목(item)을 제거합니다.",
        "params":["문자열"],
        "returns":""
    },
      
      
// Data > Dictionary
      
    "createStringDict":{
        "description":"키-값(key-value) 쌍 또는 사용자가 지정한 객체를 사용하여 p5.StringDict의 새로운 인스턴스를 생성합니다.",
        "params":["문자열:",
                  "문자열:"
                  "객체: 객체"],
        "returns":"p5.StringDict:"
    },
    "createNumberDict":{
        "description":"키-값(key-value) 쌍 또는 사용자가 지정한 객체를 사용하여 p5.NumberDict의 새로운 인스턴스를 생성합니다.",
        "params":["숫자:",
                  "숫자",
                  "객체: 객체",
                 ],
        "returns":"p5.NumberDict:"
    },
    "p5.TypedDict":{
        "description":"모든 p5.Dictionary 유형을 위한 기본 클래스 입니다. 사용자가 지정한 사전(Dictionary) 클래스는 이 클래스를 상속할 수 있습니다.",
        "methods":["사전 안에 현재 저장된 키-값(key-value) 쌍의 개수를 반환합니다.",
                  "지정된 키(key)가 사전 안에 존재할 경우 참(true)을, 그렇지 않으면 거짓(false)를 반환합니다.",
                  "지정된 키에 저장된 값을 반환합니다.",
                  "지정된 키가 사전 안에 존재할 경우 연관된 값을 반환합니다. 그렇지 않으면 새로운 키-값 쌍이 추가됩니다.",
                  "새로운 키-값 쌍을 사전 안에 생성합니다.",
                  "기존에 저장된 모든 키-값 쌍들을 사전으로부터 제거합니다.",
                  "특정 키에 저장된 키-값 쌍을 사전으로부터 제거합니다.",
                  "Dictionary에 현재 저장된 항목들의 로그를 콘솔창에 출력합니다.",
                  "로컬 다운로드를 위해 사전을 CSV 파일로 변환합니다.",
                  "로컬 다운로드를 위해 사전을 JSON 파일로 변환합니다."],
        "returns":""
    },
    "p5.NumberDict":{
        "description":"숫자를 위한 간단한 사전 클래스<br>p5.TypedDict를 확장합니다.",
        "params":["특정 키에 현재 저장된 값에 사용자가 지정한 숫자를 더하고, 그 결과값은 사전 안에 저장되어있던 기존값을 대체합니다.",
                  "특정 키에 현재 저장된 값에서 사용자가 지정한 숫자를 빼고, 그 결과값은 사전 안에 저장되어있던 기존값을 대체합니다.",
                  "특정 키에 현재 저장된 값에 사용자가 지정한 숫자를 곱하고, 그 결과값은 사전 안에 저장되어있던 기존값을 대체합니다.",
                  "특정 키에 현재 저장된 값을 사용자가 지정한 숫자로 나누고, 그 몫은 사전 안에 저장되어있던 기존값을 대체합니다.",
                  "사전 안에 현재 저장된 값들 중 가장 낮은 숫자를 반환합니다.",
                  "사전 안에 현재 저장된 값들 중 가장 높은 숫자를 반환합니다.",
                  "사전에서 사용된 키들 중 가장 낮은 키를 반환합니다.",
                  "사전에서 사용된 키들 중 가장 높은 키를 반환합니다."],
        "returns":""
    },

// Data > Array Functions
      
    "append": {
      "description": "사용 불가: append()는 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다. <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push'>array.push(value)</a>를 대신 사용하세요.<br><br>배열의 끝에 값을 추가하여, 그 길이를 1씩 확장합니다. Array.push()에 매핑합니다.",
      "params": ["배열: 추가할 배열",
                 "전부: 배열에 추가될 모든 것"],
      "returns": "추가된 배열"
    },
    "arrayCopy": {
      "description": "사용 불가: copyArray()는 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다.<br>배열(또는 그 일부)을 다른 배열에 복사합니다. src 배열이 dst 배열에 복사되며, srcPosition으로 지정된 위치에서 시작하여 dstPosition으로 지정된 위치를 향합니다. 복사할 요소의 개수는 배열의 길이로 결정됩니다. 값을 복사하면 대상 배열의 기존값을 덮어씁니다. 덮어쓰기없이 값을 추가하려면 concat()을 사용하세요.<br>",
      "params": ["数组：原数组",
                 "数字：在原数组内的开端指数",
                 "数组：终点数组",
                 "数字：在终点数组内的开端指数",
                 "数字：该复制的元素量"],
      "returns": ""
    },
    "concat": {
      "description": "사용 불가: concat()은 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다. <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat'>arr1.concat(arr2)</a>를 대신 사용하세요.<br><br>串接两个数组，映射到 Array.concat()。将不会修改原有数组。",
      "params": ["数组：串接的第一个数组",
                 "数组：串接的第二个数组"],
      "returns": "数组：串接后的数组"
    },
    "reverse": {
      "description": "사용 불가: reverse()는 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다.<a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse'>array.reverse()</a>를 대신 사용하세요.<br><br>倒转数组内元素的次序，映射到 Array.reverse()。",
      "params": ["数组：该倒转的数组"],
      "returns": ""
    },
    "shorten": {
      "description": "사용 불가: shorten()은 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다. <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop'>array.pop()</a>를 대신 사용하세요.<br><br>将数组减少一个元素并返回缩短后的数组，映射到 Array.pop()。",
      "params": ["数组：该缩短的数组"],
      "returns": "数组：缩短后的数组"
    },
    "shuffle": {
      "description": "사용 불가: shuffle()은 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다. <a hreh='https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array'>使用 Javascript 混洗数组</a>를 대신 사용하세요.<br><br><a href = 'https://bost.ocks.org/mike/shuffle/'>피셔-예이츠(Fisher-Yates) 셔플 알고리즘</a>을 구현합니다.",
      "params": ["数组：该混洗的数组",
                 "布尔值：修改所给予的数组"],
      "returns": "数组：混洗后的数组"
    },
    "sort": {
      "description": "사용 불가: sort()는 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다.请改用 <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort'>array.sort()</a>를 대신 사용하세요. <br><br>将一个含有数字的数组有最小到最大值重新排列，或将一个含有文字的数组依字母顺序排列。原数组将不会被修改，而将会返回重新排列后的数组。count 参数定义该排列的元素量。比如说，如果数组内有 12 个元素而 count 被设为 5，只有数组内前五个元素将会被排列。",
      "params": ["数组：该排列的数组",
                 "整数：该排列的元素数，由 0 开始"],
      "returns": ""
    },
    "splice": {
      "description": "사용 불가: splice()는 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다.请改用 <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice'>array.splice()</a>를 대신 사용하세요.<br><br>在一个原有的数组内添加一个值或另一数组的值。第一个参数定义该修改的数组，而第二个参数定义该添加的资料。第三个参数为该添加元素的位置的数组指数。（记得数组指数从零开始，因此第一个位置为 0，而第二的位置为 1 等等。）",
      "params": ["数组：拼接进的数组",
                 "任何：欲拼接进数组的值",
                 "整数：数组内该添加该元素的位置"],
      "returns": ""
    },
    "subset": {
      "description": "弃用：subset()은 더이상 사용 불가하며, p5의 추후 버전에서 제거됩니다. 请改用 <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice'>array.slice()</a>를 대신 사용하세요.<br><br>从一个现有的数组中提取一数组的元素。list 参数定义该复制提取元素的数组，而 start 及 count 参数定义该提取哪一些元素。如果没有提供 count 参数，那将会提取数组由开头到结尾的元素。在定义 start 参数时，记得数组第一个指数为 0。这函数将不会修改原数组。",
      "params": ["数组：该提取元素的数组",
                 "整数：开始位置",
                 "整数：提取元素数"],
      "returns": "数组：提取出来的元素数组"
    },
      
      
// Data > Conversion
      
      
    "float": {
      "description": "문자열을 실수(float), 즉 부동 소수점 숫자형 표현으로 변환합니다. 이 때, 문자열의 구문은 숫자 형식과 유사해야 합니다. 그렇지 않으면 NaN(숫자 아님)이 반환됩니다. 예컨대, float (\"1234.56\")은 1234.56으로 연산되지만, float (\"giraffe\")는 NaN을 반환합니다.<br>전달된 배열과 길이가 동일한 실수 배열이 반환됩니다.",
      "params": ["문자열: 구문 분석할 실수 문자열"],
      "returns": "숫자: 문자열의 부동 소수점 숫자형 표현"
    },
    "int": {
      "description": "불리언(boolean), 문자열(string), 실수(float)를 정수(int)형 표현으로 변환합니다. 전달된 배열과 길이가 동일한 정수 배열이 반환됩니다.",
      "params": ["문자열|불리언|숫자: 구문 분석할 값",
                 "정수: 기수로 변환 (기본값: 10) (선택 사항)",
                 "배열: 구문 분석할 값"],
      "returns": "숫자: 값의 정수형 표현"
    },
    "str": {
      "description": "불리언(boolean), 문자열(string), 또는 숫자를 문자열 표현으로 변환합니다. 전달된 배열과 길이가 동일한 문자열 배열이 반환됩니다.",
      "params": ["문자열|불리언|숫자: 구문 분석할 값"],
      "returns": "숫자: 값의 문자열 표현"
    },
    "boolean": {
      "description": "불리언(boolean)은 자바스크립트에서 지정한 7개의 <a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values'>기본 데이터 유형</a> 중 하나입니다. 불리언은 참(true) 또는 거짓(false)으로 값을 나타냅니다.<br><a href = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type'>MDN Entry</a>에서 발췌: 불리언은 논리적 개체를 나타내며 참(true) 또는 거짓(false)이라는 두 개의 값만 갖습니다.",
      "params": [""],
      "returns": ""
    },
    "byte": {
      "description": "숫자, 숫자의 문자열 표현, 또는 불리언을 바이트 표현으로 변환합니다. 바이트는 -128과 127 사이의 정수이므로, 이 범위를 벗어난 값은 상응하는 바이트 표현에 래핑됩니다. 숫자, 문자열, 또는 불리언 값의 배열을 전달하면, 동일한 길이의 바이트 배열이 반환됩니다.",
      "params": ["문자열|불리언|숫자: 구문 분석할 값",
                 "배열: 구문 분석할 값"],
      "returns": "값의 바이트형 표현"
    },
    "char": {
      "description": "숫자나 문자열을 단일 문자형(character) 문자열 표현으로 변환합니다. 사용자가 별도 지정한 문자열 매개 변수의 경우, 먼저 정수로서 구문 분석된 후 단일 문자형 문자열로 변환됩니다. 숫자 또는 문자열 값의 배열을 전달하면, 동일한 길이의 단일 문자형 문자열이 반환됩니다.",
      "params": ["문자열|숫자: 구문 분석할 값",
                 "배열: 구문 분석할 값"],
      "returns": "값의 문자열 표현"
    },             
    "unchar": {
      "description": "단일 문자형 문자열 표현을 정수로 변환합니다. 단일 문자열 문자열 값의 배열을 전달하면, 동일한 길이의 정수 배열이 반환됩니다.",
      "params": ["문자열: 구문 분석할 값",
                 "배열: 구문 분석할 값"],
      "returns": "값의 정수형 표현"
    },
    "hex": {
      "description": "숫자를 16진수 문자열로 변환합니다. 전달된 2번째 매개 변수는 16진수 표기법으로 생성할 문자 개수를 설정합니다. 배열이 전달되면, 동일한 길이를 갖는 16진수 문자열을 반환합니다.",
      "params": ["숫자: 구문 분석할 값",
                 "숫자: (선택 사항)",
                 "숫자 배열[]: 구문 분석할 숫자 값들 배열"],
      "returns": "값의 16진수 문자열 표현"
    },
    "unhex": {
      "description": "16진수 문자열 표현을 정수로 변환합니다. 16진수 문자열 값의 배열을 전달하면, 동일한 길이의 정수 배열이 반환됩니다.",
      "params": ["문자열: 구문 분석할 값",
                 "배열: 구문 분석할 값"],
      "returns": "16진수 값의 정수형 표현"
    },
      
      
      
// Data > String Functions
      
      
    "join": {
      "description": "문자열 배열을 결합하여 하나의 문자열을 만듭니다. 각 문자열은 사용자가 구분자 매개 변수로 지정한 문자를 통해 구분됩니다. 정수(int) 또는 실수(float) 배열을 결합하려면, 먼저 nf() 또는 nfs()를 통해 문자열로 변환되어야 합니다.",
      "params": ["배열: 결합할 문자열 배열",
                 "문자열: 각 항목 사이에 놓일 문자열"],
      "returns": "문자열: 결합된 문자열"
    },
    "match": {
      "description": "这函数可被用来在一段文字上应用正则表达式，并将返回含有符合表达式的组合（在括号内的元素）的字符串数组。如果没找到任何匹配组合，将返回 null。如果正则表达式内没有定义任何组合，但有搜寻到匹配序列，将返回一个大小为 1 的数组（匹配的文字为数组的第一个元素）。<br><br>使用此函数时，先查看结果是否为 null。如果结果为 null，那表示该段文字没有匹配序列。如果有找到匹配序列，将返回一个数组。<br><br>如果正则表达式内有组合（由括号定义），那个别内容将会以数组的形式返回。正则表达式匹配返回的元素 [0] 将会是整个匹配的字符串，而匹配组合将从元素 [1] 开始（第一组为 [1]、第二组为 [2] 等）。",
      "params": ["字符串：在此字符串内搜寻",
                 "字符串：用于搜寻的正则表达式"],
      "returns": "数组：搜寻到的字符串数组"
    },
    "matchAll": {
      "description": "这函数可被用来在一段文字上应用正则表达式，并将返回含有符合表达式的组合（在括号内的元素）的二维字符串数组。如果没找到任何匹配组合，将返回 null。如果正则表达式内没有定义任何组合，但有搜寻到匹配序列，仍然将返回一个二维数组，但第二维度数组的大小将为一。<br><br>使用此函数时，先查看结果是否为 null。如果结果为 null，那表示该段文字没有匹配序列。如果有找到匹配序列，将返回一个二维数组。<br><br>如果正则表达式内有组合（由括号定义），那个别内容将会以数组的形式返回。假设有一个有计算其变量 i 的循环，正则表达式匹配返回的元素 [i][0] 将会是整个匹配的字符串，而匹配组合将从元素 [i][1] 开始（第一组为 [i][1]、第二组为 [i][2] 等）。",
      "params": ["字符串：在此字符串内搜寻",
                 "字符串：用于搜寻的正则表达式"],
      "returns": "字符串[]：搜寻到的二维字符串数组"
    },
    "nf": {
      "description": "用于将数字格式化成字符串的辅助函数。此函数有两个版本：一个用于格式化浮点数，另一个用于格式化整数。参数 left 及 right 的值必须是正整数。",
      "params": ["数字|字符串：该格式化的数字",
                 "整数|字符串：小数点左边的位数",
                 "整数|字符串：小数点右边的位数",
                 "数组：该格式化的数字"],
      "returns": "字符串：格式化后的字符串"
    },
    "nfc": {
      "description": "用于将数字格式化成字符串并在适当的地方添加逗号以示意 1000 位的辅助函数。此函数有两个版本：一个用于格式化整数，另一个用于格式化一数组的整数。参数 right 的值必须是正整数。",
      "params": ["数字|字符串：该格式化的数字",
                 "整数|字符串：小数点左边的位数",
                 "整数|字符串：小数点右边的位数",
                 "数组：该格式化的数字"],
      "returns": "字符串：格式化后的字符串"
    },
    "nfp": {
      "description": "用于将数字格式化成字符串的辅助函数。与 nf() 相似但会在正数前加个 \"+\" 号而在负数前加个 \"-\" 号。此函数有两个版本：一个用于格式化浮点数，另一个用于格式化整数。参数 left 及 right 的值必须是正整数。",
      "params": ["数字|字符串：该格式化的数字",
                 "整数|字符串：小数点右边的位数",
                 "数组：该格式化的数字"],
      "returns": "字符串：格式化后的字符串"
    },
    "nfs": {
      "description": "用于将数字格式化成字符串的辅助函数。与 nf() 相似但会在正数前加个 \" \"（空格）而在负数前加个 \"-\" 号。此函数有两个版本：一个用于格式化浮点数，另一个用于格式化整数。参数 left 及 right 的值必须是正整数。",
      "params": ["数字：该格式化的数字",
                 "整数：小数点左边的位数",
                 "整数：小数点右边的位数",
                 "数组：该格式化的数字"],
      "returns": "字符串：格式化后的字符串"
    },
    "split": {
      "description": "split() 函数映射到 String.split()，它使用一个字符或字符串为分隔号以将另一个字符串拆分成多个部分。delim 参数定义用于标示各个部分之间边界的字符或字符串。将返回一个含有各个部分的字符串数组。<br><br>splitTokens() 函数也与此函数相似，不过它将使用一系列字符以拆分字符串而不是使用特别定义的单一字符或字符串。",
      "params": ["字符串：还拆分的字符串",
                 "字符串：用于分隔资料的字符串"],
      "returns": "字符串[]：字符串数组"
    },
    "splitTokens": {
      "description": "splitTokens() 函数将在一个或多个字符（或 “tokens”）所标示的地方拆分一个字符串。delim 参数将定义用于标示各个部分之间边界的字符或字符串。<br><br>如果 delim 参数没有被定义，此函数将使用任何空白字符拆分。空白字符包括制表符（\\t）、换行符（\\n）、回车符（\\r）、新页符（\\f）及空格。",
      "params": ["字符串：还拆分的字符串",
                 "字符串：用于分隔资料的字符串列"],
      "returns": "字符串[]：字符串数组"
    },
    "trim": {
      "description": "从一个字符串的前端及后端删除空白字符。除了一般的空白字符如空格、回车及制表符之外，这函数也将删除 Unicode “nbsp” 字符。",
      "params": ["字符串：该修剪的字符串",
                 "数组：该修剪的字符串数组"],
      "returns": "字符串：修剪后的字符串"
    },


      
// Events > Accleration
      
    "deviceOrientation": {
      "description": "deviceOrientation 系统变量将会储存设备的旋转方向。此变量的值可以是 ‘landscape’ 或 ‘portrait’。如果没有资料可用他会被定义成 ‘undefined’。LANDSCAPE 或 PORTRAIT。",
      "returns": ""
    },
    "accelerationX": {
      "description": "accelerationX 系统变量将会储存设备的 x 轴加速度。值的单位为每平方秒米。",
      "returns": ""
    },
    "accelerationY": {
      "description": "accelerationY 系统变量将会储存设备的 y 轴加速度。值的单位为每平方秒米。",
      "returns": ""
    },
    "accelerationZ": {
      "description": "accelerationZ 系统变量将会储存设备的 z 轴加速度。值的单位为每平方秒米。",
      "returns": ""
    },
    "pAccelerationX": {
      "description": "pAccelerationX 系统变量将会储存上一个影格该设备的 x 轴加速度。值的单位为每平方秒米。",
      "returns": ""
    },
    "pAccelerationY": {
      "description": "pAccelerationY 系统变量将会储存上一个影格该设备的 y 轴加速度。值的单位为每平方秒米。",
      "returns": ""
    },
    "pAccelerationZ": {
      "description": "pAccelerationZ 系统变量将会储存上一个影格该设备的 z 轴加速度。值的单位为每平方秒米。",
      "returns": ""
    },
    "rotationX": {
      "description": "rotationX 系统变量将会储存设备在 x 轴的旋转角度。值介于 0 与 +/-180 度之间。<br><br>注意：旋转的顺序很重要，比如说，如果同时使用它们必须依 Z-X-Y 的顺序调用或可能会有难以预料的行为。",
      "returns": ""
    },
    "rotationY": {
      "description": "rotationY 系统变量将会储存设备在 y 轴的旋转角度。值介于 0 与 +/-90 度之间。<br><br>注意：旋转的顺序很重要，比如说，如果同时使用它们必须依 Z-X-Y 的顺序调用或可能会有难以预料的行为。",
      "returns": ""
    },
    "rotationZ": {
      "description": "rotationZ 系统变量将会储存设备在 z 轴的旋转角度。值介于 0 与 359 度之间。<br><br>与 rotationX 及 rotationY 不同的是，这变量只能在有内建指南针的设备使用。<br><br>注意：旋转的顺序很重要，比如说，如果同时使用它们必须依 Z-X-Y 的顺序调用或可能会有难以预料的行为。",
      "returns": ""
    },
    "pRotationX": {
      "description": "pRotationX 系统变量将会储存上一个影格该设备在 x 轴的旋转角度。值介于 0 与 +/-180 度之间。<br><br>pRotationX 可以和 rotationX 一起使用以找出设备 x 轴的旋转方向。",
      "returns": ""
    },
    "pRotationY": {
      "description": "pRotationY 系统变量将会储存上一个影格该设备在 y 轴的旋转角度。值介于 0 与 +/-90 度之间。<br><br>pRotationY 可以和 rotationY 一起使用以找出设备 y 轴的旋转方向。",
      "returns": ""
    },
    "pRotationZ": {
      "description": "pRotationZ 系统变量将会储存上一个影格该设备在 z 轴的旋转角度。值介于 0 与 359 度之间。<br><br>pRotationZ 可以和 rotationZ 一起使用以找出设备 z 轴的旋转方向。",
      "returns": ""
    },
    "setMoveThreshold": {
      "description": "setMoveThreshold() 函数可用来设置 deviceMoved() 函数的移动阈值。默认阈值为 0.5。",
      "params": ["数字：阈值"],
      "returns": ""
    },
    "setShakeThreshold": {
      "description": "setShakeThreshold() 函数可用来设置 deviceShaken() 函数的摇动阈值。默认阈值为 30。",
      "params": ["数字：阈值"],
      "returns": ""
    },
    "deviceMoved": {
      "description": "deviceMoved() 函数将在设备在 X、Y 或 Z 轴被移动多过阈值时被调用。默认阈值为 0.5。",
      "returns": ""
    },
    "deviceTurned": {
      "description": "deviceTurned() 函数将在设备被连续旋转多过 90 度时被调用。<br><br>触发 deviceTurned() 的旋转轴将被储存在 turnAxis 变量中。deviceTurned() 函数能被锁定在 X、Y 或 Z 以确保只有所定义的轴会导致函数被调用，您只需比较 turnAxis 变量和 'X'、'Y' 或 'Z' 字符串。",
      "returns": ""
    },
    "deviceShaken": {
      "description": "deviceShaken() 函数将在设备的 accelerationX 及 accelerationY 加速度值改变超过阈值。默认阈值为 30。",
      "returns": ""
    },
      
      
// Events > Keyboard
      
      
    "keyIsPressed": {
      "description": "keyIsPressed 布尔系统变量将会在任何键被按下时为真（true）而没键被按下时为假（false）。",
      "returns": ""
    },
    "key": {
      "description": "key 系统变量将会储存上一个被键入的键盘键值。以获得正确的大小写，最好在 keyTyped() 内使用。至于非 ASCII 值的键，请使用 keyCode 变量。",
      "returns": ""
    },
    "keyCode": {
      "description": "keyCode 变量可用来探测特别键如 BACKSPACE、DELETE、ENTER、RETURN、TAB、ESCAPE、SHIFT、CONTROL、OPTION、ALT、UP_ARROW、DOWN_ARROW、LEFT_ARROW、RIGHT_ARROW 是否被按下。您也可以使用特别网站如 <a href='http://keycode.info/'>keycode.info</a> 以找出自定义键的 keyCode。",
      "returns": ""
    },
    "keyPressed": {
      "description": "keyPressed() 函数将会在每一次任何键被按下时被调用。被按下的键的 keyCode 将被储存在 keyCode 变量内。<br><br>对于非 ASCII 值的键，请使用 keyCode 变量。您能查看 keyCode 是否等于 BACKSPACE、DELETE、ENTER、RETURN、TAB、ESCAPE、SHIFT、CONTROL、OPTION、ALT、UP_ARROW、DOWN_ARROW、LEFT_ARROW、RIGHT_ARROW。<br><br>至于 ASCII 键值它们的值会被储存在 key 变量内。不过，它并不会分辨大小写。因此，建议使用 keyTyped() 以读取 key 变量，因为其大小写在这里会被分辨出来。<br><br>取决于操作系统如何处理按键重复，按住一个键可能使 keyTyped() （及 keyReleased()）被调用多过一次。重复的速度应操作系统及该电脑的设置而定。<br><br>不同浏览器可能会有不同附属于个别键盘事件的默认行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "keyReleased": {
      "description": "keyReleased() 函数将会在每一次任何键被释放时被调用。请查看 key 及 keyCode 以知更多详情。<br><br>不同浏览器可能会有不同附属于个别键盘事件的默认行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "keyTyped": {
      "description": "keyTyped() 函数将会在每一次任何键被按下时被调用，可是会忽略操作键如 Ctrl、Shift 及 Alt。被按下的键的 keyCode 将被储存在 keyCode 变量内。<br><br>取决于操作系统如何处理按键重复，按住一个键可能使 keyTyped() （及 keyReleased()）被调用多过一次。重复的速度应操作系统及该电脑的设置而定。<br><br>不同浏览器可能会有不同附属于个别键盘事件的默认行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "keyIsDown": {
      "description": "keyIsDown() 函数将查看被提供的键是否正被按下。它能在当您需要使用多个不同的键同时用来移动一个物件时使用（如将一个图像往斜移动）。您能给予任何代表该键的 keyCode 会任何<a href='http://p5js.org/zh-Hans/reference/#p5/keyCode'>此页</a>的 keyCode 变量名为参数。",
      "params": ["数字：该查看的键"],
      "returns": ""
    },
      
      
// Events > Mouse
      
      
    "mouseX": {
      "description": "mouseX 系统变量将会储存当时的鼠标相对于画布 (0, 0) 位置的的横向位置。如果使用的是触动而不是滑鼠的话，mouseX 将会储存上一个触动点的 x 值。",
      "returns": ""
    },
    "mouseY": {
      "description": "mouseY 系统变量将会储存当时的鼠标相对于画布 (0, 0) 位置的的直向位置。如果使用的是触动而不是滑鼠的话，mouseY 将会储存上一个触动点的 y 值。",
      "returns": ""
    },
    "pmouseX": {
        "description": "pmouseX 系统变量将会储存上一个影格鼠标或触动点相对于画布 (0, 0) 位置的的横向位置。",
        "returns": ""
    },
    "pmouseY": {
      "description": "pmouseY 系统变量将会储存上一个影格鼠标或触动点相对于画布 (0, 0) 位置的的直向位置。",
      "returns": ""
    },
    "winMouseX": {
      "description": "winMouseX 系统变量将会储存当时鼠标相对于窗口 (0, 0) 位置的横向位置。",
      "returns": ""
    },
    "winMouseY": {
      "description": "winMouseY 系统变量将会储存当时鼠标相对于窗口 (0, 0) 位置的直向位置。",
      "returns": ""
    },
    "pwinMouseX": {
      "description": "pwinMouseX 系统变量将会储存上一个影格鼠标相对于窗口 (0, 0) 位置的横向位置。",
      "returns": ""
    },
    "pwinMouseY": {
      "description": "pwinMouseY 系统变量将会储存上一个影格鼠标相对于窗口 (0, 0) 位置的直向位置。",
      "returns": ""
    },
    "mouseButton": {
      "description": "p5 将自动记录滑鼠键是否被按下及哪个键被按下。mouseButton 系统变量的值可能是 LEFT、RIGHT 或 CENTER，取决于上一个被按下的滑鼠键。请注意：不同的浏览器可能记录不同的 mouseButton 值。",
      "returns": ""
    },
    "mouseIsPressed": {
      "description": "mouseIsPressed 系统变量将会在滑鼠键被按下时为真（true），而没按下时为假（false）。",
      "returns": ""
    },
    "mouseMoved": {
      "description": "mouseMoved() 函数将在每次鼠标移动而滑鼠键没有被按下的时候被调用。<br><br>不同浏览器可能有不同附属于个别滑鼠事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "mouseDragged": {
      "description": "mouseDragged() 函数将在每次鼠标移动及滑鼠键正被按下的时候被调用。如果 mouseDragged() 函数并未有被定义，touchMoved() 函数有被定义的话将会被调用。<br><br>不同浏览器可能有不同附属于个别滑鼠事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "mousePressed": {
      "description": "mousePressed() 函数将在每次滑鼠键被按下时被调用。mouseButton 函数（请参考其文献）可以被用来探测哪一个滑鼠键刚被按下。如果 mousePressed() 函数并未有被定义，touchStarted() 函数有被定义的话将会被调用。<br><br>不同浏览器可能有不同附属于个别滑鼠事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "mouseReleased": {
      "description": "mouseReleased() 函数将在每次滑鼠键被释放时被调用。如果 mouseReleased() 函数并未有被定义，touchEnded() 函数有被定义的话将会被调用。<br><br>不同浏览器可能有不同附属于个别滑鼠事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "mouseClicked": {
      "description": "mouseClicked() 函数将在滑鼠键被按下然后被释放后被调用。<br><br>不同浏览器处理滑鼠点击的方式不大一样，所以这函数只有在滑鼠左键被点击时才保证会被触发。如果想要处理其他滑鼠键的点击或释放事件，请参考 mousePressed() 或 mouseReleased()。<br><br>不同浏览器可能有不同附属于个别滑鼠事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "doubleClicked": {
      "description": "doubleClicked() 函数将在 dblclick 事件被触发式被调用，dblclick 时间是 DOM L3 规范的一部分。doubleClicked 将在滑鼠键（通常为左键）连续两次在同样一个元素上点击时被触发。以知更多详情请参考 Mozilla 的参考文献：<a href='https://developer.mozilla.org/en-US/docs/Web/Events/dblclick'>https://developer.mozilla.org/en-US/docs/Web/Events/dblclick</a>。"
    },
    "mouseWheel": {
      "description": "mouseWheel() 函数将在每次直向滑鼠滚轮事件被触发式被调用，可以由实际的滑鼠滚轮或摸板触发。<br><br>event.delta 属性将返回滑鼠滚轮所滚动的量。这值可以是正数或负数，取决于滚动的方向（在 OS X 如果启用“自然”滚屏方向，正反方向将相反）。",
      "returns": ""
    },
    "requestPointerLock": {
      "description": "",
      "returns": ""
    },
    "exitPointerLock": {
      "description": "",
      "returns": ""
    },
      
      
      
// Events > Touch
      
      
    "touches": {
      "description": "touches[] 系统变量将储存一个含有现在所有触动点相对于画布 (0, 0) 位置的位置数组，及分辨个别触动点移动时的 ID。数组内的每个元素都会有 x、y 及 id 属性。<br><br>touches[] 数组并不受 Safari 及 IE 移动设备（包括手提电脑）所支持。",
      "returns": ""
    },
    "touchStarted": {
      "description": "touchStarted() 函数将在每次触动事件被触发时被调用。如果 touchStarted() 函数并未有被定义，mousePressed() 函数有被定义的话将会被调用。<br><br>不同浏览器可能有不同附属于个别触动事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "touchMoved": {
      "description": "touchMoved() 函数将在每次触点移动事件被触发时被调用。如果 touchMoved() 函数并未有被定义，mouseDragged() 函数有被定义的话将会被调用。<br><br>不同浏览器可能有不同附属于个别触动事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
    "touchEnded": {
      "description": "touchEnded() 函数将在每次触动结束时被调用。如果 touchEnded() 函数并未有被定义，mouseReleased() 函数有被定义的话将会被调用。<br><br>不同浏览器可能有不同附属于个别触动事件的行为。以防止这些默认行为发生，只需在函数尾端加 “return false”。",
      "returns": ""
    },
      

//Image
      
      
      
    "createImage": {
      "description": "创造一个新的 p5.Image 物件（储存图像的数据类型）。这将提供一个全新的像素缓冲供您使用。缓冲区的大小将由所提供的宽度和高度参数决定。<br><br>.pixels 将提供一个含有所有像素资料的数组。这些值都为数字。这数组的大小为（同时考虑像素密度）显示窗口的大小 x4，分别代表每个像素由左到右，上到下的 R、G、B、A 值。请参考 .pixels 文献。您也能使用更简单的 set() 或 get()。<br><br>在获取一个图像的像素之前，像素资料必须先使用 loadPixels() 函数加载。在数组资料被修改后，updatePixels() 函数必须被调用以更新图像资料。",
      "params": ["整数：像素宽度",
                 "整数：像素宽度"],
      "returns": "p5.Image：p5.Image 物件"
    },
    "saveCanvas": {
      "description": "将现有的画布储存成图像。In Safari, this will open the image in the window and the user must provide their own filename on save-as. Other browsers will either save the file immediately, or prompt the user with a dialogue window.",
      "params": ["p5.Element|HTMLCanvasElement：una variable representando un canvas HTML5 específico (opcional)",
                 "字符串",
                 "字符串：'jpg' 或 'png'"],
      "returns": ""
    },
    "saveFrames": {
      "description": "捕捉一系列可用于制作影响的影格图像。接受回调函数。比如说，您可能想要将影格传送至伺服器以方便储存或转变成影像。如果回调函数没有被提供，浏览器将弹出储存文件对话框以尝试下载所有刚被创造的图像。如果提供回调函数，图像资料默认上并不会被储存而是以物件数组的形式被转送至回调函数做参数，数组大小为储存影格的总数。",
      "params": ["字符串",
                 "字符串：'jpg' 或 'png'",
                 "数字：该捕捉的影格的秒数",
                 "数字：捕捉影格的帧率",
                 "函数(数组)：一个用来处理图像资料的回调函数。此函数将会被给予一个数组为参数。此数组将会储存所定义的捕捉影格物件。每一个物件都会有三个属性：imageData - 为 image/octet-stream 类型、filename 及 extension。"],
      "returns": ""
    },
      

// Image > Loading & Displaying
      

    "loadImage": {
      "description": "설정한 경로에서 이미지를 불러오고 p5.Image를 생성합니다. 이미지를 불러온 후 바로 렌더링이 가능하지 않은 경우도 있습니다. 이를 피하려면 loadImage()를 preload()에서 호출하거나, 이미지가 준비된 후 다른 명령을 하도록 하는 콜백 함수를 이용하세요. 이미지 경로는 스케치에 링크된 HTML 파일을 기준으로 상대 경로를 사용합니다. URL이나 원격 경로를 이용하면 브라우저의 보안 설정에 따라 이미지를 불러오는데에 문제가 생길 수 있습니다.",
      "params": ["문자열: 불러올 이미지 경로",
      "함수(p5.Image): 이미지를 불러온 후 호출할 함수",
      "함수(Event): 이미지 불러오기를 실패하는 경우에 호출할 함수"]
    },
    "image": {
      "description": "p5.js 캔버스에 이미지를 배치합니다. 본 함수를 사용하는 몇가지 방법을 소개하자면 다음과 같습니다. (1) 가장 간단한 방법은 img, x, y 세 개의 변수를 사용하는 방법입니다. x, y는 이미지의 위치를 지정합니다. (2) 이미지의 크기를 설정하려면 img, x, y와 더불어 이미지의 너비와 높이를 설정하는 두개의 변수를 추가로 사용합니다. (3) 여덟개의 변수를 사용하는 방법입니다. 먼저, 각 변수들을 구별하기 위해 p5.js에서 사용하는 용어를 배워봅시다. 첫번째 용어는 '목적지 사각형(destination rectagle)로, dx, dy 등의 변수가 이에 해당합니다. 두번째 용어는 '원본 이미지(source image)'로, sx, sy등의 변수가 이에 해당합니다. '원본 이미지'의 크기를 설정하면 해당 이미지의 일부만을 디스플레이할 때 유용합니다. 자세한 사항은 아래 도식을 참고하세요.",
      "params": ["p5.Image, p5.Element: 디스플레이할 이미지",
      "숫자: 왼쪽 위 모서리의 x 좌표",
      "숫자: 왼쪽 위 모서리의 y 좌표",
      "숫자: 이미지 너비 설정",
      "숫자: 이미지 높이 설정",
      "숫자: 원본 이미지를 배치할 목적지 사각형의 x 좌표",
      "숫자: 원본 이미지를 배치할 목적지 사각형의 y 좌표",
      "숫자: 목적지 사각형의 너비",
      "숫자: 목적지 사각형의 높이",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 x좌표",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 y좌표",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 너비",
      "숫자: 목적지 사각형에 배치할 원본 이미지 일부의 높이"]
    },
    "tint": {
      "description": "定义显示图像的填色值。图像能着色成所定义的颜色或提供透明度值以使其透明化。<br><br>如想是图像透明化但不想影响其颜色，可使用白色为着色值并定义透明度值。比如说，tint(255, 128) 将会使一个图像成为 50% 透明（假设为默认透明度范围 0-255，可使用 colorMode() 调整）。<br><br>灰阶值参数必须低于或等于当时 colorMode() 所定义的最高值。默认最高值为 255。",
      "params": ["数字：红彩值或色调值，需在被定义的范围内",
                 "数字：绿彩值或饱和度值，需在被定义的范围内",
                 "数字：蓝彩值或亮度值，需在被定义的范围内",
                 "数字：",
                 "字符串：颜色字符串",
                 "数字：灰阶值",
                 "数字[]：一个有红、绿、蓝及透明度值的数组",
                 "p5.Color：着色色值"],
      "returns": ""
    },
    "noTint": {
      "description": "移除当时显示图像的填色值并将其恢复成显示图形的原色调。",
      "returns": ""
    },
    "imageMode": {
      "description": "定义图像模式。更改 image() 解读参数的方式以更改图像开始绘制的位置。默认模式为 imageMode(CORNER)，此模式将解读第二及第三个参数为图像的左上角位置。如果加多两个参数，它们则被用来定义图像的宽度和高度。<br><br>imageMode(CORNERS) 将使 image() 函数解读第二及第三个参数为一个角落的位置，而第四个第五个参数为对面角落的位置。<br><br>imageMode(CENTER) 将使 image() 函数解读第二及第三个参数为图像的中心点。如果提供多两个参数，它们将被用来定义图像的宽度和高度。",
      "params": ["常量：CORNER、CORNERS 或 CENTER"],
      "returns": ""
    },
      
      
// Image > Pixels
      
      
    "pixels": {
      "description": "此数组为一个储存显示窗口内所有像素值的 Uint8ClampedArray。这些值都为数字。这数组的大小为（同时考虑像素密度）显示窗口的大小 x4，分别代表每个像素由左到右，上到下的 R、G、B、A 值。视网膜显示及其他高密度显示器将会有更多像素（pixelDensity^2 倍）。比如说，如果图像为 100x100 像素，总共会有 40,000 个元素在 pixels[] 数组内。而在一个视网膜显示，将会有 160,000 个元素。<br><br>数组内最初四个值（指数 0-3）将会是在坐标 (0, 0) 的像素的 R、G、B、A 值。下四个值（指数 4-7）将会是在坐标 (1, 0) 的像素的 R、G、B、A 值。一般上，如果要设置像素 (x, y) 的值： <pre>CODE BLOCK PENDING</pre> 虽然以上的方式有点复杂，它能提供足够的弹性以应对任何像素密度的显示。注意 set() 将会自动处理设定所有在任何像素密度下 (x, y) 坐标在 pixels[] 内的值，不过程序性能可能在像素数组被更改很多次时时不佳。<br><br>在使用这个数组之前，像素资料必须先使用 loadPixels() 函数加载。在数组资料被修改后，updatePixels() 函数必须被调用以更新图像资料。<br><br>注意这不是个普通的 Javascript 数组。这表示 Javascript 数组函数如 <code>slice()</code> 或 <code>arrayCopy()</code> 将不会有效果。",
      "returns": ""
    },
    "blend": {
      "description": "将一个图像内一个区域的像素复制去另一个图像，同时使用所定义的混合模式执行复制。",
      "params": ["p5.Image：原图像",
                 "整数：原图像的左上角 x 坐标",
                 "整数：原图像的左上角 y 坐标",
                 "整数：原图像的宽度",
                 "整数：原图像的高度",
                 "整数：终点图像左上角的 x 坐标",
                 "整数：终点图像左上角的 y 坐标",
                 "整数：终点图像的宽度",
                 "整数：终点图像的高度",
                 "常量：混合模式。BLEND、DARKEST、LIGHTEST、DIFFERENCE、MULTIPLY、EXCLUSION、SCREEN、REPLACE、OVERLAY、HARD_LIGHT、SOFT_LIGHT、DODGE、BURN、ADD 或 NORMAL。"],
      "returns": ""
    },
    "copy": {
      "description": "将画布内一个区域的像素复制去画布内另外一个区域同时也复制一个由 srcImg 参数所定义的图像内一个区域的像素去定义 srcImage 的画布上，这将是原图像。如果原图像与重点区域的大小不同，它将会自动缩放原图像的像素以符合所定义的终点区域。",
      "params": ["p5.Image：原图像",
                 "整数：原图像的左上角 x 坐标",
                 "整数：原图像的左上角 y 坐标",
                 "整数：原图像的宽度",
                 "整数：原图像的高度",
                 "整数：终点图像左上角的 x 坐标",
                 "整数：终点图像左上角的 y 坐标",
                 "整数：终点图像的宽度",
                 "整数：终点图像的高度"],
      "returns": ""
    },
    "filter": {
      "description": "在画布上使用过滤器。<br><br>预设选择为：<br><br>THRESHOLD 将图像转换成黑与白像素，取决于它们是否高于或低于所定义的 level 参数值。参数值必须在 0.0（黑色）与 1.0（白色）之间。如果并没有提供参数的话，默认将设为 0.5。<br><br>GRAY 将图像内的颜色转换成灰阶色。不使用任何参数。<br><br>OPAQUE 设置所有透明度值成完全不透明。不使用任何参数。<br><br>INVERT 设置每个像素成其反值。不使用任何参数。<br><br>POSTERIZE 将限制每个图像的彩色通道至参数所定义的颜色数。参数值可以介于 2 至 255 之间，但是效果会在较低值是比较明显。<br><br>BLUR 将使用 level 参数所定义的模糊度执行高斯模糊。如果没有提供参数，模糊度为高斯模糊半径为 1。越大的值越模糊。<br><br>ERODE 减少亮区。不使用任何参数。<br><br>DILATE 增加亮区。不使用任何参数。",
      "params": ["常量：THRESHOLD、GRAY、OPAQUE、INVERT、POSTERIZE、BLUR、ERODE、DILATE 或 BLUR。",
                 "数字：每个过滤器独有的可选性参数，请看以上"],
      "returns": ""
    },
    "get": {
      "description": "返回任何像素值的一个为 [R,G,B,A] 的数组或捕捉图像的一部分。如果没有提供任何参数，将会返回整个图像。可使用 x 及 y 参数以取得一个像素的值。多加定义 w 及 h 参数可取的显示窗口的一部分。当在取得图像时，x 及 y 参数将定义图像的左上角坐标值，无论当时的图像模式为何。<br><br>如果欲取得的像素在图像外，将返回 [0,0,0,255]。以取得根据当时的颜色值范围及颜色模式的数字，请使用 getColor 而不是 get。<br><br>使用 get(x, y) 以取得一个像素的颜色相对来说简单，但是其速度并没有直接从 pixels[] 数组获取数据来的快。与使用 get(x, y) 有相同的效果但使用 pixels[] 及像素密度 d 的范例如下 <code>var x, y, d; // 设置这为坐标 var off = (y width + x) d * 4; var components = [ pixels[off], pixels[off + 1], pixels[off + 2], pixels[off + 3] ]; print(components);</code><br><br>请参考 pixels[] 文献以知更多详情。",
      "params": ["数字：像素的 x 坐标",
                 "数字：像素的 y 坐标",
                 "数字：宽度",
                 "数字：高度"],
      "returns": "数字[]|p5.Image：在 x,y 的像素值数组或 p5.Image"
    },
    "loadPixels": {
      "description": "将显示窗口的像素资料加载到 pixels[] 数组里。这函数必须在读写 pixels[] 之前被调用。注意只有使用 set() 或直接修改 pixels[] 的改变会发生。",
      "returns": ""
    },
    "set": {
      "description": "改变任何像素的颜色，或直接在显示窗口内绘画一个图像。<br><br>x 及 y 参数用于定义该改变的像素而 c 参数用于定义颜色值。这可以是一个 p5.Color 物件或一个 [R, G, B, A] 像素数组。它也能是一个灰阶值。在设定一个图像时，x 及 y 参数将定义图像左上角的坐标值，无论当时的图像模式为何。<br><br>在使用 set() 后，您必须调用 updatePixels() 以使您的改变生效。这应该在所有像素都被设定后才被调用，而且也必须在调用 get() 或绘制图像之前调用。<br><br>使用 set(x, y) 设置一个像素的颜色相对来说简单，但使其速度并没有直接将数据写在 pixels[] 数组里来的快。直接使用 pixels[] 设置像素值可能在使用视网膜显示器时比较复杂，不过它会在每一个循环有很多像素需要被设定时表现得更好。<br><br>请参考 pixels[] 文献以知更多详情。",
      "params": ["数字：像素的 x 坐标",
                 "数字：像素的 y 坐标",
                 "数字|数字[]|物件：插入一个灰阶值 | 一个像素数组 | 一个 p5.Color 物件 | 一个用于复制的 p5.Image"],
      "returns": ""
    },
    "updatePixels": {
      "description": "使用 pixels[] 数组内的资料更新显示窗口。通常与 loadPixels() 一起使用。如果您只需从该数组中读取像素资料，您不需要调用 updatePixels() — 更新只有在进行更改时需要被调用。updatePixels() 应该在像素数组被更改或 set() 被调用时使用，只有使用 set() 或直接修改 pixels[] 的改变会发生。",
      "params": ["数字：欲更新的区域的左上角 x 坐标",
                 "数字：欲更新的区域的左上角 y 坐标",
                 "数字：欲更新的区域的宽度",
                 "数字：欲更新的区域的高度"],
      "returns": ""
    },
      
      
      
// IO > Input
      
      
    "loadJSON": {
      "description": "从一个文件或网址加载一个 JSON 文件，将返回一个物件。注意如果该 JSON 文件内涵一个数组，此函数仍然会返回一个以数字为指数的物件。<br><br>这函数为异步进行，这表示它可能不会在您绘图的下一行代码执行前完成。JSONP 功能支持是由填充工具所提供而您可以使用第二个参数来定义一个有 JSON 回调定义的物件，只需跟从这里的<a href='https://github.com/camsong/fetch-jsonp'>指示</a>。",
      "params": ["字符串：该加载的文件名或网址",
                 "物件：关于 jsonp 设置的设置物件",
                 "字符串：\"json\" 或 \"jsonp\"",
                 "函数：在 loadJSON() 完成后该执行的函数，返回的数据将会是函数第一个参数",
                 "函数：在发生错误时该执行的函数，回复将会是函数第一个参数"],
      "returns": "物件：JSON 数据"
    },
    "loadStrings": {
      "description": "读取一个文件的内容并使用个别字行创造一个字符串数组。如果文件名被用作第一个参数，如以上范例，该文件必须被储存在绘图文件夹内。<br><br>除此之外，该文件也能从本地电脑任何位置加载，只需使用绝对路径（任何在 Unix 及 Linux 内由 / 开始的路径，或在 Windows 内由驱动器符号开始的路径），又或者任何在网络上的文件网址也能用来当作 filename 参数。<br><br>这函数为异步进行，这表示它可能不会在您绘图的下一行代码执行前完成。",
      "params": ["字符串：该加载的文件名或网址",
                 "函数：在 loadStrings() 完成后该执行的函数，返回的数组将会是函数第一个参数",
                 "函数：在发生错误时该执行的函数，回复将会是函数第一个参数"],
      "returns": "字符串[]：字符串数组"
    },
    "loadTable": {
      "description": "读取一个文件的内容并使用其内容创造一个 p5.Table 物件。如果文件名被用作第一个参数，该文件必须被储存在绘图文件夹内。文件名参数也能是一个在网络上的文件的网址。默认上，该文件被假定为以逗号分隔（格式为 CSV）。该表格只会在 ‘header’ 设置被使用时才会寻找标签。<br><br>可使用的设置包括：<ul><li>csv - 将表格解析为逗号分隔值</li><li>tsv - 将表格解析为制表符分隔值</li><li>header - 这表格有标签行</li></ul><br><br>当使用多个设置时，您只需将他们分为个别的参数并使用逗号分隔。例如：<br><br><code>loadTable('my_csv_file.csv', 'csv', 'header'); </code><br><br>所有加载及储存的文件都需使用 UTF-8 编码。<br><br>这函数为异步进行，这表示它可能不会在您绘图的下一行代码执行前完成。在 preload() 内调用 loadTable() 将保证加载工作会在 setup() 及 draw() 被调用前完成<br><br>在 preload() 外，您可以提供一个回调函数以处理加载物件。",
      "params": ["字符串：该加载的文件名或网址",
                 "字符串：\"header\" \"csv\" \"tsv\"",
                 "函数：在 loadTable() 完成后该执行的函数，返回的 Table 物件将会是函数第一个参数",
                 "函数：在发生错误时该执行的函数，回复将会是函数第一个参数"],
      "returns": "物件：含有数据的 Table 物件"
    },
    "loadXML": {
      "description": "读取一个文件的内容并使用其内容创造一个 XML 物件。如果文件名被用作第一个参数，该文件必须被储存在绘图文件夹内。<br><br>除此之外，该文件也能从本地电脑任何位置加载，只需使用绝对路径（任何在 Unix 及 Linux 内由 / 开始的路径，或在 Windows 内由驱动器符号开始的路径），又或者任何在网络上的文件网址也能用来当作 filename 参数。<br><br>这函数为异步进行，这表示它可能不会在您绘图的下一行代码执行前完成。在 preload() 内调用 loadTable() 将保证加载工作会在 setup() 及 draw() 被调用前完成<br><br>在 preload() 外，您可以提供一个回调函数以处理加载物件。",
      "params": ["字符串：该加载的文件名或网址",
                 "函数：在 loadXML() 完成后该执行的函数，返回的 XML 物件将会是函数第一个参数",
                 "函数：在发生错误时该执行的函数，回复将会是函数第一个参数"],
      "returns": "物件：含有数据的 XML 物件"
    },
    "loadBytes": {
      "description": "",
      "params": ["字符串：该加载的文件名或网址",
                 "函数：在 load() 完成后该执行的函数",
                 "函数：在发生错误时该执行的函数"],
      "returns": "物件：一个 ‘bytes’ 属性将为被加载的缓冲区的物件"
    },
    "httpGet": {
      "description": "执行 HTTP GET 请求的函数。如果数据类型（datatype）没有被定义的话，p5 将会尝试根据网址猜返回数据的类型，默认为文字。这和调用 httpDo(path, 'GET') 的效果一样。‘binary’ 数据类型将会返回一个 Blob 物件，而 ‘arrayBuffer’ 数据类型将会返回一个 ArrayBuffer 并可用来创造类型化数组（如 Uint8Array）。",
      "params": ["字符串：该加载的文件名或网址",
                 "字符串：\"json\"、\"jsonp\"、\"binary\"、\"arrayBuffer\"、\"xml\"或\"text\"",
                 "物件|布尔值：与请求一起传送的参数资料",
                 "函数：在 httpGet() 完成后该执行的函数，返回的资料物件将会是函数第一个参数",
                 "函数：在发生错误时该执行的函数，回复将会是函数第一个参数"],
      "returns": ""
    },
    "httpPost": {
      "description": "执行 HTTP POST 请求的函数。如果数据类型（datatype）没有被定义的话，p5 将会尝试根据网址猜返回数据的类型，默认为文字。这和调用 httpDo(path, 'POST') 的效果一样。",
      "params": ["字符串：该加载的文件名或网址",
                 "字符串：\"json\"、\"jsonp\"、\"xml\" 或 \"text\"。如果不提供此参数，httpPost() 将尝试猜",
                 "物件|布尔值：与请求一起传送的参数资料",
                 "函数：在 httpPost() 完成后该执行的函数，返回的资料物件将会是函数第一个参数",
                 "函数：在发生错误时该执行的函数，回复将会是函数第一个参数"],
      "returns": ""
    },
    "httpDo": {
      "description": "执行 HTTP 请求的函数。如果数据类型（datatype）没有被定义的话，p5 将会尝试根据网址猜返回数据的类型，默认为文字。<br><br>如果需要更高等的使用法，您可以在第一个参数给予路径而第二个参数给予一个物件，物件内容设置与 Fetch API 规范的一样。",
      "params": ["字符串：该加载的文件名或网址",
                 "字符串：\"GET\"、\"POST\" 或 \"PUT\"，默认为 \"GET\"",
                 "字符串：\"json\"、\"jsonp\"、\"xml\" 或 \"text\"",
                 "物件|布尔值：与请求一起传送的参数资料",
                 "函数：在 httpDo() 完成后该执行的函数，返回的资料物件将会是函数第一个参数",
                 "函数：在发生错误时该执行的函数，回复将会是函数第一个参数",
                 "物件：Request 物件，请参考 “fetch” API <a href='https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API'>文献</a>以了解可使用设置"],
      "returns": ""
    },
      
    "p5.XML":{
        "description":"",
        "params":["",
                  "",]
    },  
      
      
// IO > Input
      
    "createWriter": {
      "description": "",
      "params": ["字符串：该创造的文件的名",
                 "字符串："]
    },
      
    "p5.PrintWriter":{
        "description":"",
        "params":["",
                  ""]
    }, 
            
    "save": {
      "description": "储存一个图像、文字、JSON、csv、wav 或 html 文件。将提示客户电脑下载文件。<b>注意 save() 函数不建议在正在循环执行的 draw 函数内使用，因为每一次被调用 save() 函数将会弹出一个储存对话框。</b><br><br>默认上此函数将储存画布成一个图像。您也可以选择定义一个文件名。例如：<pre>CODE BLOCK PENDING</pre>除此之外，第一个参数也能是个画布 p5.Element 的对象、字符串数组、JSON 数组、JSON 物件、p5.Table、p5.Image 或 p5.SoundFile（需要 p5.sound）。第二个参数为文件名（包括扩展名）。第三个参数适用于特别给这一类物件的设定。这函数将会储存一个符合给予的参数的文件。例如：<pre>CODE BLOCK PENDING</pre>",
      "params": ["物件|字符串：如果所提供的是文件名，此函数将会使用该文件名加上 png 或 jpg 文件扩展名来储存画布为一个图像。如果所提供的是物件，此函数则会一物件所定义的方式储存文件（请参考以上范例）。",
                 "字符串：如果所提供的第一个参数为物件，那第二个参数则定义文件名，同时必须包括适当的文件扩展名（请参考以上范例）。",
                 "布尔值|字符串：依文件类型而定的设定。比如说，在储存 JSON 时，true 表示输出文件将会针对文件大小进行优化，而同时牺牲可读性。"],
      "returns": ""
    },
    "saveJSON": {
      "description": "将一个数组或 JSON 物件的内容写进一个 .json 文件内。文件的储存方式及地点在不同浏览器之间有所不同。",
      "params": ["数组|物件：",
                 "字符串：",
                 "布尔值：如果为 true，将移除输出文件内的换行符及空格以优化文件大小（但牺牲可读性）"],
      "returns": ""
    },
    "saveStrings": {
      "description": "将一个字符串数组写进一个文字文件内，每一行为每一组字符串。文件的储存方式及地点在不同浏览器之间有所不同。",
      "params": ["字符串[]：该输出的字符串数组",
                 "字符串：输出文件的名字",
                 "字符串：文件扩展名"],
      "returns": ""
    },
    "saveTable": {
      "description": "将一个表格（Table）物件的内容写进一个文件内。默认将储存为逗号分隔值（'csv'）的文字文件但也可以使用制表符分隔（'tsv'）或生成一个 HTML 表格（'html'）。文件的储存方式及地点在不同浏览器之间有所不同。",
      "params": ["p5.Table：该储存在文件内的表格物件",
                 "字符串：储存表格文件的名字",
                 "字符串：可以是 \"tsv\"、\"csv\" 或 \"html\""],
      "returns": ""
    },
      
      
// IO > Table
      
      
    "p5.Table": {
      "description": "Los objetos Table almacenan datos con múltiples filas y columnas, tal como una hoja de cálculo tradicional. Los objetos Table pueden ser generados desde cero, dinámicamente, o usando datos desde un archivo existente.",
      "params": ["Arreglo: un arreglo de objetos p5.TableRow"],
      "returns": "p5.Table: 该 p5 物件.Table generado"
    },
    "p5.TableRow": {
      "description": "Un objeto TableRow representa una única fila de datos, grabados en columnas, de una tabla. Un objeto TableRow contiene tanto un arreglo ordenado, como un objeto JSON desordenado.",
      "params": ["String: opcional, puebla la fila con una serie de valores, separados por el separador",
      "String: por defecto, valores separados por coma (csv)"],
      "returns": "该 p5 物件"
    },
      

// IO > Time & Date
      
      
    "day": {
      "description": "p5.js 将与您的电脑的时钟沟通，day() 函数将返回当天的日期天数在 1 - 31 的范围内。",
      "returns": "整数：当天的日期天数"
    },
    "hour": {
      "description": "p5.js 将与您的电脑的时钟沟通，hour() 函数将返回当时时间的小时数在 0 - 23 的范围内。",
      "returns": "整数：当时时间的小时数"
    },
    "minute": {
      "description": "p5.js 将与您的电脑的时钟沟通，minute() 函数将返回当时时间的分钟数在 0 - 59 的范围内。",
      "returns": "整数：当时时间的分钟数"
    },
    "millis": {
      "description": "返回自程序开始以来的毫秒（一秒的一千分之一）数。这资料一般可用于定时事件及动画序列。",
      "returns": "整数：自程序开始以来的毫秒数"
    },
    "month": {
      "description": "p5.js 将与您的电脑的时钟沟通，month() 函数将返回当天的日期月数在 1 - 12 的范围内。",
      "returns": "整数：当时日期的月数"
    },
    "second": {
      "description": "p5.js 将与您的电脑的时钟沟通，second() 函数将返回当时时间的秒数在 0 - 59 的范围内。",
      "returns": "整数：当时时间的秒数"
    },
    "year": {
      "description": "p5.js 将与您的电脑的时钟沟通，year() 函数将返回当天的日期年数为一个整数（2014、2015、2016等等）。",
      "returns": "整数：当时日期的年数"
    },

// Math > Calculation      
      
    "abs": {
      "description": "计算一个数字的绝对值（大小值）。映射到 Math.abs()。一个数字的绝对值一定是个正数。",
      "params": ["数字：用于计算的数字"],
      "returns": "数字：被给予数字的绝对值"
    },
    "ceil": {
      "description": "计算最靠近并大于或等于参数值的整数。映射到 Math.ceil()。比如说，ceil(9.03) 将返回 10。",
      "params": ["数字：该取整的数字"],
      "returns": "整数：取整后的数字"
    },
    "constrain": {
      "description": "限制一个数字于最低值与最高值之间。",
      "params": ["数字：该限制的数字",
                 "数字：最低值",
                 "数字：最高值"],
      "returns": "数字：被限制后的数字"
    },
    "dist": {
      "description": "计算两点之间的距离。",
      "params": ["数字：第一个点的 x 坐标",
                 "数字：第一个点的 y 坐标",
                 "数字：第二个点的 x 坐标",
                 "数字：第二个点的 y 坐标",
                 "数字：第一个点的 z 坐标",
                 "数字：第二个点的 z 坐标"],
      "returns": "数字：两点之间的距离"
    },
    "exp": {
      "description": "返回欧拉数 e （2.71828...）提升到由参数 n 定义的指数。映射到 Math.exp()。",
      "params": ["数字：该提升的指数"],
      "returns": "数字：e^n"
    },
    "floor": {
      "description": "计算最靠近并小于或等于参数值的整数。映射到 Math.floor()。",
      "params": ["数字：该取整的数字"],
      "returns": "整数：取整后的数字"
    },
    "lerp": {
      "description": "计算一个介于两个数字之间所定义的插值量位置的数字。amt 参数为两个值之间的插值量，0.0 为第一个值，0.1 为非常接近第一个值，0.5 为两者之间等等。lerp 函数可用来沿着直线制作动画及绘制虚线。",
      "params": ["数字：第一个值",
                 "数字：第二个值",
                 "数字：介于 0.0 与 1.0 之间的数字"],
      "returns": "数字：插值"
    },
    "log": {
      "description": "计算一个数字的自然对数（e 为底数的对数）。这函数需要 n 参数大于 0.0。映射到 Math.log()。",
      "params": ["数字：大于 0 的数字"],
      "returns": "数字：n 的自然对数"
    },
    "mag": {
      "description": "计算一个向量的大小（或长度）。向量为一个空间内的方向，通常用于电脑图形及线性代数。因为它没有“开始”位置，一个向量的大小可以被想成是 0,0 坐标与向量 x,y 坐标之间的距离。因此，mag() 是 dist(0, 0, x, y) 的缩写。",
      "params": ["数字：第一个值",
                 "数字：第二个值"],
      "returns": "数字：从 (0, 0) 至 (a, b) 的向量的大小"
    },
    "map": {
      "description": "从一个范围内映射一个数字去另一个范围。<br><br>在以上第一个范例，25 被从 0 至 100 之间的范围映射去窗口最左方 (0) 至最右方 (width) 的范围内。",
      "params": ["数字：该转换的值",
                 "数字：现在值的最低值",
                 "数字：现在值的最低值",
                 "数字：目标值的最低值",
                 "数字：目标值的最高值",
                 "布尔值：限制目标值在最高及最低值之间"],
      "returns": "数字：映射后的数字"
    },
    "max": {
      "description": "找出一系列数字中最大的值，并返回该值。max() 能接受任何数量的数字参数，或是一个任何大小的数组。",
      "params": ["数字：用于比较的数字",
                 "数字：用于比较的数字",
                 "数字[]：用于比较的数字"],
      "returns": "数字：最高值的数字"
    },
    "min": {
      "description": "找出一系列数字中最小的值，并返回该值。min() 能接受任何数量的数字参数，或是一个任何大小的数组。",
      "params": ["数字：用于比较的数字",
                 "数字：用于比较的数字",
                 "数字[]：用于比较的数字"],
      "returns": "数字：最低值的数字"
    },
    "norm": {
      "description": "将一个数字由一个范围标准化成介于 0 及 1 之间的值。与 map(value, low, high, 0, 1) 的效果相同。在范围外的数字将不会被限制在 0 与 1 之间，因为范围外的值通常是有意及有用的。（参考以上第二个范例）",
      "params": ["数字：该标准化的值",
                 "数字：现在值的最低值",
                 "数字：现在值的最高值"],
      "returns": "数字：标准化后的数字"
    },
    "pow": {
      "description": "执行幂运算。pow() 函数是个能有效率地将数字大量乘于自己（或其倒数）的方式。比如说，pow(3, 5) 等同于 3*3*3*3*3 而 pow(3, -5) 等同于 1 / (3*3*3*3*3)。映射到 Math.pow()。",
      "params": ["数字：幂运算的底数",
                 "数字：幂运算的指数"],
      "returns": "数字：n^e"
    },
    "round": {
      "description": "计算最靠近 n 参数的整数。比如说，round(133.8) 将返回 134。映射到 Math.round()。",
      "params": ["数字：该取整的数字"],
      "returns": "整数：取整后的数字"
    },
    "sq": {
      "description": "平方一个数字（将数字乘于自己）。结果一定是个正数，因为将两个负数相乘一定会有一个正数结果。比如说 -1 * -1 = 1。",
      "params": ["数字：该平方的数字"],
      "returns": "数字：平方后的数字"
    },
    "sqrt": {
      "description": "计算一个数字的平方根。一个数字的平方根一定是个正数，虽然也可能有正确的负数平方根。一个数字 a 的平方根 s 有以下属性 s*s = a。此函数为取平方的相反。映射到 Math.sqrt()。",
      "params": ["数字：该取平方根的非负数"],
      "returns": "数字：取平方根后的数字"
    },
    "fract()": {
        "description": "",
    },
      
      
// Math > Vector

    "createVector()": {
        "description": "",
    },

    "p5.Vector()": {
        "description": "",
    },


// Math > Noise
      
    "noise": {
      "description": "返回所定义坐标的柏林噪声值。柏林噪声是个用来生成比 random() 所能生成更自然及更谐波的随机数字系列。在 1980 年代有 Ken Perlin 所发明，柏林噪声至今常被用在图形应用程序中生成程序纹理、自然运动、形状、地形等等。<br><br>柏林噪声与 random() 函数最主要的不同点在于前者是在一个无限的 n 维空间内定义的，这空间内每一对坐标都相对于一个固定的半随机值（只有在程序进行时为固定的；请参考 noiseSeed() 函数）。p5.js 能计算 1 维、2 维及 3 维噪声，这取决于所给予的坐标数。返回的值一定会在 0.0 至 1.0 之间。噪音值可以通过在噪音空间内移动以制成动画，如以上范例所示。第二及第三个空间维度也能被解读成时间。<br><br>所生成的噪音结构上和一般音频信号相似，尤其是此函数的频率。与物理学上谐波的概念相似，泊林噪音也是在计算几个八度后再将其结果加起来以得到最后的结果。<br><br>另外一个控制返回随机数系列的特征的方法是控制输入坐标值的大小。因为此函数能在无限之的空内内应用，输入坐标的值并不重要，只有个别坐标之间的距离需要被注意（如在循环内使用 noise() 时）。一般来说坐标之间的距离越小，生成噪声随机数列将会越平滑。介于 0.005-0.03 之间的距离应该适合大多数应用场合，不过这可能因应用需求而变。",
      "params": ["数字：噪声空间的 x 坐标",
                 "数字：噪声空间的 y 坐标",
                 "数字：噪声空间的 z 坐标"],
      "returns": "数字：柏林噪声在特定坐标的值（介于 0 与 1 之间）"
    },
    "noiseDetail": {
      "description": "调整柏林噪声函数所生成的噪声特征及细节度。与物理学上谐波的概念相似，泊林噪音也是在计算几个八度后才得到最后的结果。越低的八度将会影响输出信号值越多因此同时会定义噪音的整体强度，而较高的八度将会在噪音系列中制作更精细的细节。<br><br>默认上，此噪音将使用四个八度计算而每个八度将有其前者一半的影响力，第一个八度的影响力为 50% 。这衰退值能通过加多一个参数而改变。比如说如果衰退因数为 0.75 那表示每个八度将会有其前者的 75% 的影响力（减少 25%）。任何介于 0.0 与 1.0 的值都能被接受，不过注意高于 0.5 的值可能会造成 noise() 函数会返回大于 1.0 的值。<br><br>通过改变这些参数，noise() 函数所生成的信号可适应于非常特别的需求或特点。",
      "params": ["数字：噪音该使用的八度数",
                 "数字：每个八度的衰退因数"],
      "returns": ""
    },
    "noiseSeed": {
      "description": "定义 noise() 使用的随机种子值。默认上，noise() 将在每一次改程序被执行时生成不同的结果。只需定义 value 参数至一个常量就能确保每一次软件执行时都会返回一样的随机数列。",
      "params": ["数字：随机种子值"],
      "returns": ""
    },

// Math > Random
      

    "randomSeed": {
      "description": "定义 random() 使用的随机种子值。<br><br>默认上，random() 将在每一次改程序被执行时生成不同的结果。只需定义 seed 参数至一个常量就能确保每一次软件执行时都会返回一样的伪随机数。",
      "params": ["数字：随机种子值"],
      "returns": ""
    },
    "random": {
      "description": "返回一个随机的浮点数。<br><br>可使用 0、1 或 2 个参数。<br><br>如果并没有定义任何参数，将返回一个介于 0 与 1（但不包括 1）的随机数。<br><br>如果只定义一个参数并且该参数为数字，将返回一个介于 0 与 该数字（但不包括该数字）的随机数。<br><br>如果值定义一个参数并且该参数为数组，将返回该数组中随机一个元素。<br><br>如果定义两个参数，将返回一个介于第一个参数与第二个参数（但不包括第二个参数）的随机数。",
      "params": ["数字：最低值（包括此值）",
                 "数字：最高值（不包括此值）",
                 "数组：供选择的数组"],
      "returns": "数字：随机数"
    },
    "randomGaussian": {
      "description": "返回一个符合高斯，或正态，分布的随机数。理论上 randomGaussian() 没有最高或最低返回值。不过，差均值很多的值被返回的机率将会很低；而接近均质的值被返回的机率将会相对较高。<br><br>可使用 0、1 或 2 个参数。<br>如果并没有定义任何参数，将使用均值为 0 与 标准差为 1。<br>如果只定义一个参数，该参数将为均值（标准差为 1）。<br>如果定义两个参数，第一个参数为均值，第二个参数为标准差。",
      "params": ["数字：均值",
                 "数字：标准偏差"],
      "returns": "数字：随机数"
    },
      
      
// Math > Trigonometry
      
    "acos": {
      "description": "cos() 的反值，将返回一个值的反余弦值。此函数接受介于 -1 与 1 之间的值并将返回介于 0 与 PI（3.1415927）之间的值。",
      "params": ["数字：该取反余弦值的值"],
      "returns": "数字：该值的反余弦值"
    },
    "asin": {
      "description": "sin() 的反值，将返回一个值的反正弦值。此函数接受介于 -1 与 1 之间的值并将返回介于 -PI/2 与 PI/2 之间的值。",
      "params": ["数字：该取反正弦值的值"],
      "returns": "数字：该值的反正弦值"
    },
    "atan": {
      "description": "tan() 的反值，将返回一个值的反正切值。此函数接受介于 -Infinity 与 Infinity（包括 Infinity）之间的值并将返回介于 -PI/2 与 PI/2 之间的值。",
      "params": ["数字：该取反正切值的值"],
      "returns": "数字：该值的反正切值"
    },
    "atan2": {
      "description": "计算从一个被定义的点到坐标原点的弧度，并由正 x 轴开始计算。将返回介于 PI 与 -PI 之间的浮点数。atan2() 函数通常用于定向几何图形至鼠标的位置。<br><br>注意：第一个参数为 y 坐标，而第二个参数为 x 坐标，这是为了适应计算正切值的结构。",
      "params": ["数字：该点的 y 坐标",
                 "数字：该点的 x 坐标"],
      "returns": "数字：该点的反正切值"
    },
    "cos": {
      "description": "计算一个角度的余弦值。此函数将使用当时的角度模式。返回值将介于 -1 与 1 之间的值。",
      "params": ["数字：角度"],
      "returns": "数字：该角度的余弦值"
    },
    "sin": {
      "description": "计算一个角度的正弦值。此函数将使用当时的角度模式。返回值将介于 -1 与 1 之间的值。",
      "params": ["数字：角度"],
      "returns": "数字：该角度的正弦值"
    },
    "tan": {
      "description": "计算一个角度的正切值。此函数将使用当时的角度模式。返回值将介于 -1 与 1 之间的值。",
      "params": ["数字：角度"],
      "returns": "数字：该角度的正切值"
    },
    "degrees": {
      "description": "将一个弧度值转换成其相对的角度值。弧度和角度为两个测量同样一个东西的方法。一个圆形里有 360 度而也有 2*PI 个弧度。比如说，90° = PI/2 = 1.5707964。此函数将不会使用当时的角度模式。",
      "params": ["数字：由弧度转换成角度的值"],
      "returns": "数字：转换后的角度值"
    },
    "radians": {
      "description": "将一个角度值转换成其相对的弧度值。弧度和角度为两个测量同样一个东西的方法。一个圆形里有 360 度而也有 2*PI 个弧度。比如说，90° = PI/2 = 1.5707964。此函数将不会使用当时的角度模式。",
      "params": ["数字：由角度转换成弧度的值"],
      "returns": "数字：转换后的角度值"
    },
    "angleMode": {
      "description": "定义当时 p5 的角度模式。默认模式为 RADIANS（弧度）。",
      "params": ["常量：RADIANS 或 DEGREES"],
      "returns": ""
    },
      
      
// Typography > Attributes
      
    "textAlign": {
      "description": "定义绘制问题的对齐方向。使用两个参数：horizAlign（LEFT、CENTER 或 RIGHT）及 vertAlign（TOP、BOTTOM、CENTER 或 BASELINE）。<br><br>horizAlign 参数为 text() 函数的 x 值，而 vertAlign 参数为 y 值。<br><br>因此如果您使用 textAlign(LEFT)，您将会使文字最左方对齐 text() 函数所使用的 x 参数。如果您使用 textAlign(RIGHT, TOP)，您将会使文字最右方对齐 x 值而文字最上方对齐 y 值。",
      "params": ["常量：水平对齐，LEFT、CENTER 或 RIGHT",
                 "常量：垂直对齐，TOP、BOTTOM、CENTER 或 BASELINE"],
      "returns": ""
    },
    "textLeading": {
      "description": "定义或获取行与行之间的像素距离。此设置将会在所有接下来的 text() 函数调用时生效。",
      "params": ["数字：行与行之间的像素距离"],
      "returns": ""
    },
    "textSize": {
      "description": "定义或获取当时的字体大小。这大小将会在所有接下来的 text() 函数调用时生效。字形大小是使用像素定义。",
      "params": ["数字：字体的像素大小"],
      "returns": ""
    },
    "textStyle": {
      "description": "定义或获取系统字体的风格，可以是 NORMAL、ITALIC 或 BOLD。注意：这可能被 CSS 风格所覆盖。至与非系统字体（opentype、truetype 等）请直接加载已风格化的字体。",
      "params": ["常量：字体的风格，可以是 NORMAL、ITALIC 或 BOLD"],
      "returns": ""
    },
    "textWidth": {
      "description": "计算及返回任何字符或字符串的宽度。",
      "params": ["字符串：该测量的字符串"],
      "returns": "数字"
    },
    "textAscent": {
      "description": "返回当时字体在当时所定的大小的整体高度。这高度代表从基准线算起至最高字体的顶点的距离。",
      "returns": "数字"
    },
    "textDescent": {
      "description": "返回当时字体在当时所定的大小的下端线高度。",
      "returns": "数字"
    },
      
      
// Typography > Loading & Displaying
      
    "loadFont": {
      "description": "从一个文件或网址加载一个 opentype 字形文件（.otf、.ttf），将返回一个 p5.Font 物件。这函数为异步进行，这表示它可能不会在您绘图的下一行代码执行前完成。<br><br>字形的路径应该相对于链接您的绘图的 HTML 文件。从其他 URL 或远程位置加载字形可能会被浏览器的内建安全模式阻止。",
      "params": ["字符串：该加载的字形名字或网址",
                 "函数：在 loadFont() 完成后该调用的函数",
                 "函数：在发生错误时该调用的函数"],
      "returns": "p5.Font：p5.Font 物件"
    },
      
      
    "text": {
      "description": "将文字绘制在荧幕上。显示第一个参数内的资料在荧幕上由其他参数所定义的位置。将会使用默认字形除非使用 textFont() 函数定义使用其他字形同时也将使用默认大小除非使用 textSize() 定义文字大小。文字的颜色可使用 fill() 函数定义。可使用 stroke() 及 strokeWeight() 函数添加文字外形线。<br><br>文字显示将位于 textAlign() 函数所定义的位置，您可将文字绘制在坐标的左边、右边或中间。<br><br>x2 及 y2 参数将定义一个方形文字显示区而且只适用于字符串资料类型。当这两个参数被定义时，它们将使用当时的 rectMode() 设置被解读。不符合方形大小的文字将不会被绘制在荧幕上。",
      "params": ["字符串|物件|数组|数字|布尔值：该显示的字母数字符号",
                 "数字：文字的 x 坐标",
                 "数字：文字的 y 坐标",
                 "数字：默认上，文字格的宽度，请参考 rectMode()",
                 "数字：默认上，文字格的高度，请参考 rectMode()"],
      "returns": ""
    },
    "textFont": {
      "description": "定义使用 text() 函数绘制文字时该使用的字形。",
      "params": ["物件|字符串：一个使用 loadFont() 加载的字形，或一个代表 Web 安全字体（一个所有系统都通用的字形）的字符串",
                 "数字：字形大小"],
      "returns": ""
    },
    "p5.Font": {
      "description": "Clase base para manipulación de tipografía",
      "params": ["物件：puntero a la instancia p5"],
      "returns": "该 p5 物件"
    },
      
      
// Lights, Camera > Interaction
      
    "camera": {
      "description": "定义在一个三维绘图内相机的位置。此函数的行为与 gluLookAt 相似，不过它会覆盖原有的模型视图矩阵而不会在原有的模型视图上添加任何变形。当没有给予任何参数时，此函数将定义默认相机为 camera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);",
      "params": ["数字：相机在 x 轴的位置",
                 "数字：相机在 y 轴的位置",
                 "数字：相机在 z 轴的位置",
                 "数字：代表绘图中心点的 x 坐标",
                 "数字：代表绘图中心点的 y 坐标",
                 "数字：代表绘图中心点的 z 坐标",
                 "数字：相机向上方向量的 x 分量",
                 "数字：相机向上方向量的 y 分量",
                 "数字：相机向上方向量的 z 分量"],
      "returns": ""
    },
    "perspective": {
      "description": "定义透视相机。当没有给予任何参数时，此函数将定义默认相机为 perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0) 其中 cameraZ 为 ((height/2.0) / tan(PI60.0/360.0));",
      "params": ["数字：相机视锥的垂直视野，使用角度模式单位定义视野底部到顶部的角度",
                 "数字：相机视锥的长宽比",
                 "数字：视锥近平面的长度",
                 "数字：视锥远平面的长度"],
      "returns": ""
    },
    "ortho": {
      "description": "定义正射相机。",
      "params": ["数字：相机视锥的左平面",
                 "数字：相机视锥的右平面",
                 "数字：相机视锥的底平面",
                 "数字：相机视锥的顶平面",
                 "数字：相机视锥的近平面",
                 "数字：相机视锥的远平面"],
      "returns": ""
    },
    "ambientLight": {
      "description": "使用所定义的颜色创造一个环境光。",
      "params": ["数字：红彩值或色调值，需在被定义的范围内",
                 "数字：绿彩值或饱和度值，需在被定义的范围内",
                 "数字：蓝彩值或亮度值，需在被定义的范围内",
                 "数字：",
                 "字符串：颜色字符串",
                 "数字：灰阶值",
                 "数字[]：一个有红、绿、蓝及透明度值的数组",
                 "p5.Color：环境光色"],
      "returns": ""
    },

    "directionalLight": {
      "description": "使用所定义的颜色及方向创造一个定向光。",
      "params": ["数字：红彩值或色调值，需在被定义的范围内",
                 "数字：绿彩值或饱和度值",
                 "数字：蓝彩值或亮度值",
                 "p5.Vector：光的方向",
                 "数字[]|字符串|p5.Color：颜色数组、CSS 颜色字符串或 p5.Color 颜色值",
                 "数字：x 轴方向",
                 "数字：y 轴方向",
                 "数字：z 轴方向"],
      "returns": ""
    },
    "pointLight": {
      "description": "使用所定义的颜色及灯光位置创造一个点光源。",
      "params": ["数字：红彩值或色调值，需在被定义的范围内",
                 "数字：绿彩值或饱和度值",
                 "数字：蓝彩值或亮度值",
                 "数字：x 轴方向",
                 "数字：y 轴方向",
                 "数字：z 轴方向",
                 "p5.Vector：光的方向",
                 "数字[]|字符串|p5.Color：颜色数组、CSS 颜色字符串或 p5.Color 颜色值"],
      "returns": ""
    },
    "loadShader": {
      "description": "从所定义的顶点及片断着色器文件路径加载自定的着色器。着色器是在背景异步加载的，因此此函数应该在 preload() 内使用。<br><br>现在为止有三种主要的着色器种类。只要相对的参数有在着色器内被定义，p5 将会自动提供相对的顶点、法线、颜色及灯光属性。",
      "params": ["字符串：存有顶点着色器源代码的文件的路径",
                 "字符串：存有片断着色器源代码的文件的路径"],
      "returns": "p5.Shader：由所定义的顶点及片断着色器所创造的着色器物件"
    },
    "createShader": {
      "description": "",
      "params": ["字符串：顶点着色器的源代码",
                 "字符串：片断着色器的源代码"],
      "returns": "p5.Shader：由所定义的顶点及片断着色器所创造的着色器物件"
    },
    "shader": {
      "description": "shader() 函数让其使用者提供自定的着色器以用于在 WEBGL 模式下渲染形状。使用这能使用 loadShader() 加载自定义的着色器。",
      "params": ["p5.Shader：欲用于渲染形状用的 p5.Shader"]
    },
    "normalMaterial": {
      "description": "形状的法线材料。您可在此<a href='https://p5js.org/zh-Hans/examples/3d-materials.html'>范例</a>查看所有可用的材料。",
      "returns": ""
    },
    "texture": {
      "description": "形状的纹理。您可在此<a href='https://p5js.org/zh-Hans/examples/3d-materials.html'>范例</a>查看所有可用的材料。",
      "params": ["p5.Image|p5.MediaElement|p5.Graphics：该渲染成纹理的二维图像"],
      "returns": ""
    },
    "ambientMaterial": {
      "description": "使用所给予颜色定义形状的环境材料。您可在此<a href='https://p5js.org/zh-Hans/examples/3d-materials.html'>范例</a>查看所有可用的材料。",
      "params": ["数字：红彩值或色调值，需在被定义的范围内",
                 "数字：绿彩值或饱和度值",
                 "数字：蓝彩值或亮度值",
                 "数字：透明度",
                 "数字[]|字符串|p5.Color：颜色数组、CSS 颜色字符串或 p5.Color 颜色值"],
      "returns": ""
    },
    "specularMaterial": {
      "description": "使用所给予颜色定义形状的镜面材料。您可在此<a href='https://p5js.org/zh-Hans/examples/3d-materials.html'>范例</a>查看所有可用的材料。",
      "params": ["数字：红彩值或色调值，需在被定义的范围内",
                 "数字：绿彩值或饱和度值",
                 "数字：蓝彩值或亮度值",
                 "数字：透明度",
                 "数字[]|字符串|p5.Color：颜色数组、CSS 颜色字符串或 p5.Color 颜色值"],
      "returns": ""
    },
    "p5.RendererGL": {
      "description": "TODO",
      "returns": "p5: 该 p5 物件"
    },
    "p5.Shader": {
      "description": "Clase Shader para el modo WEBGL",
      "params": ["p5.RendererGL: una instancia de p5.RendererGL que servirá de contexto GL para este nuevo p5.Shader",
      "String: código fuente para el vertex shader (en forma de string)",
      "String: código fuente para el fragment shader (en forma de string)"],
      "methods": ["Wrapper de las funciones gl.uniform. Como almacenamos información de uniform en el shader, la podemos usar para revisar los datos provistos y llamar a la función apropiada."]
    }
  },

  
}