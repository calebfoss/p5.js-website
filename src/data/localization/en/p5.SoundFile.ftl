description__0 = SoundFile object with a path to a file.
description__1 = The p5.SoundFile may not be available immediately because it loads the file information asynchronously.
description__2 = To do something with the sound as soon as it loads pass the name of a function as the second parameter.
description__3 = Only one file path is required. However, audio file formats (i.e. mp3, ogg, wav and m4a/aac) are not supported by all web browsers. If you want to ensure compatability, instead of a single file path, you may include an Array of filepaths, and the browser will choose a format that works.
params__path = String|Array: path to a sound file (String). Optionally,  you may include multiple file formats in  an array. Alternately, accepts an object  from the HTML5 File API, or a p5.File.
params__successCallback = Function: (Optional) Name of a function to call once file loads
params__errorCallback = Function: (Optional) Name of a function to call if file fails to  load. This function will receive an error or  XMLHttpRequest object with information  about what went wrong.
params__whileLoadingCallback = Function: (Optional) Name of a function to call while file  is loading. That function will  receive progress of the request to  load the sound file  (between 0 and 1) as its first  parameter. This progress  does not account for the additional  time needed to decode the audio data.
isLoaded__description__0 = Returns true if the sound file finished loading successfully.
isLoaded__returns = Boolean:
play__description__0 = Play the p5.SoundFile
play__params__startTime = Number: (Optional) (optional) schedule playback to start (in seconds from now).
play__params__rate = Number: (Optional) (optional) playback rate
play__params__amp = Number: (Optional) (optional) amplitude (volume)  of playback
play__params__cueStart = Number: (Optional) (optional) cue start time in seconds
play__params__duration = Number: (Optional) (optional) duration of playback in seconds
playMode__description__0 = p5.SoundFile has two play modes: <code>restart</code> and <code>sustain</code>. Play Mode determines what happens to a p5.SoundFile if it is triggered while in the middle of playback. In sustain mode, playback will continue simultaneous to the new playback. In restart mode, play() will stop playback and start over. With untilDone, a sound will play only if it's not already playing. Sustain is the default mode.
playMode__params__str = String: 'restart' or 'sustain' or 'untilDone'
pause__description__0 = Pauses a file that is currently playing. If the file is not playing, then nothing will happen.
pause__description__1 = After pausing, .play() will resume from the paused position. If p5.SoundFile had been set to loop before it was paused, it will continue to loop after it is unpaused with .play().
pause__params__startTime = Number: (Optional) (optional) schedule event to occur  seconds from now
loop__description__0 = Loop the p5.SoundFile. Accepts optional parameters to set the playback rate, playback volume, loopStart, loopEnd.
loop__params__startTime = Number: (Optional) (optional) schedule event to occur  seconds from now
loop__params__rate = Number: (Optional) (optional) playback rate
loop__params__amp = Number: (Optional) (optional) playback volume
loop__params__cueLoopStart = Number: (Optional) (optional) startTime in seconds
loop__params__duration = Number: (Optional) (optional) loop duration in seconds
setLoop__description__0 = Set a p5.SoundFile's looping flag to true or false. If the sound is currently playing, this change will take effect when it reaches the end of the current playback.
setLoop__params__Boolean = Boolean: set looping to true or false
isLooping__description__0 = Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not.
isLooping__returns = Boolean:
isPlaying__description__0 = Returns true if a p5.SoundFile is playing, false if not (i.e. paused or stopped).
isPlaying__returns = Boolean:
isPaused__description__0 = Returns true if a p5.SoundFile is paused, false if not (i.e. playing or stopped).
isPaused__returns = Boolean:
stop__description__0 = Stop soundfile playback.
stop__params__startTime = Number: (Optional) (optional) schedule event to occur  in seconds from now
pan__description__0 = Set the stereo panning of a p5.sound object to a floating point number between -1.0 (left) and 1.0 (right). Default is 0.0 (center).
pan__params__panValue = Number: (Optional) Set the stereo panner
pan__params__timeFromNow = Number: (Optional) schedule this event to happen  seconds from now
getPan__description__0 = Returns the current stereo pan position (-1.0 to 1.0)
getPan__returns = Number: Returns the stereo pan setting of the Oscillator  as a number between -1.0 (left) and 1.0 (right).  0.0 is center and default.
rate__description__0 = Set the playback rate of a sound file. Will change the speed and the pitch. Values less than zero will reverse the audio buffer.
rate__params__playbackRate = Number: (Optional) Set the playback rate. 1.0 is normal,  .5 is half-speed, 2.0 is twice as fast.  Values less than zero play backwards.
setVolume__description__0 = Multiply the output volume (amplitude) of a sound file between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class.
setVolume__description__1 = Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal.
setVolume__params__volume = Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator
setVolume__params__rampTime = Number: (Optional) Fade for t seconds
setVolume__params__timeFromNow = Number: (Optional) Schedule this event to happen at  t seconds in the future
duration__description__0 = Returns the duration of a sound file in seconds.
duration__returns = Number: The duration of the soundFile in seconds.
currentTime__description__0 = Return the current position of the p5.SoundFile playhead, in seconds. Time is relative to the normal buffer direction, so if <code>reverseBuffer</code> has been called, currentTime will count backwards.
currentTime__returns = Number: currentTime of the soundFile in seconds.
jump__description__0 = Move the playhead of a soundfile that is currently playing to a new position and a new duration, in seconds. If none are given, will reset the file to play entire duration from start to finish. To set the position of a soundfile that is not currently playing, use the <code>play</code> or <code>loop</code> methods.
jump__params__cueTime = Number: cueTime of the soundFile in seconds.
jump__params__duration = Number: duration in seconds.
channels__description__0 = Return the number of channels in a sound file. For example, Mono = 1, Stereo = 2.
channels__returns = Number: [channels]
sampleRate__description__0 = Return the sample rate of the sound file.
sampleRate__returns = Number: [sampleRate]
frames__description__0 = Return the number of samples in a sound file. Equal to sampleRate * duration.
frames__returns = Number: [sampleCount]
getPeaks__description__0 = Returns an array of amplitude peaks in a p5.SoundFile that can be used to draw a static waveform. Scans through the p5.SoundFile's audio buffer to find the greatest amplitudes. Accepts one parameter, 'length', which determines size of the array. Larger arrays result in more precise waveform visualizations.
getPeaks__description__1 = Inspired by Wavesurfer.js.
getPeaks__returns = Float32Array: Array of peaks.
getPeaks__params__length = Number: (Optional) length is the size of the returned array.  Larger length results in more precision.  Defaults to 5*width of the browser window.
reverseBuffer__description__0 = Reverses the p5.SoundFile's buffer source. Playback must be handled separately (see example).
onended__description__0 = Schedule an event to be called when the soundfile reaches the end of a buffer. If the soundfile is playing through once, this will be called when it ends. If it is looping, it will be called when stop is called.
onended__params__callback = Function: function to call when the  soundfile has ended.
connect__description__0 = Connects the output of a p5sound object to input of another p5.sound object. For example, you may connect a p5.SoundFile to an FFT or an Effect. If no parameter is given, it will connect to the main output. Most p5sound objects connect to the master output when they are created.
connect__params__object = Object: (Optional) Audio object that accepts an input
disconnect__description__0 = Disconnects the output of this p5sound object.
setPath__description__0 = Reset the source for this SoundFile to a new path (URL).
setPath__params__path = String: path to audio file
setPath__params__callback = Function: Callback
setBuffer__description__0 = Replace the current Audio Buffer with a new Buffer.
setBuffer__params__buf = Array: Array of Float32 Array(s). 2 Float32 Arrays  will create a stereo source. 1 will create  a mono source.
addCue__description__0 = Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point.
addCue__description__1 = Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback.
addCue__description__2 = Time will be passed as the first parameter to the callback function, and param will be the second parameter.
addCue__returns = Number: id ID of this cue,  useful for removeCue(id)
addCue__params__time = Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.
addCue__params__callback = Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.
addCue__params__value = Object: (Optional) An object to be passed as the  second parameter to the  callback function.
removeCue__description__0 = Remove a callback based on its ID. The ID is returned by the addCue method.
removeCue__params__id = Number: ID of the cue, as returned by addCue
clearCues__description__0 = Remove all of the callbacks that had originally been scheduled via the addCue method.
save__description__0 = Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. To upload a file to a server, see <a href="/reference/#/p5.SoundFile/getBlob">getBlob</a>
save__params__fileName = String: (Optional) name of the resulting .wav file.
getBlob__description__0 = This method is useful for sending a SoundFile to a server. It returns the .wav-encoded audio data as a "<a target="_blank" title="Blob reference at MDN" href="https://developer.mozilla.org/en-US/docs/Web/API/Blob">Blob</a>". A Blob is a file-like data object that can be uploaded to a server with an <a href="/reference/#/p5/httpDo">http</a> request. We'll use the <code>httpDo</code> options object to send a POST request with some specific options: we encode the request as <code>multipart/form-data</code>, and attach the blob as one of the form values using <code>FormData</code>.
getBlob__returns = Blob: A file-like data object
