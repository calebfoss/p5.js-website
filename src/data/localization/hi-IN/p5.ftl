alpha__returns = p5 ऑब्जेक्ट
blue__returns = p5 ऑब्जेक्ट
brightness__returns = p5 ऑब्जेक्ट
color__description__0 = रंग डेटाटाइप के चरों में भंडारण के लिए रंग बनाता है। पैरामीटर को वर्तमान <a href="#/p5/colorMode">colorMode()</a> के आधार पर RGB या HSB मानों के रूप में व्याख्यायित किया जाता है। डिफ़ॉल्ट मोड आरजीबी मान 0 से 255 तक है और इसलिए, फ़ंक्शन कॉल रंग (255, 204, 0) एक चमकदार पीला रंग लौटाएगा।
color__description__1 = ध्यान दें कि यदि <a href="#/p5/color">color()</a> को केवल एक मान प्रदान किया जाता है, तो इसे ग्रेस्केल मान के रूप में समझा जाएगा। दूसरा मान जोड़ें, और यह होगा अल्फा पारदर्शिता के लिए उपयोग किया जाता है। जब तीन मान निर्दिष्ट किए जाते हैं, तो उन्हें आरजीबी या एचएसबी मान के रूप में व्याख्या किया जाता है। चौथा मान जोड़ने से अल्फा पारदर्शिता लागू होती है। 
color__description__2 = यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग स्ट्रिंग और सभी नामित रंग स्ट्रिंग समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।
color__returns = फिक्स: परिणामस्वरूप रंग
green__returns = p5 ऑब्जेक्ट
hue__description__0 = रंग या पिक्सेल सरणी से रंग मान निकालता है।
hue__description__1 = ह्यू एचएसबी और एचएसएल दोनों में मौजूद है। एचएसबी रंग ऑब्जेक्ट के साथ आपूर्ति किए जाने पर यह फ़ंक्शन एचएसबी-सामान्यीकृत रंग लौटाएगा (या जब रंग मोड एचएसबी होने पर पिक्सेल सरणी के साथ आपूर्ति की जाती है), लेकिन एचएसएल-सामान्यीकृत रंग के लिए डिफ़ॉल्ट होगा अन्यथा। (मान केवल तभी भिन्न होंगे जब प्रत्येक सिस्टम के लिए अधिकतम ह्यू सेटिंग अलग हो।)
hue__returns = p5 ऑब्जेक्ट
lerpColor__description__0 = दो रंगों को मिलाता है उनके बीच कहीं तीसरा रंग खोजने के लिए। एएमटी पैरामीटर दो मानों के बीच इंटरपोलेट करने की मात्रा है जहां 0.0 पहले रंग के बराबर है, 0.1 पहले रंग के बहुत करीब है, 0.5 बीच में आधा है, आदि। एक 0 से नीचे की राशि को 0 माना जाएगा। इसी तरह, 1 से ऊपर की राशि को 1 पर सीमित कर दिया जाएगा। यह <a href="#/p5/lerp">lerp()</a> के व्यवहार से अलग है, लेकिन आवश्यक है क्योंकि अन्यथा सीमा के बाहर की संख्याएँ अजीब और अप्रत्याशित रंग उत्पन्न करेंगी।
lerpColor__description__1 = जिस तरह से रंगों को प्रक्षेपित किया जाता है वह वर्तमान रंग मोड पर निर्भर करता है।
lerpColor__returns = व्यवस्था / संख्या: प्रक्षेपित रंग
lightness__returns = p5 ऑब्जेक्ट
red__returns = p5 ऑब्जेक्ट
saturation__description__0 = रंग या पिक्सेल सरणी से संतृप्ति मान निकालता है।
saturation__description__1 = संतृप्ति को एचएसबी और एचएसएल में अलग-अलग स्केल किया जाता है। यह फ़ंक्शन एचएसबी रंग ऑब्जेक्ट के साथ आपूर्ति किए जाने पर एचएसबी संतृप्ति लौटाएगा (या जब रंग मोड एचएसबी है, तो पिक्सेल सरणी के साथ आपूर्ति की जाती है), लेकिन अन्यथा एचएसएल संतृप्ति में डिफ़ॉल्ट होगा।
saturation__returns = p5 ऑब्जेक्ट
background__description__0 = <a href="#/p5/background">background()</a> फ़ंक्शन p5.js कैनवास की पृष्ठभूमि के लिए उपयोग किए गए रंग को सेट करता है। डिफ़ॉल्ट पृष्ठभूमि पारदर्शी होती है। यह फ़ंक्शन आमतौर पर अंदर उपयोग किया जाता है <a href="#/p5/draw">draw()</a> प्रत्येक फ्रेम की शुरुआत में डिस्प्ले विंडो को साफ करने के लिए, लेकिन इसका उपयोग <a href="#/p5/setup">सेटअप ()</a> एनिमेशन के पहले फ्रेम पर बैकग्राउंड सेट करने के लिए या अगर बैकग्राउंड को सिर्फ एक बार सेट करने की जरूरत है।
background__description__1 = रंग या तो आरजीबी, एचएसबी, या एचएसएल रंग के संदर्भ में निर्दिष्ट किया गया है जो वर्तमान <a href="#/p5/colorMode">colorMode</a> पर निर्भर करता है। (डिफ़ॉल्ट रंग स्थान RGB है, जिसमें 0 से 255 तक की सीमा में प्रत्येक मान)। डिफ़ॉल्ट रूप से अल्फा श्रेणी भी 0 से 255 तक होती है। 
background__description__2 = यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग तार और सभी नामित रंग तार समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।
background__description__3 = एक <a href="#/p5.Color">p5.Color</a> ऑब्जेक्ट भी बैकग्राउंड कलर सेट करने के लिए दिया जा सकता है। 
background__description__4 = एक <a href="#/p5.Image">p5.Image</a> भी पृष्ठभूमि छवि सेट करने के लिए प्रदान किया जा सकता है।
colorMode__description__0 = <a href="#/p5/colorMode">colorMode()</a> p5.js रंग डेटा की व्याख्या करने के तरीके को बदल देता है। डिफ़ॉल्ट रूप से, <a href="#/p5/fill">भरें()</a>, <a href="#/p5/stroke">stroke()</a>, <a href="#/p5/background">background()</a>, और <a href="#/p5/color">color()</a> को RGB रंग मॉडल का उपयोग करके 0 और 255 के बीच के मानों द्वारा परिभाषित किया जाता है। यह colorMode (RGB, 255) सेट करने के बराबर है कलरमोड (एचएसबी) सेट करने से आप इसके बजाय एचएसबी सिस्टम का उपयोग कर सकते हैं। डिफ़ॉल्ट रूप से, यह कलरमोड (एचएसबी, 360, 100, 100, 1) है। आप एचएसएल का भी उपयोग कर सकते हैं। 
colorMode__description__1 = नोट: मौजूदा रंगीन ऑब्जेक्ट उस मोड को याद रखते हैं जिसमें वे बनाए गए थे, इसलिए आप उनकी उपस्थिति को प्रभावित किए बिना अपनी पसंद के अनुसार मोड बदल सकते हैं।
fill__description__0 = आकृतियों को भरने के लिए प्रयुक्त रंग सेट करता है। उदाहरण के लिए, यदि आप भरण (204, 102, 0) चलाते हैं, तो भरण आदेश के बाद खींची गई सभी आकृतियों को नारंगी रंग से भर दिया जाएगा। यह रंग या तो आरजीबी के संदर्भ में निर्दिष्ट है या वर्तमान <a href="#/p5/colorMode">colorMode()</a> के आधार पर HSB रंग। (डिफ़ॉल्ट रंग स्थान RGB है, जिसमें प्रत्येक मान 0 से 255 के बीच होता है)। अल्फा डिफ़ॉल्ट रूप से सीमा भी 0 से 255 तक होती है।
fill__description__1 = यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग तार और सभी नामित रंग तार समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।
fill__description__2 = एक p5 <a href="#/p5.Color">Color</a> ऑब्जेक्ट भी भरण रंग सेट करने के लिए प्रदान किया जा सकता है।
noStroke__description__0 = स्ट्रोक (रूपरेखा) खींचना अक्षम करता है। यदि दोनों <a href="#/p5/noStroke">noStroke()</a> और <a href="#/p5/noFill">noFill() </a> कहा जाता है, स्क्रीन पर कुछ भी नहीं खींचा जाएगा।
stroke__description__0 = आकृतियों के चारों ओर रेखाएँ और सीमाएँ खींचने के लिए उपयोग किए गए रंग को सेट करता है। यह रंग या तो RGB या HSB रंग के संदर्भ में निर्दिष्ट होता है जो वर्तमान <a href="#/p5/colorMode">colorMode()</a>पर निर्भर करता है। (डिफ़ॉल्ट रंग स्थान आरजीबी है, प्रत्येक मान 0 से 255 तक की सीमा में है। डिफ़ॉल्ट रूप से अल्फा श्रेणी भी 0 से 255 है। 
stroke__description__1 = यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग तार और सभी नामित रंग तार समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।
stroke__description__2 = स्ट्रोक रंग सेट करने के लिए एक p5 <a href="#/p5.Color">Color</a> ऑब्जेक्ट भी प्रदान किया जा सकता है।
arc__description__0 = स्क्रीन पर एक चाप बनाएं। यदि केवल एक्स, वाई, डब्ल्यू, एच, स्टार्ट और स्टॉप के साथ बुलाया जाता है, तो चाप को एक खुले पाई सेगमेंट के रूप में खींचा और भर दिया जाएगा। यदि एक मोड पैरामीटर प्रदान किया जाता है, तो चाप भर जाएगा एक खुला अर्ध-वृत्त (OPEN), एक बंद अर्ध-वृत्त (CHORD), या एक बंद पाई खंड (PIE) के रूप में। मूल को <a href="#/p5/ellipseMode">ellipseMode()</a>से बदला जा सकता है  समारोह। 
arc__description__1 = चाप हमेशा दक्षिणावर्त खींची जाती है, जहां से प्रारंभ गिरती है, जहां दीर्घवृत्त पर स्टॉप गिरती है। किसी भी कोण में TWO_PI को जोड़ने या घटाने से वह नहीं बदलता जहां वे गिरते हैं। यदि दोनों प्रारंभ और स्टॉप एक ही स्थान पर गिरते हैं, तो एक पूर्ण दीर्घवृत्त खींचा जाएगा। ध्यान रखें कि y-अक्ष नीचे की दिशा में बढ़ता है, इसलिए कोणों को धनात्मक x-दिशा ("3 बजे") से दक्षिणावर्त मापा जाता है।
ellipse__description__0 = स्क्रीन पर एक अंडाकार (अंडाकार) खींचता है। डिफ़ॉल्ट रूप से, पहले दो पैरामीटर अंडाकार के केंद्र का स्थान निर्धारित करते हैं, और तीसरा और चौथा पैरामीटर आकार की चौड़ाई और ऊंचाई निर्धारित करता है। यदि कोई ऊंचाई निर्दिष्ट नहीं है, तो का मान चौड़ाई का उपयोग चौड़ाई और ऊंचाई दोनों के लिए किया जाता है। यदि एक नकारात्मक ऊंचाई या चौड़ाई निर्दिष्ट की जाती है, तो निरपेक्ष मान लिया जाता है। 
ellipse__description__1 = समान चौड़ाई और ऊंचाई वाला एक दीर्घवृत्त एक वृत्त है। मूल को <a href="#/p5/ellipseMode">ellipseMode()</a> फ़ंक्शन के साथ बदला जा सकता है।
line__description__0 = स्क्रीन पर एक रेखा (दो बिंदुओं के बीच एक सीधा पथ) खींचता है। यदि केवल 4 पैरामीटर के साथ कॉल किया जाता है, तो यह 1 पिक्सेल की डिफ़ॉल्ट चौड़ाई के साथ 2D में एक रेखा खींचेगा। इस चौड़ाई को <a href="#/p5/strokeWeight"> stokeWeight()</a>का उपयोग करके संशोधित किया जा सकता है फ़ंक्शन। एक लाइन को भरा नहीं जा सकता है, इसलिए <a href="#/p5/fill">fill()</a> फंक्शन होगा किसी रेखा के रंग को प्रभावित न करें। इसलिए किसी रेखा को रंगने के लिए, <a href="#/p5/stroke">stroke()</a> फ़ंक्शन का उपयोग करें।
point__description__0 = एक बिंदु खींचता है, एक पिक्सेल के आयाम पर अंतरिक्ष में एक निर्देशांक। पहला पैरामीटर बिंदु के लिए क्षैतिज मान है, दूसरा पैरामीटर बिंदु के लिए लंबवत मान है। बिंदु का रंग <a href ="#/p5/stoke">stoke()</a> के साथ बदल जाता है फ़ंक्शन। बिंदु का आकार <a href="#/p5/strokeWeight">strokeWeight()</a से बदला जा सकता है > समारोह।
quad__description__0 = कैनवास पर एक क्वाड खींचता है। एक क्वाड एक चतुर्भुज, एक चार भुजा वाला बहुभुज है। यह एक आयत के समान है, लेकिन इसके किनारों के बीच के कोण नब्बे डिग्री तक सीमित नहीं हैं। मापदंडों की पहली जोड़ी (x1,y1) सेट पहले शीर्ष और बाद के जोड़े को परिभाषित आकार के चारों ओर दक्षिणावर्त या वामावर्त आगे बढ़ना चाहिए। z- तर्क केवल तभी काम करते हैं जब quad() का उपयोग WEBGL मोड में किया जाता है।
rect__description__0 = कैनवास पर एक आयत बनाता है। एक आयत एक चार-तरफा बंद आकार है जिसमें प्रत्येक कोण नब्बे डिग्री पर होता है। डिफ़ॉल्ट रूप से, पहले दो पैरामीटर ऊपरी-बाएं कोने का स्थान निर्धारित करते हैं, तीसरा चौड़ाई सेट करता है, और चौथा ऊंचाई सेट करता है। जिस तरह से इन मापदंडों की व्याख्या की जाती है, उसे <a href="#/p5/rectMode">rectMode()</a> फ़ंक्शन के साथ बदला जा सकता है। 
rect__description__1 = पांचवां, छठा, सातवां और आठवां पैरामीटर, यदि निर्दिष्ट किया गया है, क्रमशः शीर्ष-बाएं, शीर्ष-दाएं, निचले-दाएं और निचले-बाएं कोनों के लिए कोने त्रिज्या निर्धारित करें। एक छोड़ा गया कोने त्रिज्या पैरामीटर के मान पर सेट किया गया है पैरामीटर सूची में पहले निर्दिष्ट त्रिज्या मान।
triangle__description__0 = एक त्रिभुज को कैनवास पर खींचता है। एक त्रिभुज तीन बिंदुओं को जोड़कर बनाया गया एक विमान है। पहले दो तर्क पहले बिंदु को निर्दिष्ट करते हैं, मध्य दो तर्क दूसरे बिंदु को निर्दिष्ट करते हैं, और अंतिम दो तर्क तीसरे बिंदु को निर्दिष्ट करते हैं।
ellipseMode__description__0 = उस स्थान को संशोधित करता है जहां से दीर्घवृत्त खींचे जाते हैं, जिस तरह से पैरामीटर दिए गए हैं <a href="#/p5/ellipse">ellipse()</a>, <a href="#/p5/circle">circle()</a> और <a href=" #/p5/arc">arc()</a> की व्याख्या की जाती है। 
ellipseMode__description__1 = डिफ़ॉल्ट मोड CENTER है, जिसमें पहले दो मापदंडों की व्याख्या आकृति के केंद्र बिंदु के रूप में क्रमशः x और y निर्देशांक के रूप में की जाती है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।
ellipseMode__description__2 = ellipseMode(RADIUS) आकृति के केंद्र बिंदु के x और y निर्देशांक के रूप में पहले दो पैरामीटर का भी उपयोग करता है, लेकिन आकार की चौड़ाई और ऊंचाई के आधे हिस्से को निर्दिष्ट करने के लिए तीसरे और चौथे पैरामीटर का उपयोग करता है।
ellipseMode__description__3 = ellipseMode(CORNER) आकृति के ऊपरी-बाएँ कोने के रूप में पहले दो मापदंडों की व्याख्या करता है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।
ellipseMode__description__4 = ellipseMode(CORNERS) पहले दो मापदंडों को दीर्घवृत्त के बाउंडिंग बॉक्स के एक कोने के स्थान के रूप में और तीसरे और चौथे पैरामीटर को विपरीत कोने के स्थान के रूप में व्याख्या करता है।
ellipseMode__description__5 = इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।
noSmooth__description__0 = सभी ज्यामिति को दांतेदार (उपनाम) किनारों के साथ खींचता है। ध्यान दें कि <a href="#/p5/smooth">smooth()</a> डिफ़ॉल्ट रूप से 2D मोड में सक्रिय है, इसलिए कॉल करना आवश्यक है <a href="#/p5/noSmooth">noSmooth()</a> ज्योमेट्री, इमेज और फॉण्ट की स्मूदिंग को डिसेबल करने के लिए। 3D मोड में <a href="#/p5/noSmooth">noSmooth()</a> डिफ़ॉल्ट रूप से सक्षम है, इसलिए <a href="#/p5/smooth">smooth()</a> को कॉल करना आवश्यक है यदि आप अपनी ज्यामिति पर चिकने (एंटीअलाइज्ड) किनारे चाहते हैं।
rectMode__description__0 = उस स्थान को संशोधित करता है जहां से पैरामीटर दिए गए तरीके को बदलकर आयतें खींची जाती हैं <a href="#/p5/rect">rect()</a> की व्याख्या की जाती है। 
rectMode__description__1 = डिफ़ॉल्ट मोड कॉर्नर है, जो पहले दो मापदंडों को आकार के ऊपरी-बाएँ कोने के रूप में व्याख्या करता है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।
rectMode__description__2 = रेक्टमोड (कॉर्नर) पहले दो मापदंडों को कोनों में से एक के स्थान के रूप में और तीसरे और चौथे पैरामीटर को तिरछे विपरीत कोने के स्थान के रूप में व्याख्या करता है। ध्यान दें, आयत निर्देशांक के बीच खींचा जाता है, इसलिए यह आवश्यक नहीं है कि पहला कोना ऊपरी बाएँ कोना होगा। 
rectMode__description__3 = rectMode(CENTER) आकृति के केंद्र बिंदु के रूप में पहले दो मापदंडों की व्याख्या करता है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।
rectMode__description__4 = rectMode(RADIUS) आकृति के केंद्र बिंदु के रूप में पहले दो मापदंडों का भी उपयोग करता है, लेकिन क्रमशः आकार की चौड़ाई और ऊंचाई के आधे हिस्से को निर्दिष्ट करने के लिए तीसरे और चौथे पैरामीटर का उपयोग करता है।
rectMode__description__5 = इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।
smooth__description__0 = सभी ज्यामिति को चिकने (एंटी-अलियास) किनारों के साथ खींचता है। <a href="#/p5/smooth">smooth()</a> आकार बदलने वाली छवियों की छवि गुणवत्ता में भी सुधार करेगा। ध्यान दें कि <a href="#/p5/smooth">smooth()</a> डिफ़ॉल्ट रूप से 2D मोड में सक्रिय है; <a href="#/p5/noSmooth">noSmooth()</a> का इस्तेमाल ज्योमेट्री, इमेज और फोंट की स्मूदिंग को डिसेबल करने के लिए किया जा सकता है। 3डी मोड में, <a href="#/p5/noSmooth">noSmooth()</a> डिफ़ॉल्ट रूप से सक्षम है, इसलिए <a href="#/p5/smooth">smooth()</a> को कॉल करना आवश्यक है यदि आप अपनी ज्यामिति पर चिकने (एंटीअलाइज्ड) किनारे चाहते हैं।
strokeCap__description__0 = लाइन एंडिंग को रेंडर करने के लिए स्टाइल सेट करता है। ये सिरे या तो गोल, चौकोर या विस्तारित होते हैं, जिनमें से प्रत्येक को संबंधित मापदंडों के साथ निर्दिष्ट किया जाता है: ROUND, SQUARE और PROJECT। डिफ़ॉल्ट कैप राउंड है। 
strokeCap__description__1 = इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।
strokeJoin__description__0 = जोड़ों की शैली सेट करता है जो लाइन सेगमेंट को जोड़ता है। ये जोड़ या तो मिटर्ड, बेवेल या गोलाकार होते हैं और संबंधित पैरामीटर एमआईटीईआर, बेवेल और राउंड के साथ निर्दिष्ट होते हैं। डिफ़ॉल्ट संयुक्त एमआईटीईआर है। इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।
bezier__description__0 = स्क्रीन पर एक क्यूबिक बेज़ियर वक्र बनाता है। इन वक्रों को एंकर और नियंत्रण बिंदुओं की एक श्रृंखला द्वारा परिभाषित किया जाता है। पहले दो पैरामीटर पहले एंकर पॉइंट को निर्दिष्ट करते हैं और अंतिम दो पैरामीटर अन्य एंकर पॉइंट को निर्दिष्ट करते हैं, जो पहले और अंतिम बिंदु बन जाते हैं। वक्र पर। मध्य पैरामीटर दो नियंत्रण बिंदुओं को निर्दिष्ट करते हैं जो वक्र के आकार को परिभाषित करते हैं। लगभग बोलते हुए, नियंत्रण बिंदु वक्र को उनकी ओर "खींचें"। 
bezier__description__1 = बेज़ियर कर्व्स फ्रांसीसी ऑटोमोटिव इंजीनियर पियरे बेज़ियर द्वारा विकसित किए गए थे, और आमतौर पर कंप्यूटर ग्राफिक्स में धीरे-धीरे ढलान वाले वक्रों को परिभाषित करने के लिए उपयोग किए जाते हैं। <a href="#/p5/curve">वक्र()</a> भी देखें।
bezierPoint__description__0 = बेज़ियर वक्र के नियंत्रण और एंकर बिंदुओं के x या y समन्वय मानों को देखते हुए, यह स्थिति t पर बेज़ियर के x या y निर्देशांक का मूल्यांकन करता है। पैरामीटर a और d पहले और अंतिम बिंदुओं के x या y निर्देशांक हैं। वक्र पर जबकि बी और सी नियंत्रण बिंदुओं के हैं। अंतिम पैरामीटर टी परिणामी बिंदु की स्थिति है जो 0 और 1 के बीच दिया गया है। यह एक बार x निर्देशांक के साथ और दूसरी बार y निर्देशांक के साथ किया जा सकता है t पर एक बेजियर वक्र का स्थान प्राप्त करें।
bezierPoint__returns = स्थिति टी पर बेज़ियर वक्र का मूल्य
bezierTangent__description__0 = A, B, C, D के लिए स्थितिी t पर बेज़ियर के स्पर्शरेखा का मूल्यांकन करता है। पैरामीटर A और D वक्र पर पहले और आखिरी बिंदु हैं, और B और D नियंत्रण बिंदु हैं। अंतिम पैरामीटर t के बीच भिन्न होता है 0 और 1।
bezierTangent__returns = स्थिति में स्पर्शरेखा t
curve__description__0 = स्क्रीन पर दो बिंदुओं के बीच एक घुमावदार रेखा खींचता है, जिसे मध्य चार मापदंडों के रूप में दिया गया है। पहले दो पैरामीटर एक नियंत्रण बिंदु हैं, जैसे कि वक्र इस बिंदु से आया है, भले ही वह खींचा न गया हो। अंतिम दो पैरामीटर समान रूप से दूसरे का वर्णन करते हैं नियंत्रण बिंदु। <br /><br /> <a href="#/p5/curve">curve()</a> कार्यों की श्रृंखला को एक साथ रखकर या <a href= "#/p5/curveVertex">curveVertex()</a>। एक अतिरिक्त फ़ंक्शन जिसे <a href="#/p5/curveTightness">curveTightness()</a> कहा जाता है, की दृश्य गुणवत्ता के लिए नियंत्रण प्रदान करता है वक्र। <a href="#/p5/curve">curve()</a> फ़ंक्शन Catmull-Rom splines का कार्यान्वयन है।
curvePoint__returns = p5 ऑब्जेक्ट
curveTangent__returns = स्थिति में स्पर्शरेखा t
beginContour__description__0 = नकारात्मक बनाने के लिए <a href="#/p5/beginContour">beginContour()</a> और <a href="#/p5/endContour">endContour()</a> फ़ंक्शन का उपयोग करें अक्षर 'O' के केंद्र जैसे आकार के भीतर आकार। <a href="#/p5/beginContour">beginContour()</a> आकृति के लिए शीर्षों को रिकॉर्ड करना शुरू करता है और <a href="#/ p5/endContour">endContour()</a> रिकॉर्डिंग बंद कर देता है। ऋणात्मक आकार को परिभाषित करने वाले शीर्षों को बाहरी आकार से विपरीत दिशा में "wind" होना चाहिए। पहले बाहरी दक्षिणावर्त क्रम के लिए शीर्ष बनाएं, फिर आंतरिक के लिए आकृतियाँ, वामावर्त में शीर्ष आकृतियाँ बनाएँ।
beginContour__description__1 = इन कार्यों का उपयोग केवल <a href="#/p5/beginShape">beginShape()</a>/<a href="#/p5/endShape">endShape()</a> में किया जा सकता है। जोड़ी और रूपांतरण जैसे <a href="#/p5/translate">translate()</a>, <a href="#/p5/rotate">rotate()</a> , और <a href="#/p5/scale">scale()</a> एक <a href="#/p5/beginContour">beginContour()</a>/ के भीतर काम नहीं करते हैं <a href="#/p5/endContour">endContour()</a> जोड़ी। अन्य आकृतियों का उपयोग करना भी संभव नहीं है, जैसे कि <a href="#/p5/ellipse">ellipse ()</a> या <a href="#/p5/rect">rect()</a> भीतर।
beginShape__description__0 = <a href="#/p5/beginShape">beginShape()</a> और <a href="#/p5/endShape">endShape()</a> फ़ंक्शन का उपयोग करने से और अधिक निर्माण करने की अनुमति मिलती है जटिल रूप। <a href="#/p5/beginShape">beginShape()</a> एक आकृति के लिए शीर्षों को रिकॉर्ड करना शुरू करता है और <a href="#/p5/endShape">endShape()</a> रिकॉर्डिंग बंद कर देता है। प्रकार के पैरामीटर का मान यह बताता है कि दिए गए शीर्षों से किस प्रकार की आकृतियाँ बनानी हैं। बिना किसी विधा के निर्दिष्ट किए, आकार कोई भी अनियमित बहुभुज हो सकता है। 
beginShape__description__1 = <a href="#/p5/beginShape">beginShape()</a> के लिए उपलब्ध पैरामीटर POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, और TESS (केवल WebGL) हैं। कॉल करने के बाद <a href="#/p5/beginShape">beginShape()</a> फ़ंक्शन, <a href="#/p5/vertex">vertex()</a> कमांड की एक श्रृंखला होनी चाहिए अनुसरण करें। आकृति बनाना बंद करने के लिए, <a href="#/p5/endShape">endShape()</a> पर कॉल करें। प्रत्येक आकृति को वर्तमान स्ट्रोक रंग से रेखांकित किया जाएगा और भरण रंग से भरा जाएगा। 
beginShape__description__2 = रूपांतरण जैसे <a href="#/p5/translate">translate()</a>, <a href="#/p5/rotate">rotate()</a>, और <a href="#/p5/scale">scale()</a> <a href="#/p5/beginShape">beginShape()</a> के भीतर काम नहीं करते। यह भी नहीं है अन्य आकृतियों का उपयोग करना संभव है, जैसे कि <a href="#/p5/ellipse">ellipse()</a> या <a href="#/p5/rect">rect()</a > के भीतर <a href="#/p5/beginShape">beginShape()</a>।
bezierVertex__description__0 = बेज़ियर कर्व्स के लिए वर्टेक्स निर्देशांक निर्दिष्ट करता है। bezierVertex() के लिए प्रत्येक कॉल दो नियंत्रण बिंदुओं की स्थिति और एक बेज़ियर वक्र के एक एंकर पॉइंट को परिभाषित करता है, एक लाइन या आकार में एक नया सेगमेंट जोड़ता है। वेबजीएल मोड के लिए bezierVertex() में इस्तेमाल किया जा सकता है 2डी और साथ ही 3डी मोड। 2डी मोड 6 पैरामीटर की अपेक्षा करता है, जबकि 3डी मोड 9 पैरामीटर (जेड निर्देशांक सहित) की अपेक्षा करता है। 
bezierVertex__description__1 = पहली बार bezierVertex() का उपयोग <a href="#/p5/beginShape">beginShape()</a> कॉल के भीतर किया जाता है, इसे <a href="#/ पहला एंकर बिंदु सेट करने के लिए p5/vertex">vertex()</a>। इस फ़ंक्शन का उपयोग <a href="#/p5/beginShape">beginShape()</a> और <a के बीच किया जाना चाहिए href="#/p5/endShape">endShape()</a> और केवल तभी जब <a href="#/p5/beginShape">beginShape()</ में निर्दिष्ट कोई MODE या POINTS पैरामीटर न हो। ए>।
curveVertex__description__0 = वक्र के लिए शीर्ष निर्देशांक निर्दिष्ट करता है। इस फ़ंक्शन का उपयोग केवल <a href="#/p5/beginShape">beginShape()</a> और <a href="#/p5/endShape"> endShape()</a>के बीच किया जा सकता है और केवल तभी जब <a href="#/p5/beginShape">beginShape()</a> के लिए निर्दिष्ट कोई मोड पैरामीटर न हो। WebGL मोड के लिए curveVertex() का उपयोग 2D में किया जा सकता है साथ ही 3D मोड। 2D मोड 2 पैरामीटर की अपेक्षा करता है, जबकि 3D मोड 3 पैरामीटर की अपेक्षा करता है। 
curveVertex__description__1 = वक्र की शुरुआत और अंत को निर्देशित करने के लिए curveVertex() लाइनों की एक श्रृंखला में पहले और अंतिम बिंदुओं का उपयोग किया जाएगा। दूसरे और तीसरे बिंदुओं के बीच एक छोटा वक्र खींचने के लिए न्यूनतम चार बिंदुओं की आवश्यकता होती है। पांचवां जोड़ना curveVertex() के साथ बिंदु दूसरे, तीसरे और चौथे बिंदुओं के बीच वक्र खींचेगा। curveVertex() फ़ंक्शन कैटमुल-रोम स्प्लिन का कार्यान्वयन है।
endContour__description__0 = ऋण बनाने के लिए <a href="#/p5/beginContour">beginContour()</a> और <a href="#/p5/endContour">endContour()</a> फ़ंक्शन का उपयोग करें अक्षर 'O' के केंद्र जैसे आकार के भीतर आकार। <a href="#/p5/beginContour">beginContour()</a> आकृति के लिए शीर्षों को रिकॉर्ड करना शुरू करता है और <a href="#/ p5/endContour">endContour()</a> रिकॉर्डिंग बंद कर देता है। ऋणात्मक आकार को परिभाषित करने वाले शीर्षों को बाहरी आकार से विपरीत दिशा में "wind" होना चाहिए। पहले बाहरी दक्षिणावर्त क्रम के लिए कोने बनाएं, फिर आंतरिक के लिए आकृतियाँ, वामावर्त में शीर्ष आकृतियाँ बनाएँ।
endContour__description__1 = इन कार्यों का उपयोग केवल <a href="#/p5/beginShape">beginShape()</a>/<a href="#/p5/endShape">endShape()</a> में किया जा सकता है। जोड़ी और रूपांतरण जैसे <a href="#/p5/translate">translate()</a>, <a href="#/p5/rotate">rotate()</a> , और <a href="#/p5/scale">scale()</a> एक <a href="#/p5/beginContour">beginContour()</a>/ के भीतर काम नहीं करते हैं <a href="#/p5/endContour">endContour()</a> जोड़ी। अन्य आकृतियों का उपयोग करना भी संभव नहीं है, जैसे कि <a href="#/p5/ellipse">ellipse ()</a> या <a href="#/p5/rect">rect()</a> भीतर।
endShape__description__0 = <a href="#/p5/endShape">endShape()</a> फ़ंक्शन <a href="#/p5/beginShape">beginShape()</a> का सहयोगी है और <a href="#/p5/beginShape">beginShape()</a> के बाद ही कॉल किया जा सकता है। जब <a href="#/p5/endshape">endShape()</a> है कहा जाता है, पिछली कॉल के बाद से परिभाषित सभी छवि डेटा <a href="#/p5/beginShape">beginShape()</a> को छवि बफर में लिखा जाता है। मोड पैरामीटर के मान के रूप में स्थिर बंद करें आकृति को बंद करने के लिए (शुरुआत और अंत को जोड़ने के लिए)।
quadraticVertex__description__0 = द्विघात बेज़ियर वक्रों के लिए शीर्ष निर्देशांक निर्दिष्ट करता है। quadraticVertex() के लिए प्रत्येक कॉल एक नियंत्रण बिंदु और एक Bezier वक्र के एक एंकर बिंदु की स्थिति को परिभाषित करता है, एक रेखा या आकार में एक नया खंड जोड़ता है। पहली बार quadraticVertex() का उपयोग किया जाता है एक <a href="#/p5/beginShape">beginShape()</a> कॉल, इसे <a href="#/p5/vertex">vertex()</a>पर कॉल के साथ पहले से तैयार किया जाना चाहिए पहला एंकर पॉइंट सेट करने के लिए। WebGL मोड के लिए quadraticVertex() का उपयोग 2D के साथ-साथ 3D मोड में भी किया जा सकता है। 2D मोड 4 पैरामीटर की अपेक्षा करता है, जबकि 3D मोड 6 पैरामीटर (z निर्देशांक सहित) की अपेक्षा करता है। 
quadraticVertex__description__1 = इस फ़ंक्शन का उपयोग <a href="#/p5/beginShape">beginShape()</a> और <a href="#/p5/endShape">endShape()</a> के बीच किया जाना चाहिए और केवल तभी जब <a href="#/p5/beginShape">beginShape()</a> में निर्दिष्ट कोई मोड या POINTS पैरामीटर न हो।
vertex__description__0 = सभी आकृतियों का निर्माण शीर्षों की एक श्रृंखला को जोड़कर किया जाता है। <a href="#/p5/vertex">vertex()</a> का उपयोग बिंदुओं, रेखाओं, त्रिभुजों, चतुर्भुज और के लिए शीर्ष निर्देशांक निर्दिष्ट करने के लिए किया जाता है। बहुभुज। इसका उपयोग विशेष रूप से <a href="#/p5/beginShape">beginShape()</a> और <a href="#/p5/endShape">endShape()</a> में किया जाता है कार्य।
frameRate__description__0 = प्रत्येक सेकंड में प्रदर्शित होने वाले फ़्रेमों की संख्या निर्दिष्ट करता है। उदाहरण के लिए, फ़ंक्शन कॉल frameRate(30) एक सेकंड में 30 बार ताज़ा करने का प्रयास करेगा। यदि प्रोसेसर निर्दिष्ट दर को बनाए रखने के लिए पर्याप्त तेज़ नहीं है, तो फ़्रेम दर नहीं होगी हासिल किया। फ्रेम दर को <a href="#/p5/setup">setup()</a> के भीतर सेट करने की अनुशंसा की जाती है। डिफ़ॉल्ट फ्रेम दर प्रदर्शन की फ्रेम दर पर आधारित होती है (यहां इसे " भी कहा जाता है) ताज़ा दर"), जो अधिकांश कंप्यूटरों पर 60 फ़्रेम प्रति सेकंड पर सेट है। 24 फ़्रेम प्रति सेकंड (फ़िल्मों के लिए सामान्य) या इससे अधिक की फ़्रेम दर सुचारू एनिमेशन के लिए पर्याप्त होगी। यह setFrameRate(val) के समान है। 
frameRate__description__1 = कॉलिंग <a href="#/p5/frameRate">frameRate()</a> बिना किसी तर्क के वर्तमान फ्रैमरेट लौटाती है। ड्रा फ़ंक्शन को मान वापस करने से पहले कम से कम एक बार चलना चाहिए। यह वही है <a href="#/p5/getFrameRate">getFrameRate()</a> के रूप में। 
frameRate__description__2 = <a href="#/p5/frameRate">frameRate()</a> को ऐसे तर्कों के साथ कॉल करना जो संख्याओं के प्रकार के नहीं हैं या जो सकारात्मक नहीं हैं, वर्तमान फ्रैमरेट भी लौटाते हैं।
displayWidth__description__0 = सिस्टम वैरिएबल जो डिफ़ॉल्ट <a href="#/p5/pixelDensity">pixelDensity</a> के अनुसार स्क्रीन डिस्प्ले की चौड़ाई को स्टोर करता है। इसका उपयोग किसी भी डिस्प्ले साइज पर फुल-स्क्रीन प्रोग्राम चलाने के लिए किया जाता है। वास्तविक स्क्रीन आकार वापस करने के लिए, इसे पिक्सेल घनत्व से गुणा करें।
displayHeight__description__0 = सिस्टम वैरिएबल जो डिफ़ॉल्ट <a href="#/p5/pixelDensity">pixelDensity</a> के अनुसार स्क्रीन डिस्प्ले की ऊंचाई को स्टोर करता है। इसका उपयोग किसी भी डिस्प्ले साइज पर फुल-स्क्रीन प्रोग्राम चलाने के लिए किया जाता है। वास्तविक स्क्रीन आकार वापस करने के लिए, इसे पिक्सेल घनत्व से गुणा करें।
windowResized__description__0 = <a href="#/p5/windowResized">windowResized()</a> फ़ंक्शन हर बार ब्राउज़र विंडो का आकार बदलने पर एक बार कॉल किया जाता है। कैनवास का आकार बदलने या इसके लिए कोई अन्य समायोजन करने के लिए यह एक अच्छी जगह है नई विंडो के आकार को समायोजित करें।
width__description__0 = सिस्टम वैरिएबल जो ड्रॉइंग कैनवास की चौड़ाई को स्टोर करता है। यह मान <a href="#/p5/createCanvas">createCanvas()</a> फ़ंक्शन के पहले पैरामीटर द्वारा सेट किया गया है। उदाहरण के लिए, फ़ंक्शन कॉल createCanvas(320, 240) चौड़ाई चर को मान 320 पर सेट करता है। चौड़ाई का मान डिफ़ॉल्ट रूप से 100 हो जाता है यदि <a href="#/p5/createCanvas">createCanvas()</a> का उपयोग नहीं किया जाता है कार्यक्रम।
height__description__0 = सिस्टम वैरिएबल जो ड्राइंग कैनवास की ऊंचाई को स्टोर करता है। यह मान <a href="#/p5/createCanvas">createCanvas()</a> फ़ंक्शन के दूसरे पैरामीटर द्वारा सेट किया गया है। उदाहरण के लिए, फ़ंक्शन कॉल createCanvas(320, 240) ऊंचाई चर को 240 मान पर सेट करता है। ऊंचाई का मान डिफ़ॉल्ट रूप से 100 हो जाता है यदि <a href="#/p5/createCanvas">createCanvas()</a> का उपयोग नहीं किया जाता है कार्यक्रम।
fullscreen__description__0 = यदि तर्क दिया गया है, तो तर्क के मूल्य के आधार पर स्केच को पूर्णस्क्रीन पर सेट करता है या नहीं। यदि कोई तर्क नहीं दिया जाता है, तो वर्तमान पूर्णस्क्रीन स्थिति लौटाता है। ध्यान दें कि ब्राउज़र प्रतिबंधों के कारण इसे केवल उपयोगकर्ता इनपुट पर ही कॉल किया जा सकता है, उदाहरण के लिए , माउस प्रेस पर नीचे दिए गए उदाहरण की तरह।
fullscreen__returns = बूलियन: वर्तमान पूर्ण स्क्रीन स्थिति
pixelDensity__description__0 = उच्च पिक्सेल घनत्व डिस्प्ले के लिए पिक्सेल स्केलिंग सेट करता है। डिफ़ॉल्ट रूप से पिक्सेल घनत्व प्रदर्शन घनत्व से मेल खाने के लिए सेट होता है, इसे बंद करने के लिए पिक्सेल घनत्व (1) पर कॉल करें। <a href="#/p5/pixelDensity">pixelDensity() </a>पर कॉल करना बिना किसी तर्क के स्केच का वर्तमान पिक्सेल घनत्व लौटाता है।
displayDensity__returns = संख्या: मॉनिटर की वर्तमान पिक्सेल घनत्व
getURL__returns = स्ट्रिंग: URL
getURLPath__returns = फिक्स: पते के घटक
getURLParams__returns = ऑब्जेक्ट: URL पैरामीटर
preload__description__0 = <a href="#/p5/setup">setup()</a> से पहले सीधे कॉल किया जाता है, <a href="#/p5/preload">preload()</a> फ़ंक्शन है अवरुद्ध तरीके से बाहरी फ़ाइलों के एसिंक्रोनस लोडिंग को संभालने के लिए उपयोग किया जाता है। यदि एक प्रीलोड फ़ंक्शन परिभाषित किया गया है, तो <a href="#/p5/setup">setup()</a> तब तक प्रतीक्षा करेगा जब तक कि कोई भी लोड कॉल समाप्त न हो जाए . लोड कॉल के अलावा कुछ नहीं (<a href="#/p5/loadImage">loadImage</a>, <a href="#/p5/loadJSON">loadJSON</a>, <a href= "#/p5/loadFont">loadFont</a>, <a href="#/p5/loadStrings">loadStrings</a>, आदि) प्रीलोड फ़ंक्शन के अंदर होना चाहिए। यदि एसिंक्रोनस लोडिंग है पसंदीदा, लोड विधियों को इसके बजाय <a href="#/p5/setup">setup()</a> या कहीं भी कॉलबैक पैरामीटर के उपयोग के साथ कॉल किया जा सकता है। 
preload__description__1 = डिफ़ॉल्ट रूप से पाठ "loading..." प्रदर्शित किया जाएगा। अपना स्वयं का लोडिंग पृष्ठ बनाने के लिए, अपने पृष्ठ में आईडी "p5_loading" के साथ एक HTML तत्व शामिल करें। अधिक जानकारी <a href="http:/ /bit.ly/2kQ6Nio">यहां</a>।
setup__description__0 = <a href="#/p5/setup">setup()</a> फ़ंक्शन को प्रोग्राम शुरू होने पर एक बार कॉल किया जाता है। इसका उपयोग प्रारंभिक पर्यावरण गुणों जैसे स्क्रीन आकार और पृष्ठभूमि रंग को परिभाषित करने और मीडिया लोड करने के लिए किया जाता है जैसे कि प्रोग्राम शुरू होने पर इमेज और फोंट। प्रत्येक प्रोग्राम के लिए केवल एक <a href="#/p5/setup">setup()</a> फ़ंक्शन हो सकता है और इसे इसके बाद फिर से कॉल नहीं किया जाना चाहिए प्रारंभिक निष्पादन। 
setup__description__1 = ध्यान दें: <a href="#/p5/setup">setup()</a> के अंतर्गत घोषित वैरिएबल <a href="#/p5/draw">draw()</a> सहित अन्य कार्यों में पहुंच योग्य नहीं हैं।
draw__description__0 = <a href="#/p5/setup">setup()</a> के बाद सीधे कॉल किया जाता है, <a href="#/p5/draw">draw()</a> लगातार काम करता है प्रोग्राम के बंद होने तक या <a href="#/p5/noLoop">noLoop()</a> कॉल किए जाने तक अपने ब्लॉक के अंदर निहित कोड की पंक्तियों को निष्पादित करता है। नोट करें यदि <a href="#/p5 /noLoop">noLoop()</a> को <a href="#/p5/setup">setup()</a>, <a href="#/p5/draw">draw()</a> में कॉल किया जाता है। रुकने से पहले एक बार निष्पादित किया जाएगा। <a href="#/p5/draw">draw()</a> स्वचालित रूप से कॉल किया जाता है और इसे स्पष्ट रूप से कभी नहीं कहा जाना चाहिए। 
draw__description__1 = इसे हमेशा <a href="#/p5/noLoop">noLoop()</a>, <a href="#/p5/redraw">redraw()</a> से नियंत्रित किया जाना चाहिए और <a href="#/p5/loop">loop()</a>। <a href="#/p5/noLoop">noLoop()</a> के बाद कोड को में बंद कर देता है। <a href="#/p5/draw">draw()</a> क्रियान्वित होने से, <a href="#/p5/redraw">redraw()</a> कोड को <a href="#/p5/draw">draw()</a> एक बार निष्पादित करने के लिए, और <a href="#/p5/loop">loop()</a> कोड को अंदर कर देगा <a href="#/p5/draw">draw()</a> लगातार क्रियान्वित करना फिर से शुरू करने के लिए। 
draw__description__2 = प्रत्येक सेकंड में <a href="#/p5/draw">draw()</a> निष्पादित होने की संख्या को <a href="#/p5/frameRate">frameRate()</a> से नियंत्रित किया जा सकता है समारोह। 
draw__description__3 = प्रत्येक स्केच के लिए केवल एक <a href="#/p5/draw">draw()</a> फ़ंक्शन हो सकता है, और <a href="#/p5/draw">draw()</a>हो सकता है। मौजूद होना चाहिए यदि आप चाहते हैं कि कोड लगातार चलता रहे, या <a href="#/p5/mousePressed">mousePressed()</a> जैसी घटनाओं को संसाधित करने के लिए। कभी-कभी, आपके पास एक खाली हो सकता है अपने प्रोग्राम में <a href="#/p5/draw">draw()</a> पर कॉल करें, जैसा कि ऊपर दिए गए उदाहरण में दिखाया गया है। 
draw__description__4 = यह ध्यान रखना महत्वपूर्ण है कि ड्रॉइंग कोऑर्डिनेट सिस्टम प्रत्येक 
createCanvas__description__0 = दस्तावेज़ में एक कैनवास तत्व बनाता है, और इसके आयामों को पिक्सेल में सेट करता है। इस विधि को सेटअप के प्रारंभ में केवल एक बार कॉल किया जाना चाहिए। <a href="#/p5/createCanvas">createCanvas</a>को कॉल करना  एक स्केच में एक से अधिक बार बहुत अप्रत्याशित व्यवहार होगा। यदि आप एक से अधिक ड्राइंग कैनवास चाहते हैं तो आप <a href="#/p5/createGraphics">createGraphics</a> का उपयोग कर सकते हैं (डिफ़ॉल्ट रूप से छिपा हुआ लेकिन यह दिखाया जा सकता है)। 
createCanvas__description__1 = महत्वपूर्ण नोट: 2D मोड में (अर्थात जब <code>p5.Renderer</code> सेट नहीं है) मूल (0,0) स्क्रीन के ऊपर बाईं ओर स्थित है। 3D मोड में (अर्थात जब <code> p5.Renderer</code> <code>WEBGL</code> पर सेट है), मूल कैनवास के केंद्र में स्थित है। <a href="https://github.com/processing/p5.js/issues/1545">this issue</a> अधिक जानकारी के लिए। 
createCanvas__description__2 = सिस्टम चर की चौड़ाई और ऊंचाई इस फ़ंक्शन को दिए गए पैरामीटर द्वारा निर्धारित की जाती है। यदि <a href="#/p5/createCanvas">createCanvas()</a> का उपयोग नहीं किया जाता है, तो विंडो को एक डिफ़ॉल्ट दिया जाएगा 100x100 पिक्सेल का आकार।
createCanvas__description__3 = कैनवास को स्थान देने के और तरीकों के लिए, <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'> कैनवस की स्थिति</a> विकी पृष्ठ देखें।
createCanvas__returns = ऑब्जेक्ट: उत्पन्न कैनवास
createGraphics__returns = स्क्रीन पर ग्राफिक बफर
blendMode__description__0 = डिस्प्ले विंडो में पिक्सल को परिभाषित मोड के अनुसार ब्लेंड करता है। सोर्स पिक्सल (ए) को डिस्प्ले विंडो में पहले से मौजूद पिक्सल के साथ ब्लेंड करने के लिए निम्नलिखित मोड का विकल्प है: <ul> <li> <code>BLEND</code> - रंगों का रैखिक प्रक्षेप: C = A*factor + B. <b>यह डिफ़ॉल्ट सम्मिश्रण मोड है।</b></li> <li><code>ADD</code > - A और B का योग</li> <li><code>डार्केस्ट</code> - केवल सबसे गहरा रंग सफल होता है: C = min(A*factor, B).</li> <li><code> सबसे हल्का</code> - केवल सबसे हल्का रंग सफल होता है: C = max(A*factor, B).</li> <li><code>DIFFERENCE</code> - अंतर्निहित छवि से रंगों को घटाएं।</li> < li><code>EXCLUSION</code> - <code>DIFFERENCE</code> के समान, लेकिन कम चरम।</li> <li><code>MULTIPLY</code> - रंगों को गुणा करें, परिणाम हमेशा होगा गहरा।</li> <li><code>SCREEN</code> - विपरीत गुणा, रंगों के व्युत्क्रम मानों का उपयोग करता है।</li> <li><code>REPLACE</code> - पिक्सल पूरी तरह से दूसरों की जगह लेते हैं और अल्फ़ा (पारदर्शिता) मानों का उपयोग न करें।</li> <li><code>REMOVE</code> - A के अल्फा स्ट्रेंथ के साथ B से पिक्सेल निकालता है।</li> <li><code>Overlay</code> - <code>MULTIPLY</code> का मिश्रण और <कोड>स्क्रीन </कोड>। डार्क वैल्यू को गुणा करता है, और लाइट वैल्यू को स्क्रीन करता है। <em>(2D)</em></li> <li><code>HARD_LIGHT</code> - <code>SCREEN</code> जब ५०% से अधिक ग्रे, <code>MULTIPLY</code> जब निचला। <em>(2D)</em></li> <li><code>SOFT_LIGHT</code> - <code>DARKEST</code> और <code>LIGHTEST</code> का मिश्रण। <code>OVERLAY</code> की तरह काम करता है, लेकिन उतना कठोर नहीं। <em>(2D)</em> </li> <li><code>DODGE</code> - हल्के टोन को हल्का करता है और कंट्रास्ट को बढ़ाता है, अंधेरे को नज़रअंदाज़ करता है। <em>(2D)</em></li> <li><code>BURN</code> - गहरे रंग के क्षेत्र लगाए जाते हैं, कंट्रास्ट को बढ़ाते हुए, रोशनी को नज़रअंदाज़ किया जाता है। <em>(2D)</em></li> <li><code>सबट्रैक्ट</code> - A और B के शेष <em>(3D)</em></li> </ul> 
blendMode__description__1 = <em>(2D)</em> इंगित करता है कि यह मिश्रण मोड <b>केवल</b> 2D रेंडरर में काम करता है। <em>(3D)</em> इंगित करता है कि यह मिश्रण मोड <b>केवल< /b> WEBGL रेंडरर में काम करता है।
noLoop__description__0 = p5.js को <a href="#/p5/draw">draw()</a> में लगातार कोड निष्पादित करने से रोकता है। यदि <a href="#/p5/loop">loop()</a> को कॉल किया जाता है, <a href="#/p5/draw">draw()</a> में कोड लगातार चलने लगता है। यदि <a href="#/p5/ noLoop">noLoop()</a> <a href="#/p5/setup">setup()</a> में, यह ब्लॉक के अंदर की आखिरी लाइन होनी चाहिए।
noLoop__description__1 = जब <a href="#/p5/noLoop">noLoop()</a> का उपयोग किया जाता है, तो <a href="#/p5 जैसे ईवेंट हैंडलिंग फ़ंक्शंस के अंदर स्क्रीन में हेरफेर या एक्सेस करना संभव नहीं है /mousePressed">mousePressed()</a> या <a href="#/p5/keyPressed">keyPressed()</a>। इसके बजाय, <a href="#/ p5/redraw">redraw()</a> या <a href="#/p5/loop">loop()</a>, जो <a href="#/p5/draw ">draw()</a> चलेगा, जो स्क्रीन को ठीक से अपडेट कर सकता है। इसका मतलब है कि जब <a href="#/p5/noLoop">noLoop()</a> को कॉल किया गया है, तो कोई भी ड्रॉइंग नहीं कर सकता होता है, और <a href="#/p5/saveFrames">saveFrames()</a> या <a href="#/p5/loadPixels">loadPixels()</a> जैसे कार्य नहीं हो सकते हैं इस्तेमाल किया गया। 
noLoop__description__2 = ध्यान दें कि अगर स्केच का आकार बदला जाता है, तो <a href="#/p5/redraw">redraw()</a> को स्केच को अपडेट करने के लिए <a href="#/p5/noLoop">noLoop()</a>के बाद भी कॉल किया जाएगा। निर्दिष्ट किया गया है। अन्यथा, <a href="#/p5/loop">loop()</a> को कॉल किए जाने तक स्केच एक विषम स्थिति में प्रवेश करेगा। 
noLoop__description__3 = loop() की वर्तमान स्थिति की जांच करने के लिए <a href="#/p5/isLooping">isLooping()</a> का उपयोग करें।
loop__description__0 = डिफ़ॉल्ट रूप से, p5.js draw() के माध्यम से लगातार लूप करता है, इसके भीतर कोड निष्पादित करता है। हालांकि, <a href="#/p5/draw">draw()</a> लूप को कॉल करके रोका जा सकता है <a href="#/p5/noLoop">noLoop()</a>। उस स्थिति में, <a href="#/p5/draw">draw()</a> लूप कर सकते हैं loop() के साथ फिर से शुरू करें। 
loop__description__1 = अंदर के setup() से loop() को कॉल करने से बचें।
loop__description__2 = loop() की वर्तमान स्थिति की जांच करने के लिए <a href="#/p5/isLooping">isLooping()</a> का उपयोग करें।
push__description__0 = <a href="#/p5/push">push()</a> फ़ंक्शन वर्तमान आरेखण शैली सेटिंग्स और परिवर्तनों को सहेजता है, जबकि <a href="#/p5/pop">pop()</a> इन सेटिंग्स को पुनर्स्थापित करता है। ध्यान दें कि ये फ़ंक्शन हमेशा एक साथ उपयोग किए जाते हैं। वे आपको शैली और परिवर्तन सेटिंग्स को बदलने की अनुमति देते हैं और बाद में जो आपके पास था उस पर वापस लौटते हैं। जब एक नया राज्य शुरू होता है <a href="# /p5/push">push()</a>, यह वर्तमान शैली पर आधारित है और जानकारी को रूपांतरित करता है। <a href="#/p5/push">push()</a> और <a href="#/p5/pop">pop()</a> अधिक नियंत्रण प्रदान करने के लिए कार्यों को एम्बेड किया जा सकता है। (प्रदर्शन के लिए दूसरा उदाहरण देखें।) 
push__description__1 = <a href="#/p5/push">push()</a> निम्नलिखित कार्यों द्वारा नियंत्रित वर्तमान परिवर्तन स्थिति और शैली सेटिंग्स से संबंधित जानकारी संग्रहीत करता है: <a href="#/p5/fill ">भरें()</a>, <a href="#/p5/noFill">noFill()</a>, <a href="#/p5/noStroke">noStroke() </a>, <a href="#/p5/stroke">stroke()</a>, <a href="#/p5/tint">tint()</a>, <a href="#/p5/noTint">noTint()</a>, <a href="#/p5/strokeWeight">strokeWeight()</a>, <a href="# /p5/strokeCap">strokeCap()</a>, <a href="#/p5/strokeJoin">strokeJoin()</a>, <a href="#/p5/imageMode" >imageMode()</a>, <a href="#/p5/rectMode">rectMode()</a>, <a href="#/p5/ellipseMode">ellipseMode()</a>, <a href="#/p5/colorMode">colorMode()</a>, <a href="#/p5/textAlign">textAlign()</a>, <a href ="#/p5/textFont">textFont()</a>, <a href="#/p5/textSize">textSize()</a>, <a href="#/p5 /textLeading">textLeading()</a>, <a href="#/p5/applyMatrix">applyMatrix()</a>, <a href="#/p5/resetMatrix">resetMatrix ()</a>, <a href="#/p5/rotate">rotate()</a>, <a href="#/p5/scale">scale()</a>, <a href="#/p5/shearX">shearX()</a>, <a href="#/p5/shearY">shearY()</a>, <a href="#/p5/translate">translate()</a>, <a href=" #/p5/noiseSeed">noiseSeed()</a>. 
push__description__2 = WEBGL मोड में अतिरिक्त स्टाइल सेटिंग्स संग्रहीत की जाती हैं। इन्हें निम्नलिखित कार्यों द्वारा नियंत्रित किया जाता है: <a href="#/p5/setCamera">setCamera()</a>, <a href="#/p5/ ambientLight">ambientLight ()</a>, <a href="#/p5/directionLight">directionLight()</a>, <a href="#/p5/pointLight">pointLight()</a>, <a href="#/p5/texture">texture()</a>, <a href="#/p5/specularMaterial">specularMaterial()</a>, <a href="#/p5/shininess">shininess()</a>, <a href="#/p5/normalMaterial">normalMaterial()</a> और <a href=" #/p5/shader">shader()</a>।
pop__description__0 = <a href="#/p5/push">push()</a> फ़ंक्शन वर्तमान आरेखण शैली सेटिंग्स और परिवर्तनों को सहेजता है, जबकि <a href="#/p5/pop">pop()</a> इन सेटिंग्स को पुनर्स्थापित करता है। ध्यान दें कि ये फ़ंक्शन हमेशा एक साथ उपयोग किए जाते हैं। वे आपको शैली और परिवर्तन सेटिंग्स को बदलने की अनुमति देते हैं और बाद में जो आपके पास था उस पर वापस लौटते हैं। जब एक नया राज्य शुरू होता है <a href="# /p5/push">push()</a>, यह वर्तमान शैली पर आधारित है और जानकारी को रूपांतरित करता है। <a href="#/p5/push">push()</a> और <a href="#/p5/pop">pop()</a> अधिक नियंत्रण प्रदान करने के लिए कार्यों को एम्बेड किया जा सकता है। (प्रदर्शन के लिए दूसरा उदाहरण देखें।) 
pop__description__1 = <a href="#/p5/push">push()</a> निम्नलिखित कार्यों द्वारा नियंत्रित वर्तमान परिवर्तन स्थिति और शैली सेटिंग्स से संबंधित जानकारी संग्रहीत करता है: <a href="#/p5/fill ">भरें()</a>, <a href="#/p5/noFill">noFill()</a>, <a href="#/p5/noStroke">noStroke() </a>, <a href="#/p5/stroke">stroke()</a>, <a href="#/p5/tint">tint()</a>, <a href="#/p5/noTint">noTint()</a>, <a href="#/p5/strokeWeight">strokeWeight()</a>, <a href="# /p5/स्ट्रोककैप">स्ट्रोककैप()</a>, <a href="#/p5/stokeJoint">strokeJoint()</a>, <a href="#/p5/imageMode" >imageMode()</a>, <a href="#/p5/rectMode">rectMode()</a>, <a href="#/p5/ellipseMode">ellipseMode()</a> a>, <a href="#/p5/colorMode">colorMode()</a>, <a href="#/p5/textAlign">textAlign()</a>, <a href ="#/p5/textFont">textFont()</a>, <a href="#/p5/textSize">textSize()</a>, <a href="#/p5 /textLeading">textLeading()</a>, <a href="#/p5/applyMatrix">applyMatrix()</a>, <a href="#/p5/resetMatrix">resetMatrix ()</a>, <a href="#/p5/rotate">rotate()</a>, <a href="#/p5/scale">scale()</a>, <a href="#/p5/shearX">shearX()</a>, <a href="#/p5/shearY">shearY()</a>, <a href="#/p5/translate">translate()</a>, <a href=" #/p5/noiseSeed">noiseSeed()</a>. 
pop__description__2 = WEBGL मोड में अतिरिक्त स्टाइल सेटिंग्स संग्रहीत की जाती हैं। इन्हें निम्नलिखित कार्यों द्वारा नियंत्रित किया जाता है: <a href="#/p5/setCamera">setCamera()</a>, <a href="#/p5/ ambientLight">ambientLight()</a>, <a href="#/p5/directionLight">directionLight()</a>, <a href="#/p5/pointLight">pointLight()</a>, <a href="#/p5/texture">texture()</a>, <a href="#/p5/specularMaterial">specularMaterial()</a>, <a href="#/p5/shininess">चमकता()</a>, <a href="#/p5/normalMaterial">normalMaterial()</a> और <a href=" #/p5/shader">shader()</a>।
redraw__description__0 = कोड को एक बार <a href="#/p5/draw">draw()</a> के भीतर निष्पादित करता है। यह फ़ंक्शन प्रोग्राम को केवल आवश्यक होने पर ही डिस्प्ले विंडो को अपडेट करने की अनुमति देता है, उदाहरण के लिए जब कोई ईवेंट पंजीकृत किया जाता है <a href="#/p5/mousePressed">mousePressed()</a> या <a href="#/p5/keyPressed">keyPressed()</a> होता है। 
redraw__description__1 = किसी प्रोग्राम की संरचना में, <a href="#/p5/mousePressed" जैसे ईवेंट में </a> <a href="#/p5/redraw">redraw()</a> को कॉल करना ही समझदारी है। >mousePressed()</a>. ऐसा इसलिए है क्योंकि <a href="#/p5/redraw">redraw()</a> नहीं चलता है <a href="#/p5/draw"> draw() </a> तुरंत (यह केवल एक ध्वज सेट करता है जो इंगित करता है कि एक अद्यतन की आवश्यकता है)। 
redraw__description__2 = <a href="#/p5/redraw">redraw()</a> फ़ंक्शन ठीक से काम नहीं करता है जब <a href="#/p5/draw">draw()</a>के अंदर कॉल किया जाता है।. एनिमेशन को सक्षम/अक्षम करने के लिए, <a href="#/p5/loop">loop()</a> और <a href="#/p5/noLoop">noLoop()</a>का उपयोग करें।
redraw__description__3 = इसके अलावा आप प्रति मेथड कॉल के लिए रेड्रा की संख्या निर्धारित कर सकते हैं। बस एक पूर्णांक को एकल पैरामीटर के रूप में जोड़ें।
rotate__description__0 = कोण पैरामीटर द्वारा निर्दिष्ट राशि से एक आकृति को घुमाता है। यह फ़ंक्शन <a href="#/p5/angleMode">angleMode</a> के लिए जिम्मेदार है, इसलिए कोणों को रेडियन या डिग्री में दर्ज किया जा सकता है। 
rotate__description__1 = ऑब्जेक्ट्स को हमेशा उनकी सापेक्ष स्थिति के आसपास मूल में घुमाया जाता है और सकारात्मक संख्याएं वस्तुओं को एक दक्षिणावर्त दिशा में घुमाती हैं। परिवर्तन उन सभी चीजों पर लागू होता है जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करते हैं। उदाहरण के लिए, रोटेट (HALF_PI) को कॉल करना और फिर घुमाएं (HALF_PI) रोटेट (PI) के समान है। <a href="#/p5/draw">draw()</a> फिर से शुरू होने पर सभी रूपांतरण रीसेट हो जाते हैं। 
rotate__description__2 = तकनीकी रूप से, <a href="#/p5/rotate">rotate()</a> वर्तमान रूपांतरण मैट्रिक्स को एक रोटेशन मैट्रिक्स से गुणा करता है। इस फ़ंक्शन को <a href="#/p5/push">push()</a>द्वारा और नियंत्रित किया जा सकता है।  और <a href="#/p5/pop">pop()</a>।
rotateX__description__0 = कोण पैरामीटर में निर्दिष्ट राशि द्वारा एक्स अक्ष के चारों ओर एक आकृति घुमाता है। कोणों को रेडियंस या डिग्री में दर्ज किया जा सकता है।
rotateX__description__1 = ऑब्जेक्ट हमेशा अपनी सापेक्ष स्थिति के आसपास मूल के लिए घुमाए जाते हैं और सकारात्मक संख्याएं वस्तुओं को दक्षिणावर्त दिशा में घुमाती हैं। सभी रूपांतरण रीसेट हो जाते हैं जब <a href="#/p5/draw">draw()</a> फिर से शुरू होता है ।
rotateY__description__0 = कोण पैरामीटर में निर्दिष्ट राशि द्वारा Z अक्ष के चारों ओर एक आकृति को घुमाता है। कोणों को रेडियन या डिग्री में दर्ज किया जा सकता है।
rotateY__description__1 = यह विधि केवल WEBGL मोड में काम करती है।
scale__description__0 = शीर्षों को विस्तारित या अनुबंधित करके आकार के आकार को बढ़ाता या घटाता है। वस्तुएं हमेशा अपने सापेक्ष मूल से समन्वय प्रणाली तक स्केल करती हैं। स्केल मान दशमलव प्रतिशत के रूप में निर्दिष्ट होते हैं। उदाहरण के लिए, फ़ंक्शन कॉल स्केल (2.0) एक के आयाम को बढ़ाता है 200% से आकार। 
scale__description__1 = रूपांतरण हर उस चीज़ पर लागू होता है जो फ़ंक्शन के बाद और बाद में होने वाली कॉल के प्रभाव को गुणा करती है। उदाहरण के लिए, कॉलिंग स्केल (2.0) और फिर स्केल (1.5) स्केल (3.0) के समान है। यदि <a href="#/ p5/scale">scale()</a> को <a href="#/p5/draw">draw()</a> में कॉल किया जाता है, जब लूप दोबारा शुरू होता है तो ट्रांसफॉर्मेशन रीसेट हो जाता है।
scale__description__2 = Z पैरामीटर के साथ इस फ़ंक्शन का उपयोग करना केवल WEBGL मोड में उपलब्ध है। इस फ़ंक्शन को <a href="#/p5/push">push()</a> और <a href="#/p5/pop">pop()</a>के साथ और अधिक नियंत्रित किया जा सकता है।
shearX__description__0 = कोण पैरामीटर द्वारा निर्दिष्ट राशि द्वारा एक्स-अक्ष के चारों ओर एक आकृति को कतरता है। कोणों को वर्तमान कोण मोड में निर्दिष्ट किया जाना चाहिए। वस्तुओं को हमेशा उनकी सापेक्ष स्थिति के आसपास मूल और सकारात्मक संख्याएं घड़ी की दिशा में वस्तुओं को कतरनी करती हैं।
shearX__description__1 = परिवर्तन सब कुछ पर लागू होता है जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करता है। उदाहरण के लिए, शीयरएक्स (पीआई/2) और फिर शीयरएक्स (पीआई/2) को कॉल करना शीयरएक्स (पीआई) के समान है। यदि <a href= "#/p5/shearX">shearX()</a> को <a href="#/p5/draw">draw()</a> के अंदर कॉल किया जाता है, जब लूप में ट्रांसफ़ॉर्मेशन रीसेट हो जाता है फिर से शुरू होता है।
shearX__description__2 = तकनीकी रूप से, <a href="#/p5/shearX">shearX()</a> वर्तमान रूपांतरण मैट्रिक्स को एक रोटेशन मैट्रिक्स से गुणा करता है। इस फ़ंक्शन को <a href="#/p5/push">push()</a>द्वारा और नियंत्रित किया जा सकता है और <a href="#/p5/pop">pop()</a> फंक्शन।
shearY__description__0 = y-अक्ष के चारों ओर एक आकार को कोण पैरामीटर द्वारा निर्दिष्ट राशि को कतरता है। कोणों को वर्तमान कोण मोड में निर्दिष्ट किया जाना चाहिए। वस्तुओं को हमेशा उनकी सापेक्ष स्थिति के आसपास मूल और सकारात्मक संख्याएं वस्तुओं को दक्षिणावर्त दिशा में कतरती हैं।
shearY__description__1 = परिवर्तन सब कुछ पर लागू होता है जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करता है। उदाहरण के लिए, शीयरवाई (PI/2) और फिर शीयरवाई (PI/2) को कॉल करना शीयरवाई (PI) के समान है। यदि <a href= "#/p5/shearY">shearY()</a> को <a href="#/p5/draw">draw()</a> में कॉल किया जाता है, जब लूप में ट्रांसफॉर्मेशन रीसेट हो जाता है फिर से शुरू होता है।
shearY__description__2 = तकनीकी रूप से, <a href="#/p5/shearY">shearY()</a> वर्तमान रूपांतरण मैट्रिक्स को एक रोटेशन मैट्रिक्स से गुणा करता है। इस फ़ंक्शन को <a href="#/ द्वारा और नियंत्रित किया जा सकता है। p5/push">push()</a> और <a href="#/p5/pop">pop()</a> फंक्शन।
translate__description__0 = डिस्प्ले विंडो के भीतर वस्तुओं को विस्थापित करने के लिए एक राशि निर्दिष्ट करता है। x पैरामीटर बाएँ/दाएँ अनुवाद निर्दिष्ट करता है, y पैरामीटर ऊपर/नीचे अनुवाद निर्दिष्ट करता है।
translate__description__1 = रूपांतरण संचयी होते हैं और उन सभी चीजों पर लागू होते हैं जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करते हैं। उदाहरण के लिए, अनुवाद को कॉल करना (50, 0) और फिर अनुवाद (20, 0) अनुवाद (70, 0) के समान है। यदि <a href="#/p5/translate">translate()</a> को <a href="#/p5/draw">draw()</a> में कॉल किया जाता है, तो रूपांतरण है लूप के फिर से शुरू होने पर रीसेट करें। इस फ़ंक्शन को <a href="#/p5/push">push()</a> और <a href="#/p5/pop">pop()</a>का उपयोग करके नियंत्रित किया जा सकता है।