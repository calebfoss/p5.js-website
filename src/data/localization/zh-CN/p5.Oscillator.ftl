description__0 = Creates a signal that oscillates between -1.0 and 1.0. By default, the oscillation takes the form of a sinusoidal shape ('sine'). Additional types include 'triangle', 'sawtooth' and 'square'. The frequency defaults to 440 oscillations per second (440Hz, equal to the pitch of an 'A' note).
description__1 = Set the type of oscillation with setType(), or by instantiating a specific oscillator: <a href="/reference/#/p5.SinOsc">p5.SinOsc</a>, <a href="/reference/#/p5.TriOsc">p5.TriOsc</a>, <a href="/reference/#/p5.SqrOsc">p5.SqrOsc</a>, or <a href="/reference/#/p5.SawOsc">p5.SawOsc</a>.
params__freq = Number: (Optional) frequency defaults to 440Hz
params__type = String: (Optional) type of oscillator. Options:  'sine' (default), 'triangle',  'sawtooth', 'square'
start__description__0 = Start an oscillator.
start__description__1 = Starting an oscillator on a user gesture will enable audio in browsers that have a strict autoplay policy, including Chrome and most mobile devices. See also: <code>userStartAudio()</code>.
start__params__time = Number: (Optional) startTime in seconds from now.
start__params__frequency = Number: (Optional) frequency in Hz.
stop__description__0 = Stop an oscillator. Accepts an optional parameter to determine how long (in seconds from now) until the oscillator stops.
stop__params__secondsFromNow = Number: Time, in seconds from now.
amp__description__0 = Set the amplitude between 0 and 1.0. Or, pass in an object such as an oscillator to modulate amplitude with an audio signal.
amp__returns = AudioParam: gain If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's  gain/amplitude/volume)
amp__params__vol = Number|Object: between 0 and 1.0  or a modulating signal/oscillator
amp__params__rampTime = Number: (Optional) create a fade that lasts rampTime
amp__params__timeFromNow = Number: (Optional) schedule this event to happen  seconds from now
getAmp__description__0 = Returns the value of output gain
getAmp__returns = Number: Amplitude value between 0.0 and 1.0
freq__description__0 = Set frequency of an oscillator to a value. Or, pass in an object such as an oscillator to modulate the frequency with an audio signal.
freq__returns = AudioParam: Frequency If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's frequency
freq__params__Frequency = Number|Object: Frequency in Hz  or modulating signal/oscillator
freq__params__rampTime = Number: (Optional) Ramp time (in seconds)
freq__params__timeFromNow = Number: (Optional) Schedule this event to happen  at x seconds from now
getFreq__description__0 = Returns the value of frequency of oscillator
getFreq__returns = Number: Frequency of oscillator in Hertz
setType__description__0 = Set type to 'sine', 'triangle', 'sawtooth' or 'square'.
setType__params__type = String: 'sine', 'triangle', 'sawtooth' or 'square'.
getType__description__0 = Returns current type of oscillator eg. 'sine', 'triangle', 'sawtooth' or 'square'.
getType__returns = String: type of oscillator eg . 'sine', 'triangle', 'sawtooth' or 'square'.
connect__description__0 = Connect to a p5.sound / Web Audio object.
connect__params__unit = Object: A p5.sound or Web Audio object
disconnect__description__0 = Disconnect all outputs
pan__description__0 = Pan between Left (-1) and Right (1)
pan__params__panning = Number: Number between -1 and 1
pan__params__timeFromNow = Number: schedule this event to happen  seconds from now
getPan__description__0 = Returns the current value of panPosition , between Left (-1) and Right (1)
getPan__returns = Number: panPosition of oscillator , between Left (-1) and Right (1)
phase__description__0 = Set the phase of an oscillator between 0.0 and 1.0. In this implementation, phase is a delay time based on the oscillator's current frequency.
phase__params__phase = Number: float between 0.0 and 1.0
add__description__0 = Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with a new value.
add__returns = p5.Oscillator: Oscillator Returns this oscillator  with scaled output
add__params__number = Number: Constant number to add
mult__description__0 = Multiply the p5.Oscillator's output amplitude by a fixed value (i.e. turn it up!). Calling this method again will override the initial mult() with a new value.
mult__returns = p5.Oscillator: Oscillator Returns this oscillator  with multiplied output
mult__params__number = Number: Constant number to multiply
scale__description__0 = Scale this oscillator's amplitude values to a given range, and return the oscillator. Calling this method again will override the initial scale() with new values.
scale__returns = p5.Oscillator: Oscillator Returns this oscillator  with scaled output
scale__params__inMin = Number: input range minumum
scale__params__inMax = Number: input range maximum
scale__params__outMin = Number: input range minumum
scale__params__outMax = Number: input range maximum
